data
align 4
LABELV $95
byte 4 3238002688
byte 4 3238002688
byte 4 3238002688
align 4
LABELV $96
byte 4 1090519040
byte 4 1090519040
byte 4 1090519040
export G_TestEntityPosition
code
proc G_TestEntityPosition 76 28
file "..\..\..\..\code\game\g_mover.c"
line 33
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:#include "g_local.h"
;5:
;6:
;7:
;8:/*
;9:===============================================================================
;10:
;11:PUSHMOVE
;12:
;13:===============================================================================
;14:*/
;15:
;16:void MatchTeam( gentity_t *teamLeader, int moverState, int time );
;17:
;18:typedef struct {
;19:	gentity_t	*ent;
;20:	vec3_t	origin;
;21:	vec3_t	angles;
;22:	float	deltayaw;
;23:} pushed_t;
;24:pushed_t	pushed[MAX_GENTITIES], *pushed_p;
;25:
;26:
;27:/*
;28:============
;29:G_TestEntityPosition
;30:
;31:============
;32:*/
;33:gentity_t	*G_TestEntityPosition( gentity_t *ent ) {
line 41
;34:	trace_t	tr;
;35:	int		mask;
;36:	// JUHOX: accept monsters too
;37:#if MONSTER_MODE
;38:	playerState_t* ps;
;39:#endif
;40:
;41:	if ( ent->clipmask ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
EQI4 $89
line 42
;42:		mask = ent->clipmask;
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ASGNI4
line 43
;43:	} else {
ADDRGP4 $90
JUMPV
LABELV $89
line 44
;44:		mask = MASK_SOLID;
ADDRLP4 60
CNSTI4 1
ASGNI4
line 45
;45:	}
LABELV $90
line 51
;46:	// JUHOX: accept monsters too
;47:#if !MONSTER_MODE
;48:	if ( ent->client ) {
;49:		trap_Trace( &tr, ent->client->ps.origin, ent->r.mins, ent->r.maxs, ent->client->ps.origin, ent->s.number, mask );
;50:#else
;51:	ps = G_GetEntityPlayerState(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 G_GetEntityPlayerState
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 64
INDIRP4
ASGNP4
line 52
;52:	if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $91
line 53
;53:		trap_Trace(&tr, ps->origin, ent->r.mins, ent->r.maxs, ps->origin, ent->s.number, mask);
ADDRLP4 4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 57
;54:#endif
;55:	// JUHOX: armor fragments are smaller than noted in ent->r.mins & ent->r.maxs
;56:#if 1
;57:	}
ADDRGP4 $92
JUMPV
LABELV $91
line 58
;58:	else if (ent->item && ent->item->giType == IT_ARMOR && ent->item->giTag) {
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 808
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $93
ADDRLP4 68
INDIRP4
CNSTI4 808
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
NEI4 $93
ADDRLP4 68
INDIRP4
CNSTI4 808
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
EQI4 $93
line 62
;59:		static vec3_t mins = {-8,-8,-8};
;60:		static vec3_t maxs = {8,8,8};
;61:
;62:		trap_Trace(&tr, ent->s.pos.trBase, mins, maxs, ent->s.pos.trBase, ent->s.number, mask);
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 $95
ARGP4
ADDRGP4 $96
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 64
;63:#endif
;64:	} else {
ADDRGP4 $94
JUMPV
LABELV $93
line 65
;65:		trap_Trace( &tr, ent->s.pos.trBase, ent->r.mins, ent->r.maxs, ent->s.pos.trBase, ent->s.number, mask );
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 66
;66:	}
LABELV $94
LABELV $92
line 68
;67:	
;68:	if (tr.startsolid)
ADDRLP4 4+4
INDIRI4
CNSTI4 0
EQI4 $97
line 69
;69:		return &g_entities[ tr.entityNum ];
ADDRLP4 4+52
INDIRI4
CNSTI4 844
MULI4
ADDRGP4 g_entities
ADDP4
RETP4
ADDRGP4 $88
JUMPV
LABELV $97
line 71
;70:		
;71:	return NULL;
CNSTP4 0
RETP4
LABELV $88
endproc G_TestEntityPosition 76 28
export G_CreateRotationMatrix
proc G_CreateRotationMatrix 4 16
line 79
;72:}
;73:
;74:/*
;75:================
;76:G_CreateRotationMatrix
;77:================
;78:*/
;79:void G_CreateRotationMatrix(vec3_t angles, vec3_t matrix[3]) {
line 80
;80:	AngleVectors(angles, matrix[0], matrix[1], matrix[2]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 81
;81:	VectorInverse(matrix[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 82
;82:}
LABELV $101
endproc G_CreateRotationMatrix 4 16
export G_TransposeMatrix
proc G_TransposeMatrix 16 0
line 89
;83:
;84:/*
;85:================
;86:G_TransposeMatrix
;87:================
;88:*/
;89:void G_TransposeMatrix(vec3_t matrix[3], vec3_t transpose[3]) {
line 91
;90:	int i, j;
;91:	for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $103
line 92
;92:		for (j = 0; j < 3; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $107
line 93
;93:			transpose[i][j] = matrix[j][i];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ADDP4
INDIRF4
ASGNF4
line 94
;94:		}
LABELV $108
line 92
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $107
line 95
;95:	}
LABELV $104
line 91
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $103
line 96
;96:}
LABELV $102
endproc G_TransposeMatrix 16 0
export G_RotatePoint
proc G_RotatePoint 24 0
line 103
;97:
;98:/*
;99:================
;100:G_RotatePoint
;101:================
;102:*/
;103:void G_RotatePoint(vec3_t point, vec3_t matrix[3]) {
line 106
;104:	vec3_t tvec;
;105:
;106:	VectorCopy(point, tvec);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 107
;107:	point[0] = DotProduct(matrix[0], tvec);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 108
;108:	point[1] = DotProduct(matrix[1], tvec);
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 109
;109:	point[2] = DotProduct(matrix[2], tvec);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 110
;110:}
LABELV $111
endproc G_RotatePoint 24 0
export G_TryPushingEntity
proc G_TryPushingEntity 180 8
line 120
;111:
;112:
;113:/*
;114:==================
;115:G_TryPushingEntity
;116:
;117:Returns qfalse if the move is blocked
;118:==================
;119:*/
;120:qboolean	G_TryPushingEntity( gentity_t *check, gentity_t *pusher, vec3_t move, vec3_t amove ) {
line 128
;121:	vec3_t		matrix[3], transpose[3];
;122:	vec3_t		org, org2, move2;
;123:	gentity_t	*block;
;124:	playerState_t* ps;	// JUHOX
;125:
;126:	// EF_MOVER_STOP will just stop when contacting another entity
;127:	// instead of pushing it, but entities can still ride on top of it
;128:	if ( ( pusher->s.eFlags & EF_MOVER_STOP ) && 
ADDRLP4 116
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $119
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRLP4 116
INDIRP4
INDIRI4
EQI4 $119
line 129
;129:		check->s.groundEntityNum != pusher->s.number ) {
line 130
;130:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $118
JUMPV
LABELV $119
line 134
;131:	}
;132:
;133:	// save off the old position
;134:	if (pushed_p > &pushed[MAX_GENTITIES]) {
ADDRGP4 pushed_p
INDIRP4
CVPU4 4
ADDRGP4 pushed+32768
CVPU4 4
LEU4 $121
line 135
;135:		G_Error( "pushed_p > &pushed[MAX_GENTITIES]" );
ADDRGP4 $124
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 136
;136:	}
LABELV $121
line 137
;137:	pushed_p->ent = check;
ADDRGP4 pushed_p
INDIRP4
ADDRFP4 0
INDIRP4
ASGNP4
line 138
;138:	VectorCopy (check->s.pos.trBase, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 139
;139:	VectorCopy (check->s.apos.trBase, pushed_p->angles);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 147
;140:	// JUHOX: handle monsters too
;141:#if 0
;142:	if ( check->client ) {
;143:		pushed_p->deltayaw = check->client->ps.delta_angles[YAW];
;144:		VectorCopy (check->client->ps.origin, pushed_p->origin);
;145:	}
;146:#else
;147:	ps = G_GetEntityPlayerState(check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 G_GetEntityPlayerState
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 120
INDIRP4
ASGNP4
line 148
;148:	if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $125
line 149
;149:		pushed_p->deltayaw = ps->delta_angles[YAW];
ADDRGP4 pushed_p
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 150
;150:		VectorCopy(ps->origin, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 151
;151:	}
LABELV $125
line 153
;152:#endif
;153:	pushed_p++;
ADDRLP4 124
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
line 157
;154:
;155:	// try moving the contacted entity 
;156:	// figure movement due to the pusher's amove
;157:	G_CreateRotationMatrix( amove, transpose );
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
ARGP4
ADDRGP4 G_CreateRotationMatrix
CALLV
pop
line 158
;158:	G_TransposeMatrix( transpose, matrix );
ADDRLP4 80
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 G_TransposeMatrix
CALLV
pop
line 165
;159:	// JUHOX: handle monsters too
;160:#if 0
;161:	if (check->client) {
;162:		VectorSubtract (check->client->ps.origin, pusher->r.currentOrigin, org);
;163:	}
;164:#else
;165:	if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $127
line 166
;166:		VectorSubtract(ps->origin, pusher->r.currentOrigin, org);
ADDRLP4 132
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 132
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 132
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 167
;167:	}
ADDRGP4 $128
JUMPV
LABELV $127
line 169
;168:#endif
;169:	else {
line 170
;170:	VectorSubtract (check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 128
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 132
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 128
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 132
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 171
;171:	}
LABELV $128
line 172
;172:	VectorCopy( org, org2 );
ADDRLP4 28
ADDRLP4 16
INDIRB
ASGNB 12
line 173
;173:	G_RotatePoint( org2, matrix );
ADDRLP4 28
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 G_RotatePoint
CALLV
pop
line 174
;174:	VectorSubtract (org2, org, move2);
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 176
;175:	// add movement
;176:	VectorAdd (check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 128
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 132
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 136
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 177
;177:	VectorAdd (check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 144
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDF4
ASGNF4
line 187
;178:	// JUHOX: handle monsters too
;179:#if 0
;180:	if ( check->client ) {
;181:		VectorAdd (check->client->ps.origin, move, check->client->ps.origin);
;182:		VectorAdd (check->client->ps.origin, move2, check->client->ps.origin);
;183:		// make sure the client's view rotates when on a rotating mover
;184:		check->client->ps.delta_angles[YAW] += ANGLE2SHORT(amove[YAW]);
;185:	}
;186:#else
;187:	if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $141
line 188
;188:		VectorAdd(ps->origin, move, ps->origin);
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 189
;189:		VectorAdd(ps->origin, move2, ps->origin);
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDF4
ASGNF4
line 191
;190:		// make sure the view rotates when on a rotating mover
;191:		ps->delta_angles[YAW] += ANGLE2SHORT(amove[YAW]);
ADDRLP4 176
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1127615329
MULF4
CVFI4 4
CNSTI4 65535
BANDI4
ADDI4
ASGNI4
line 192
;192:	}
LABELV $141
line 196
;193:#endif
;194:
;195:	// may have pushed them off an edge
;196:	if ( check->s.groundEntityNum != pusher->s.number ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
EQI4 $145
line 197
;197:		check->s.groundEntityNum = -1;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 -1
ASGNI4
line 198
;198:	}
LABELV $145
line 200
;199:
;200:	block = G_TestEntityPosition( check );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 152
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 152
INDIRP4
ASGNP4
line 201
;201:	if (!block) {
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $147
line 208
;202:		// pushed ok
;203:		// JUHOX: consider monsters too
;204:#if 0
;205:		if ( check->client ) {
;206:			VectorCopy( check->client->ps.origin, check->r.currentOrigin );
;207:#else
;208:		if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $149
line 209
;209:			VectorCopy(ps->origin, check->r.currentOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 211
;210:#endif
;211:		} else {
ADDRGP4 $150
JUMPV
LABELV $149
line 212
;212:			VectorCopy( check->s.pos.trBase, check->r.currentOrigin );
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 156
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 213
;213:		}
LABELV $150
line 214
;214:		trap_LinkEntity (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 215
;215:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $118
JUMPV
LABELV $147
line 221
;216:	}
;217:
;218:	// if it is ok to leave in the old position, do it
;219:	// this is only relevent for riding entities, not pushed
;220:	// Sliding trapdoors can cause this.
;221:	VectorCopy( (pushed_p-1)->origin, check->s.pos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 228
;222:	// JUHOX: handle monsters too
;223:#if 0
;224:	if ( check->client ) {
;225:		VectorCopy( (pushed_p-1)->origin, check->client->ps.origin);
;226:	}
;227:#else
;228:	if (ps) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $151
line 229
;229:		VectorCopy((pushed_p-1)->origin, ps->origin);
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 230
;230:	}
LABELV $151
line 232
;231:#endif
;232:	VectorCopy( (pushed_p-1)->angles, check->s.apos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -16
ADDP4
INDIRB
ASGNB 12
line 233
;233:	block = G_TestEntityPosition (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 156
INDIRP4
ASGNP4
line 234
;234:	if ( !block ) {
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $153
line 235
;235:		check->s.groundEntityNum = -1;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 -1
ASGNI4
line 236
;236:		pushed_p--;
ADDRLP4 160
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
line 237
;237:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $118
JUMPV
LABELV $153
line 241
;238:	}
;239:
;240:	// blocked
;241:	return qfalse;
CNSTI4 0
RETI4
LABELV $118
endproc G_TryPushingEntity 180 8
export G_CheckProxMinePosition
proc G_CheckProxMinePosition 96 28
line 249
;242:}
;243:
;244:/*
;245:==================
;246:G_CheckProxMinePosition
;247:==================
;248:*/
;249:qboolean G_CheckProxMinePosition( gentity_t *check ) {
line 253
;250:	vec3_t		start, end;
;251:	trace_t	tr;
;252:
;253:	VectorMA(check->s.pos.trBase, 0.125, check->movedir, start);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 84
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
CNSTF4 1040187392
MULF4
ADDF4
ASGNF4
line 254
;254:	VectorMA(check->s.pos.trBase, 2, check->movedir, end);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 88
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 88
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 92
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ADDF4
ASGNF4
line 255
;255:	trap_Trace( &tr, start, NULL, NULL, end, check->s.number, MASK_SOLID );
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 257
;256:	
;257:	if (tr.startsolid || tr.fraction < 1)
ADDRLP4 24+4
INDIRI4
CNSTI4 0
NEI4 $164
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
GEF4 $160
LABELV $164
line 258
;258:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $155
JUMPV
LABELV $160
line 260
;259:
;260:	return qtrue;
CNSTI4 1
RETI4
LABELV $155
endproc G_CheckProxMinePosition 96 28
export G_TryPushingProxMine
proc G_TryPushingProxMine 120 16
line 268
;261:}
;262:
;263:/*
;264:==================
;265:G_TryPushingProxMine
;266:==================
;267:*/
;268:qboolean G_TryPushingProxMine( gentity_t *check, gentity_t *pusher, vec3_t move, vec3_t amove ) {
line 274
;269:	vec3_t		forward, right, up;
;270:	vec3_t		org, org2, move2;
;271:	int ret;
;272:
;273:	// we need this for pushing things later
;274:	VectorSubtract (vec3_origin, amove, org);
ADDRLP4 76
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 76
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 vec3_origin+8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 275
;275:	AngleVectors (org, forward, right, up);
ADDRLP4 0
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 278
;276:
;277:	// try moving the contacted entity 
;278:	VectorAdd (check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 281
;279:
;280:	// figure movement due to the pusher's amove
;281:	VectorSubtract (check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 92
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 92
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 282
;282:	org2[0] = DotProduct (org, forward);
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 283
;283:	org2[1] = -DotProduct (org, right);
ADDRLP4 12+4
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 48+8
INDIRF4
MULF4
ADDF4
NEGF4
ASGNF4
line 284
;284:	org2[2] = DotProduct (org, up);
ADDRLP4 12+8
ADDRLP4 0
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 60+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 60+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 285
;285:	VectorSubtract (org2, org, move2);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 286
;286:	VectorAdd (check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
ADDF4
ASGNF4
line 288
;287:
;288:	ret = G_CheckProxMinePosition( check );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 G_CheckProxMinePosition
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 112
INDIRI4
ASGNI4
line 289
;289:	if (ret) {
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $194
line 290
;290:		VectorCopy( check->s.pos.trBase, check->r.currentOrigin );
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 291
;291:		trap_LinkEntity (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 292
;292:	}
LABELV $194
line 293
;293:	return ret;
ADDRLP4 72
INDIRI4
RETI4
LABELV $165
endproc G_TryPushingProxMine 120 16
export G_MoverPush
proc G_MoverPush 4232 32
line 307
;294:}
;295:
;296:void G_ExplodeMissile( gentity_t *ent );
;297:
;298:/*
;299:============
;300:G_MoverPush
;301:
;302:Objects need to be moved back on a failed push,
;303:otherwise riders would continue to slide.
;304:If qfalse is returned, *obstacle will be the blocking entity
;305:============
;306:*/
;307:qboolean G_MoverPush( gentity_t *pusher, vec3_t move, vec3_t amove, gentity_t **obstacle ) {
line 316
;308:	int			i, e;
;309:	gentity_t	*check;
;310:	vec3_t		mins, maxs;
;311:	pushed_t	*p;
;312:	int			entityList[MAX_GENTITIES];
;313:	int			listedEntities;
;314:	vec3_t		totalMins, totalMaxs;
;315:
;316:	*obstacle = NULL;
ADDRFP4 12
INDIRP4
CNSTP4 0
ASGNP4
line 319
;317:
;318:#if 1	// JUHOX: non-solid brushes don't push anything
;319:	if (pusher->flags & FL_NON_SOLID) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $197
line 321
;320:		// move the pusher to it's final position
;321:		VectorAdd( pusher->r.currentOrigin, move, pusher->r.currentOrigin );
ADDRLP4 4164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4164
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 4164
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4168
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 4168
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4172
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 4172
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 322
;322:		VectorAdd( pusher->r.currentAngles, amove, pusher->r.currentAngles );
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4176
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 4176
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4180
INDIRP4
CNSTI4 504
ADDP4
ADDRLP4 4180
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4184
INDIRP4
CNSTI4 508
ADDP4
ADDRLP4 4184
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 323
;323:		VectorCopy(pusher->r.currentOrigin, pusher->s.origin);	// JUHOX
ADDRLP4 4188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4188
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 4188
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 324
;324:		trap_LinkEntity( pusher );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 325
;325:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $196
JUMPV
LABELV $197
line 331
;326:	}
;327:#endif
;328:
;329:	// mins/maxs are the bounds at the destination
;330:	// totalMins / totalMaxs are the bounds for the entire move
;331:	if ( pusher->r.currentAngles[0] || pusher->r.currentAngles[1] || pusher->r.currentAngles[2]
ADDRLP4 4164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4164
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
CNSTF4 0
NEF4 $205
ADDRLP4 4164
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
CNSTF4 0
NEF4 $205
ADDRLP4 4164
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
CNSTF4 0
NEF4 $205
ADDRLP4 4168
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4168
INDIRP4
INDIRF4
CNSTF4 0
NEF4 $205
ADDRLP4 4168
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
NEF4 $205
ADDRLP4 4168
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
EQF4 $199
LABELV $205
line 332
;332:		|| amove[0] || amove[1] || amove[2] ) {
line 335
;333:		float		radius;
;334:
;335:		radius = RadiusFromBounds( pusher->r.mins, pusher->r.maxs );
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4176
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 4176
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 4180
ADDRGP4 RadiusFromBounds
CALLF4
ASGNF4
ADDRLP4 4172
ADDRLP4 4180
INDIRF4
ASGNF4
line 336
;336:		for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $206
line 337
;337:			mins[i] = pusher->r.currentOrigin[i] + move[i] - radius;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 4172
INDIRF4
SUBF4
ASGNF4
line 338
;338:			maxs[i] = pusher->r.currentOrigin[i] + move[i] + radius;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 4172
INDIRF4
ADDF4
ASGNF4
line 339
;339:			totalMins[i] = mins[i] - move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4140
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 340
;340:			totalMaxs[i] = maxs[i] - move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4152
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 341
;341:		}
LABELV $207
line 336
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $206
line 342
;342:	} else {
ADDRGP4 $200
JUMPV
LABELV $199
line 343
;343:		for (i=0 ; i<3 ; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $210
line 344
;344:			mins[i] = pusher->r.absmin[i] + move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 345
;345:			maxs[i] = pusher->r.absmax[i] + move[i];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 346
;346:		}
LABELV $211
line 343
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $210
line 348
;347:
;348:		VectorCopy( pusher->r.absmin, totalMins );
ADDRLP4 4140
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRB
ASGNB 12
line 349
;349:		VectorCopy( pusher->r.absmax, totalMaxs );
ADDRLP4 4152
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRB
ASGNB 12
line 350
;350:		for (i=0 ; i<3 ; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $214
line 351
;351:			if ( move[i] > 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $218
line 352
;352:				totalMaxs[i] += move[i];
ADDRLP4 4176
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4152
ADDP4
ASGNP4
ADDRLP4 4176
INDIRP4
ADDRLP4 4176
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 353
;353:			} else {
ADDRGP4 $219
JUMPV
LABELV $218
line 354
;354:				totalMins[i] += move[i];
ADDRLP4 4176
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4140
ADDP4
ASGNP4
ADDRLP4 4176
INDIRP4
ADDRLP4 4176
INDIRP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 355
;355:			}
LABELV $219
line 356
;356:		}
LABELV $215
line 350
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $214
line 357
;357:	}
LABELV $200
line 360
;358:
;359:	// unlink the pusher so we don't get it in the entityList
;360:	trap_UnlinkEntity( pusher );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 362
;361:
;362:	listedEntities = trap_EntitiesInBox( totalMins, totalMaxs, entityList, MAX_GENTITIES );
ADDRLP4 4140
ARGP4
ADDRLP4 4152
ARGP4
ADDRLP4 40
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4172
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4136
ADDRLP4 4172
INDIRI4
ASGNI4
line 365
;363:
;364:	// move the pusher to it's final position
;365:	VectorAdd( pusher->r.currentOrigin, move, pusher->r.currentOrigin );
ADDRLP4 4176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4176
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 4176
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4180
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 4180
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4184
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 4184
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 366
;366:	VectorAdd( pusher->r.currentAngles, amove, pusher->r.currentAngles );
ADDRLP4 4188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4188
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 4188
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4192
INDIRP4
CNSTI4 504
ADDP4
ADDRLP4 4192
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4196
INDIRP4
CNSTI4 508
ADDP4
ADDRLP4 4196
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 367
;367:	VectorCopy(pusher->r.currentOrigin, pusher->s.origin);	// JUHOX
ADDRLP4 4200
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4200
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 4200
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 368
;368:	trap_LinkEntity( pusher );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 371
;369:
;370:	// see if any solid entities are inside the final position
;371:	for ( e = 0 ; e < listedEntities ; e++ ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $223
JUMPV
LABELV $220
line 372
;372:		check = &g_entities[ entityList[ e ] ];
ADDRLP4 8
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
CNSTI4 844
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 411
;373:
;374:#ifdef MISSIONPACK
;375:		if ( check->s.eType == ET_MISSILE ) {
;376:			// if it is a prox mine
;377:			if ( !strcmp(check->classname, "prox mine") ) {
;378:				// if this prox mine is attached to this mover try to move it with the pusher
;379:				if ( check->enemy == pusher ) {
;380:					if (!G_TryPushingProxMine( check, pusher, move, amove )) {
;381:						//explode
;382:						check->s.loopSound = 0;
;383:						G_AddEvent( check, EV_PROXIMITY_MINE_TRIGGER, 0 );
;384:						G_ExplodeMissile(check);
;385:						if (check->activator) {
;386:							G_FreeEntity(check->activator);
;387:							check->activator = NULL;
;388:						}
;389:						//G_Printf("prox mine explodes\n");
;390:					}
;391:				}
;392:				else {
;393:					//check if the prox mine is crushed by the mover
;394:					if (!G_CheckProxMinePosition( check )) {
;395:						//explode
;396:						check->s.loopSound = 0;
;397:						G_AddEvent( check, EV_PROXIMITY_MINE_TRIGGER, 0 );
;398:						G_ExplodeMissile(check);
;399:						if (check->activator) {
;400:							G_FreeEntity(check->activator);
;401:							check->activator = NULL;
;402:						}
;403:						//G_Printf("prox mine explodes\n");
;404:					}
;405:				}
;406:				continue;
;407:			}
;408:		}
;409:#endif
;410:		// only push items and players
;411:		if ( check->s.eType != ET_ITEM && check->s.eType != ET_PLAYER && !check->physicsObject ) {
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $224
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $224
ADDRLP4 8
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 0
NEI4 $224
line 412
;412:			continue;
ADDRGP4 $221
JUMPV
LABELV $224
line 416
;413:		}
;414:
;415:		// if the entity is standing on the pusher, it will definitely be moved
;416:		if ( check->s.groundEntityNum != pusher->s.number ) {
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $226
line 418
;417:			// see if the ent needs to be tested
;418:			if ( check->r.absmin[0] >= maxs[0]
ADDRLP4 8
INDIRP4
CNSTI4 464
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
GEF4 $238
ADDRLP4 8
INDIRP4
CNSTI4 468
ADDP4
INDIRF4
ADDRLP4 28+4
INDIRF4
GEF4 $238
ADDRLP4 8
INDIRP4
CNSTI4 472
ADDP4
INDIRF4
ADDRLP4 28+8
INDIRF4
GEF4 $238
ADDRLP4 8
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $238
ADDRLP4 8
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
LEF4 $238
ADDRLP4 8
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
GTF4 $228
LABELV $238
line 423
;419:			|| check->r.absmin[1] >= maxs[1]
;420:			|| check->r.absmin[2] >= maxs[2]
;421:			|| check->r.absmax[0] <= mins[0]
;422:			|| check->r.absmax[1] <= mins[1]
;423:			|| check->r.absmax[2] <= mins[2] ) {
line 424
;424:				continue;
ADDRGP4 $221
JUMPV
LABELV $228
line 428
;425:			}
;426:			// see if the ent's bbox is inside the pusher's final position
;427:			// this does allow a fast moving object to pass through a thin entity...
;428:			if (!G_TestEntityPosition (check)) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4212
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 4212
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $239
line 429
;429:				continue;
ADDRGP4 $221
JUMPV
LABELV $239
line 431
;430:			}
;431:		}
LABELV $226
line 434
;432:
;433:		// the entity needs to be pushed
;434:		if ( G_TryPushingEntity( check, pusher, move, amove ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4208
ADDRGP4 G_TryPushingEntity
CALLI4
ASGNI4
ADDRLP4 4208
INDIRI4
CNSTI4 0
EQI4 $241
line 435
;435:			continue;
ADDRGP4 $221
JUMPV
LABELV $241
line 441
;436:		}
;437:
;438:		// the move was blocked an entity
;439:
;440:		// bobbing entities are instant-kill and never get blocked
;441:		if ( pusher->s.pos.trType == TR_SINE || pusher->s.apos.trType == TR_SINE ) {
ADDRLP4 4212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4212
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
EQI4 $245
ADDRLP4 4212
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 4
NEI4 $243
LABELV $245
line 442
;442:			G_Damage( check, pusher, pusher, NULL, NULL, 99999, 0, MOD_CRUSH );
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 4216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4216
INDIRP4
ARGP4
ADDRLP4 4216
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 99999
ARGI4
CNSTI4 0
ARGI4
CNSTI4 22
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 443
;443:			continue;
ADDRGP4 $221
JUMPV
LABELV $243
line 448
;444:		}
;445:
;446:		
;447:		// save off the obstacle so we can call the block function (crush, etc)
;448:		*obstacle = check;
ADDRFP4 12
INDIRP4
ADDRLP4 8
INDIRP4
ASGNP4
line 453
;449:
;450:		// move back any entities we already moved
;451:		// go backwards, so if the same entity was pushed
;452:		// twice, it goes back to the original position
;453:		for ( p=pushed_p-1 ; p>=pushed ; p-- ) {
ADDRLP4 0
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
ADDRGP4 $249
JUMPV
LABELV $246
line 454
;454:			VectorCopy (p->origin, p->ent->s.pos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 455
;455:			VectorCopy (p->angles, p->ent->s.apos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRB
ASGNB 12
line 463
;456:			// JUHOX: handle monsters too
;457:#if 0
;458:			if ( p->ent->client ) {
;459:				p->ent->client->ps.delta_angles[YAW] = p->deltayaw;
;460:				VectorCopy (p->origin, p->ent->client->ps.origin);
;461:			}
;462:#else
;463:			{
line 466
;464:				playerState_t* ps;
;465:
;466:				ps = G_GetEntityPlayerState(p->ent);
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRLP4 4228
ADDRGP4 G_GetEntityPlayerState
CALLP4
ASGNP4
ADDRLP4 4224
ADDRLP4 4228
INDIRP4
ASGNP4
line 467
;467:				if (ps) {
ADDRLP4 4224
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $250
line 468
;468:					ps->delta_angles[YAW] = p->deltayaw;
ADDRLP4 4224
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 469
;469:					VectorCopy(p->origin, ps->origin);
ADDRLP4 4224
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 470
;470:				}
LABELV $250
line 471
;471:			}
line 473
;472:#endif
;473:			trap_LinkEntity (p->ent);
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 474
;474:		}
LABELV $247
line 453
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
LABELV $249
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 pushed
CVPU4 4
GEU4 $246
line 475
;475:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $196
JUMPV
LABELV $221
line 371
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $223
ADDRLP4 12
INDIRI4
ADDRLP4 4136
INDIRI4
LTI4 $220
line 478
;476:	}
;477:
;478:	return qtrue;
CNSTI4 1
RETI4
LABELV $196
endproc G_MoverPush 4232 32
export G_MoverTeam
proc G_MoverTeam 76 16
line 487
;479:}
;480:
;481:
;482:/*
;483:=================
;484:G_MoverTeam
;485:=================
;486:*/
;487:void G_MoverTeam( gentity_t *ent ) {
line 492
;488:	vec3_t		move, amove;
;489:	gentity_t	*part, *obstacle;
;490:	vec3_t		origin, angles;
;491:
;492:	obstacle = NULL;
ADDRLP4 52
CNSTP4 0
ASGNP4
line 497
;493:
;494:	// make sure all team slaves can move before commiting
;495:	// any moves or calling any think functions
;496:	// if the move is blocked, all moved objects will be backed out
;497:	pushed_p = pushed;
ADDRGP4 pushed_p
ADDRGP4 pushed
ASGNP4
line 498
;498:	for (part = ent ; part ; part=part->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $256
JUMPV
LABELV $253
line 500
;499:		// get current position
;500:		BG_EvaluateTrajectory( &part->s.pos, level.time, origin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 501
;501:		BG_EvaluateTrajectory( &part->s.apos, level.time, angles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 502
;502:		VectorSubtract( origin, part->r.currentOrigin, move );
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
SUBF4
ASGNF4
line 503
;503:		VectorSubtract( angles, part->r.currentAngles, amove );
ADDRLP4 16
ADDRLP4 40
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
SUBF4
ASGNF4
line 504
;504:		if ( !G_MoverPush( part, move, amove, &obstacle ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ADDRGP4 G_MoverPush
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $267
line 505
;505:			break;	// move was blocked
ADDRGP4 $255
JUMPV
LABELV $267
line 507
;506:		}
;507:	}
LABELV $254
line 498
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $256
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $253
LABELV $255
line 509
;508:
;509:	if (part) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $269
line 511
;510:		// go back to the previous position
;511:		for ( part = ent ; part ; part = part->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $274
JUMPV
LABELV $271
line 512
;512:			part->s.pos.trTime += level.time - level.previousTime;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 513
;513:			part->s.apos.trTime += level.time - level.previousTime;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 514
;514:			BG_EvaluateTrajectory( &part->s.pos, level.time, part->r.currentOrigin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 515
;515:			BG_EvaluateTrajectory( &part->s.apos, level.time, part->r.currentAngles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 516
;516:			VectorCopy(ent->r.currentOrigin, ent->s.origin);	// JUHOX DEBUG
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 517
;517:			trap_LinkEntity( part );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 518
;518:		}
LABELV $272
line 511
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $274
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $271
line 521
;519:
;520:		// if the pusher has a "blocked" function, call it
;521:		if (ent->blocked) {
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $252
line 522
;522:			ent->blocked( ent, obstacle );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 704
ADDP4
INDIRP4
CALLV
pop
line 523
;523:		}
line 524
;524:		return;
ADDRGP4 $252
JUMPV
LABELV $269
line 528
;525:	}
;526:
;527:	// the move succeeded
;528:	for ( part = ent ; part ; part = part->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $286
JUMPV
LABELV $283
line 530
;529:		// call the reached function if time is at or past end point
;530:		if ( part->s.pos.trType == TR_LINEAR_STOP ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 3
NEI4 $287
line 531
;531:			if ( level.time >= part->s.pos.trTime + part->s.pos.trDuration ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDI4
LTI4 $289
line 532
;532:				if ( part->reached ) {
ADDRLP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $292
line 533
;533:					part->reached( part );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRP4
CALLV
pop
line 534
;534:				}
LABELV $292
line 535
;535:			}
LABELV $289
line 536
;536:		}
LABELV $287
line 537
;537:	}
LABELV $284
line 528
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $286
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $283
line 538
;538:}
LABELV $252
endproc G_MoverTeam 76 16
export G_RunMover
proc G_RunMover 4 4
line 546
;539:
;540:/*
;541:================
;542:G_RunMover
;543:
;544:================
;545:*/
;546:void G_RunMover( gentity_t *ent ) {
line 549
;547:	// if not a team captain, don't do anything, because
;548:	// the captain will handle everything
;549:	if ( ent->flags & FL_TEAMSLAVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $295
line 550
;550:		return;
ADDRGP4 $294
JUMPV
LABELV $295
line 554
;551:	}
;552:
;553:	// if stationary at one of the positions, don't move anything
;554:	if ( ent->s.pos.trType != TR_STATIONARY || ent->s.apos.trType != TR_STATIONARY ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $299
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 0
EQI4 $297
LABELV $299
line 555
;555:		G_MoverTeam( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_MoverTeam
CALLV
pop
line 556
;556:	}
LABELV $297
line 559
;557:
;558:	// check think function
;559:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 560
;560:}
LABELV $294
endproc G_RunMover 4 4
export SetMoverState
proc SetMoverState 56 12
line 577
;561:
;562:/*
;563:============================================================================
;564:
;565:GENERAL MOVERS
;566:
;567:Doors, plats, and buttons are all binary (two position) movers
;568:Pos1 is "at rest", pos2 is "activated"
;569:============================================================================
;570:*/
;571:
;572:/*
;573:===============
;574:SetMoverState
;575:===============
;576:*/
;577:void SetMoverState( gentity_t *ent, moverState_t moverState, int time ) {
line 581
;578:	vec3_t			delta;
;579:	float			f;
;580:
;581:	ent->moverState = moverState;
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 583
;582:
;583:	ent->s.pos.trTime = time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 584
;584:	switch( moverState ) {
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $301
ADDRLP4 16
INDIRI4
CNSTI4 3
GTI4 $301
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $316
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $316
address $304
address $305
address $306
address $311
code
LABELV $304
line 586
;585:	case MOVER_POS1:
;586:		VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 616
ADDP4
INDIRB
ASGNB 12
line 587
;587:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 588
;588:		break;
ADDRGP4 $302
JUMPV
LABELV $305
line 590
;589:	case MOVER_POS2:
;590:		VectorCopy( ent->pos2, ent->s.pos.trBase );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 628
ADDP4
INDIRB
ASGNB 12
line 591
;591:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 592
;592:		break;
ADDRGP4 $302
JUMPV
LABELV $306
line 594
;593:	case MOVER_1TO2:
;594:		VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 616
ADDP4
INDIRB
ASGNB 12
line 595
;595:		VectorSubtract( ent->pos2, ent->pos1, delta );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 36
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 40
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
SUBF4
ASGNF4
line 596
;596:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 597
;597:		VectorScale( delta, f, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 598
;598:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 599
;599:		break;
ADDRGP4 $302
JUMPV
LABELV $311
line 601
;600:	case MOVER_2TO1:
;601:		VectorCopy( ent->pos2, ent->s.pos.trBase );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 628
ADDP4
INDIRB
ASGNB 12
line 602
;602:		VectorSubtract( ent->pos1, ent->pos2, delta );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 48
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 52
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
SUBF4
ASGNF4
line 603
;603:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 604
;604:		VectorScale( delta, f, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 605
;605:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 606
;606:		break;
LABELV $301
LABELV $302
line 608
;607:	}
;608:	BG_EvaluateTrajectory( &ent->s.pos, level.time, ent->r.currentOrigin );	
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 609
;609:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 610
;610:}
LABELV $300
endproc SetMoverState 56 12
export MatchTeam
proc MatchTeam 4 12
line 620
;611:
;612:/*
;613:================
;614:MatchTeam
;615:
;616:All entities in a mover team will move from pos1 to pos2
;617:in the same amount of time
;618:================
;619:*/
;620:void MatchTeam( gentity_t *teamLeader, int moverState, int time ) {
line 623
;621:	gentity_t		*slave;
;622:
;623:	for ( slave = teamLeader ; slave ; slave = slave->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $322
JUMPV
LABELV $319
line 624
;624:		SetMoverState( slave, moverState, time );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 625
;625:	}
LABELV $320
line 623
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $322
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $319
line 626
;626:}
LABELV $318
endproc MatchTeam 4 12
export ReturnToPos1
proc ReturnToPos1 8 12
line 635
;627:
;628:
;629:
;630:/*
;631:================
;632:ReturnToPos1
;633:================
;634:*/
;635:void ReturnToPos1( gentity_t *ent ) {
line 636
;636:	MatchTeam( ent, MOVER_2TO1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 639
;637:
;638:	// looping sound
;639:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
ASGNI4
line 642
;640:
;641:	// starting sound
;642:	if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
CNSTI4 0
EQI4 $325
line 643
;643:		G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 644
;644:	}
LABELV $325
line 645
;645:}
LABELV $323
endproc ReturnToPos1 8 12
export Reached_BinaryMover
proc Reached_BinaryMover 12 12
line 653
;646:
;647:
;648:/*
;649:================
;650:Reached_BinaryMover
;651:================
;652:*/
;653:void Reached_BinaryMover( gentity_t *ent ) {
line 656
;654:
;655:	// stop the looping sound
;656:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
ASGNI4
line 658
;657:
;658:	if ( ent->moverState == MOVER_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 2
NEI4 $328
line 660
;659:		// reached pos2
;660:		SetMoverState( ent, MOVER_POS2, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 663
;661:
;662:		// play sound
;663:		if ( ent->soundPos2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
CNSTI4 0
EQI4 $331
line 664
;664:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos2 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 665
;665:		}
LABELV $331
line 668
;666:
;667:		// return to pos1 after a delay
;668:		ent->think = ReturnToPos1;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 ReturnToPos1
ASGNP4
line 669
;669:		ent->nextthink = level.time + ent->wait;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 672
;670:
;671:		// fire targets
;672:		if ( !ent->activator ) {
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $334
line 673
;673:			ent->activator = ent;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 776
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 674
;674:		}
LABELV $334
line 675
;675:		G_UseTargets( ent, ent->activator );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 676
;676:	} else if ( ent->moverState == MOVER_2TO1 ) {
ADDRGP4 $329
JUMPV
LABELV $328
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 3
NEI4 $336
line 678
;677:		// reached pos1
;678:		SetMoverState( ent, MOVER_POS1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 681
;679:
;680:		// play sound
;681:		if ( ent->soundPos1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
CNSTI4 0
EQI4 $339
line 682
;682:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 683
;683:		}
LABELV $339
line 686
;684:
;685:		// close areaportals
;686:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
EQU4 $343
ADDRLP4 4
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $337
LABELV $343
line 687
;687:			trap_AdjustAreaPortalState( ent, qfalse );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 688
;688:		}
line 689
;689:	} else {
ADDRGP4 $337
JUMPV
LABELV $336
line 690
;690:		G_Error( "Reached_BinaryMover: bad moverState" );
ADDRGP4 $344
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 691
;691:	}
LABELV $337
LABELV $329
line 692
;692:}
LABELV $327
endproc Reached_BinaryMover 12 12
export Use_BinaryMover
proc Use_BinaryMover 16 12
line 700
;693:
;694:
;695:/*
;696:================
;697:Use_BinaryMover
;698:================
;699:*/
;700:void Use_BinaryMover( gentity_t *ent, gentity_t *other, gentity_t *activator ) {
line 705
;701:	int		total;
;702:	int		partial;
;703:
;704:	// only the master should be used
;705:	if ( ent->flags & FL_TEAMSLAVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $346
line 706
;706:		Use_BinaryMover( ent->teammaster, other, activator );
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 707
;707:		return;
ADDRGP4 $345
JUMPV
LABELV $346
line 710
;708:	}
;709:
;710:	ent->activator = activator;
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 712
;711:
;712:	if ( ent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 0
NEI4 $348
line 715
;713:		// start moving 50 msec later, becase if this was player
;714:		// triggered, level.time hasn't been advanced yet
;715:		MatchTeam( ent, MOVER_1TO2, level.time + 50 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 718
;716:
;717:		// starting sound
;718:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
CNSTI4 0
EQI4 $351
line 719
;719:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 720
;720:		}
LABELV $351
line 723
;721:
;722:		// looping sound
;723:		ent->s.loopSound = ent->soundLoop;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
ASGNI4
line 726
;724:
;725:		// open areaportal
;726:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 12
INDIRP4
CVPU4 4
EQU4 $355
ADDRLP4 12
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $345
LABELV $355
line 727
;727:			trap_AdjustAreaPortalState( ent, qtrue );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 728
;728:		}
line 729
;729:		return;
ADDRGP4 $345
JUMPV
LABELV $348
line 733
;730:	}
;731:
;732:	// if all the way up, just delay before coming down
;733:	if ( ent->moverState == MOVER_POS2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 1
NEI4 $356
line 734
;734:		ent->nextthink = level.time + ent->wait;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 735
;735:		return;
ADDRGP4 $345
JUMPV
LABELV $356
line 739
;736:	}
;737:
;738:	// only partway down before reversing
;739:	if ( ent->moverState == MOVER_2TO1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 3
NEI4 $359
line 740
;740:		total = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 741
;741:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 742
;742:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $362
line 743
;743:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 744
;744:		}
LABELV $362
line 746
;745:
;746:		MatchTeam( ent, MOVER_1TO2, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 748
;747:
;748:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
CNSTI4 0
EQI4 $345
line 749
;749:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 750
;750:		}
line 751
;751:		return;
ADDRGP4 $345
JUMPV
LABELV $359
line 755
;752:	}
;753:
;754:	// only partway up before reversing
;755:	if ( ent->moverState == MOVER_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 2
NEI4 $367
line 756
;756:		total = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 757
;757:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 758
;758:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $370
line 759
;759:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 760
;760:		}
LABELV $370
line 762
;761:
;762:		MatchTeam( ent, MOVER_2TO1, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 764
;763:
;764:		if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
CNSTI4 0
EQI4 $345
line 765
;765:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 766
;766:		}
line 767
;767:		return;
LABELV $367
line 769
;768:	}
;769:}
LABELV $345
endproc Use_BinaryMover 16 12
export InitMover
proc InitMover 92 12
line 781
;770:
;771:
;772:
;773:/*
;774:================
;775:InitMover
;776:
;777:"pos1", "pos2", and "speed" should be set before calling,
;778:so the movement delta can be calculated
;779:================
;780:*/
;781:void InitMover( gentity_t *ent ) {
line 791
;782:	vec3_t		move;
;783:	float		distance;
;784:	float		light;
;785:	vec3_t		color;
;786:	qboolean	lightSet, colorSet;
;787:	char		*sound;
;788:
;789:	// if the "model2" key is set, use a seperate model
;790:	// for drawing, but clip against the brushes
;791:	if ( ent->model2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $376
line 792
;792:		ent->s.modelindex2 = G_ModelIndex( ent->model2 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 548
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 793
;793:	}
LABELV $376
line 796
;794:
;795:	// if the "loopsound" key is set, use a constant looping sound when moving
;796:	if ( G_SpawnString( "noise", "100", &sound ) ) {
ADDRGP4 $380
ARGP4
ADDRGP4 $381
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 44
ADDRGP4 G_SpawnString
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $378
line 797
;797:		ent->s.loopSound = G_SoundIndex( sound );
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 798
;798:	}
LABELV $378
line 801
;799:
;800:	// if the "color" or "light" keys are set, setup constantLight
;801:	lightSet = G_SpawnFloat( "light", "100", &light );
ADDRGP4 $382
ARGP4
ADDRGP4 $381
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 802
;802:	colorSet = G_SpawnVector( "color", "1 1 1", color );
ADDRGP4 $383
ARGP4
ADDRGP4 $384
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 52
ADDRGP4 G_SpawnVector
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 52
INDIRI4
ASGNI4
line 803
;803:	if ( lightSet || colorSet ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $387
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $385
LABELV $387
line 806
;804:		int		r, g, b, i;
;805:
;806:		r = color[0] * 255;
ADDRLP4 56
ADDRLP4 12
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 807
;807:		if ( r > 255 ) {
ADDRLP4 56
INDIRI4
CNSTI4 255
LEI4 $388
line 808
;808:			r = 255;
ADDRLP4 56
CNSTI4 255
ASGNI4
line 809
;809:		}
LABELV $388
line 810
;810:		g = color[1] * 255;
ADDRLP4 60
ADDRLP4 12+4
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 811
;811:		if ( g > 255 ) {
ADDRLP4 60
INDIRI4
CNSTI4 255
LEI4 $391
line 812
;812:			g = 255;
ADDRLP4 60
CNSTI4 255
ASGNI4
line 813
;813:		}
LABELV $391
line 814
;814:		b = color[2] * 255;
ADDRLP4 64
ADDRLP4 12+8
INDIRF4
CNSTF4 1132396544
MULF4
CVFI4 4
ASGNI4
line 815
;815:		if ( b > 255 ) {
ADDRLP4 64
INDIRI4
CNSTI4 255
LEI4 $394
line 816
;816:			b = 255;
ADDRLP4 64
CNSTI4 255
ASGNI4
line 817
;817:		}
LABELV $394
line 818
;818:		i = light / 4;
ADDRLP4 68
ADDRLP4 36
INDIRF4
CNSTF4 1048576000
MULF4
CVFI4 4
ASGNI4
line 819
;819:		if ( i > 255 ) {
ADDRLP4 68
INDIRI4
CNSTI4 255
LEI4 $396
line 820
;820:			i = 255;
ADDRLP4 68
CNSTI4 255
ASGNI4
line 821
;821:		}
LABELV $396
line 822
;822:		ent->s.constantLight = r | ( g << 8 ) | ( b << 16 ) | ( i << 24 );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
CNSTI4 8
LSHI4
BORI4
ADDRLP4 64
INDIRI4
CNSTI4 16
LSHI4
BORI4
ADDRLP4 68
INDIRI4
CNSTI4 24
LSHI4
BORI4
ASGNI4
line 823
;823:	}
LABELV $385
line 826
;824:
;825:
;826:	ent->use = Use_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
ADDRGP4 Use_BinaryMover
ASGNP4
line 827
;827:	ent->reached = Reached_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
ADDRGP4 Reached_BinaryMover
ASGNP4
line 829
;828:
;829:	ent->moverState = MOVER_POS1;
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
CNSTI4 0
ASGNI4
line 830
;830:	ent->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 831
;831:	ent->s.eType = ET_MOVER;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 4
ASGNI4
line 832
;832:	VectorCopy (ent->pos1, ent->r.currentOrigin);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 616
ADDP4
INDIRB
ASGNB 12
line 833
;833:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 835
;834:
;835:	ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 836
;836:	VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 616
ADDP4
INDIRB
ASGNB 12
line 839
;837:
;838:	// calculate time to reach second position from speed
;839:	VectorSubtract( ent->pos2, ent->pos1, move );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 64
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 64
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 68
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
SUBF4
ASGNF4
line 840
;840:	distance = VectorLength( move );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 72
INDIRF4
ASGNF4
line 841
;841:	if ( ! ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
NEF4 $400
line 842
;842:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTF4 1120403456
ASGNF4
line 843
;843:	}
LABELV $400
line 844
;844:	VectorScale( move, ent->speed, ent->s.pos.trDelta );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
MULF4
ASGNF4
line 845
;845:	ent->s.pos.trDuration = distance * 1000 / ent->speed;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 24
INDIRF4
CNSTF4 1148846080
MULF4
ADDRLP4 88
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 846
;846:	if ( ent->s.pos.trDuration <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
GTI4 $404
line 847
;847:		ent->s.pos.trDuration = 1;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 848
;848:	}
LABELV $404
line 849
;849:}
LABELV $375
endproc InitMover 92 12
export Blocked_Door
proc Blocked_Door 8 32
line 868
;850:
;851:
;852:/*
;853:===============================================================================
;854:
;855:DOOR
;856:
;857:A use can be triggered either by a touch function, by being shot, or by being
;858:targeted by another entity.
;859:
;860:===============================================================================
;861:*/
;862:
;863:/*
;864:================
;865:Blocked_Door
;866:================
;867:*/
;868:void Blocked_Door( gentity_t *ent, gentity_t *other ) {
line 874
;869:	// remove anything other than a client
;870:	// JUHOX: don't remove monsters too
;871:#if !MONSTER_MODE
;872:	if ( !other->client ) {
;873:#else
;874:	if (!other->client && !other->monster) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $407
ADDRLP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $407
line 877
;875:#endif
;876:		// except CTF flags!!!!
;877:		if( other->s.eType == ET_ITEM && other->item->giType == IT_TEAM ) {
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $409
ADDRLP4 4
INDIRP4
CNSTI4 808
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 8
NEI4 $409
line 878
;878:			Team_DroppedFlagThink( other );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Team_DroppedFlagThink
CALLV
pop
line 879
;879:			return;
ADDRGP4 $406
JUMPV
LABELV $409
line 881
;880:		}
;881:		G_TempEntity( other->s.origin, EV_ITEM_POP );
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
CNSTI4 41
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 882
;882:		G_FreeEntity( other );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 883
;883:		return;
ADDRGP4 $406
JUMPV
LABELV $407
line 886
;884:	}
;885:
;886:	if ( ent->damage ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 0
EQI4 $411
line 887
;887:		G_Damage( other, ent, ent, NULL, NULL, ent->damage, 0, MOD_CRUSH );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 22
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 888
;888:	}
LABELV $411
line 889
;889:	if ( ent->spawnflags & 4 ) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $413
line 890
;890:		return;		// crushers don't reverse
ADDRGP4 $406
JUMPV
LABELV $413
line 894
;891:	}
;892:
;893:	// reverse direction
;894:	Use_BinaryMover( ent, ent, other );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 895
;895:}
LABELV $406
endproc Blocked_Door 8 32
proc Touch_DoorTriggerSpectator 40 12
line 902
;896:
;897:/*
;898:================
;899:Touch_DoorTriggerSpectator
;900:================
;901:*/
;902:static void Touch_DoorTriggerSpectator( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 930
;903:	// JUHOX: more comfortable spectator door trigger: easier to prevent, less irritating
;904:#if 0
;905:	int i, axis;
;906:	vec3_t origin, dir, angles;
;907:
;908:	axis = ent->count;
;909:	VectorClear(dir);
;910:	if (fabs(other->s.origin[axis] - ent->r.absmax[axis]) <
;911:		fabs(other->s.origin[axis] - ent->r.absmin[axis])) {
;912:		origin[axis] = ent->r.absmin[axis] - 10;
;913:		dir[axis] = -1;
;914:	}
;915:	else {
;916:		origin[axis] = ent->r.absmax[axis] + 10;
;917:		dir[axis] = 1;
;918:	}
;919:	for (i = 0; i < 3; i++) {
;920:		if (i == axis) continue;
;921:		origin[i] = (ent->r.absmin[i] + ent->r.absmax[i]) * 0.5;
;922:	}
;923:	vectoangles(dir, angles);
;924:	TeleportPlayer(other, origin, angles );
;925:#else
;926:	int axis;
;927:	float doorMin, doorMax;
;928:	vec3_t origin;
;929:
;930:	axis = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 764
ADDP4
INDIRI4
ASGNI4
line 932
;931:	// NOTE: the constants below relate to constants in Think_SpawnNewDoorTrigger()
;932:	doorMin = ent->r.absmin[axis] + 100;
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDP4
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 933
;933:	doorMax = ent->r.absmax[axis] - 100;
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDP4
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 935
;934:
;935:	VectorCopy(other->client->ps.origin, origin);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 936
;936:	if (origin[axis] < doorMin || origin[axis] > doorMax) return;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
LTF4 $418
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
LEF4 $416
LABELV $418
ADDRGP4 $415
JUMPV
LABELV $416
line 939
;937:
;938:	if (
;939:		fabs(origin[axis] - doorMax) <
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ARGF4
ADDRLP4 32
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
GEF4 $419
line 941
;940:		fabs(origin[axis] - doorMin)
;941:	) {
line 942
;942:		origin[axis] = doorMin - 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 16
INDIRF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 943
;943:	}
ADDRGP4 $420
JUMPV
LABELV $419
line 944
;944:	else {
line 945
;945:		origin[axis] = doorMax + 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 20
INDIRF4
CNSTF4 1092616192
ADDF4
ASGNF4
line 946
;946:	}
LABELV $420
line 948
;947:
;948:	TeleportPlayer(other, origin, tv(10000000.0, 0, 0));	// the modified version of TeleportPlayer() will recognoize this
CNSTF4 1259902592
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
ADDRLP4 36
ADDRGP4 tv
CALLP4
ASGNP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 TeleportPlayer
CALLV
pop
line 950
;949:#endif
;950:}
LABELV $415
endproc Touch_DoorTriggerSpectator 40 12
export Touch_DoorTrigger
proc Touch_DoorTrigger 8 12
line 957
;951:
;952:/*
;953:================
;954:Touch_DoorTrigger
;955:================
;956:*/
;957:void Touch_DoorTrigger( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 962
;958:	// JUHOX: determine spectators by 'pm_type'
;959:#if 0
;960:	if ( other->client && other->client->sess.sessionTeam == TEAM_SPECTATOR ) {
;961:#else
;962:	if (other->client && other->client->ps.pm_type == PM_SPECTATOR) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $422
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $422
line 965
;963:#endif
;964:		// if the door is not open and not opening
;965:		if ( ent->parent->moverState != MOVER_1TO2 &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 2
EQI4 $423
ADDRLP4 4
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 1
EQI4 $423
line 966
;966:			ent->parent->moverState != MOVER_POS2) {
line 967
;967:			Touch_DoorTriggerSpectator( ent, other, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Touch_DoorTriggerSpectator
CALLV
pop
line 968
;968:		}
line 969
;969:	}
ADDRGP4 $423
JUMPV
LABELV $422
line 970
;970:	else if ( ent->parent->moverState != MOVER_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 2
EQI4 $426
line 971
;971:		Use_BinaryMover( ent->parent, ent, other );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 972
;972:	}
LABELV $426
LABELV $423
line 973
;973:}
LABELV $421
endproc Touch_DoorTrigger 8 12
export Think_SpawnNewDoorTrigger
proc Think_SpawnNewDoorTrigger 52 12
line 984
;974:
;975:
;976:/*
;977:======================
;978:Think_SpawnNewDoorTrigger
;979:
;980:All of the parts of a door have been spawned, so create
;981:a trigger that encloses all of them
;982:======================
;983:*/
;984:void Think_SpawnNewDoorTrigger( gentity_t *ent ) {
line 990
;985:	gentity_t		*other;
;986:	vec3_t		mins, maxs;
;987:	int			i, best;
;988:
;989:	// set all of the slaves as shootable
;990:	for ( other = ent ; other ; other = other->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $432
JUMPV
LABELV $429
line 991
;991:		other->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 1
ASGNI4
line 992
;992:	}
LABELV $430
line 990
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $432
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $429
line 995
;993:
;994:	// find the bounds of everything on the team
;995:	VectorCopy (ent->r.absmin, mins);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRB
ASGNB 12
line 996
;996:	VectorCopy (ent->r.absmax, maxs);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRB
ASGNB 12
line 998
;997:
;998:	for (other = ent->teamchain ; other ; other=other->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $436
JUMPV
LABELV $433
line 999
;999:		AddPointToBounds (other->r.absmin, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 1000
;1000:		AddPointToBounds (other->r.absmax, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 1001
;1001:	}
LABELV $434
line 998
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
INDIRP4
ASGNP4
LABELV $436
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $433
line 1004
;1002:
;1003:	// find the thinnest axis, which will be the one we expand
;1004:	best = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1005
;1005:	for ( i = 1 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 1
ASGNI4
LABELV $437
line 1006
;1006:		if ( maxs[i] - mins[i] < maxs[best] - mins[best] ) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
GEF4 $441
line 1007
;1007:			best = i;
ADDRLP4 32
ADDRLP4 4
INDIRI4
ASGNI4
line 1008
;1008:		}
LABELV $441
line 1009
;1009:	}
LABELV $438
line 1005
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $437
line 1010
;1010:	maxs[best] += 120;
ADDRLP4 36
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1123024896
ADDF4
ASGNF4
line 1011
;1011:	mins[best] -= 120;
ADDRLP4 40
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1123024896
SUBF4
ASGNF4
line 1014
;1012:
;1013:	// create a trigger with this size
;1014:	other = G_Spawn ();
ADDRLP4 44
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 1015
;1015:	other->classname = "door_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRGP4 $443
ASGNP4
line 1016
;1016:	VectorCopy (mins, other->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 1017
;1017:	VectorCopy (maxs, other->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
ADDRLP4 20
INDIRB
ASGNB 12
line 1018
;1018:	other->parent = ent;
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1019
;1019:	other->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 1020
;1020:	other->touch = Touch_DoorTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Touch_DoorTrigger
ASGNP4
line 1022
;1021:	// remember the thinnest axis
;1022:	other->count = best;
ADDRLP4 0
INDIRP4
CNSTI4 764
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1023
;1023:	trap_LinkEntity (other);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1025
;1024:
;1025:	MatchTeam( ent, ent->moverState, level.time );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 1026
;1026:}
LABELV $428
endproc Think_SpawnNewDoorTrigger 52 12
export Think_MatchTeam
proc Think_MatchTeam 4 12
line 1028
;1027:
;1028:void Think_MatchTeam( gentity_t *ent ) {
line 1029
;1029:	MatchTeam( ent, ent->moverState, level.time );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 1030
;1030:}
LABELV $445
endproc Think_MatchTeam 4 12
export SP_func_door
proc SP_func_door 112 12
line 1049
;1031:
;1032:
;1033:/*QUAKED func_door (0 .5 .8) ? START_OPEN x CRUSHER
;1034:TOGGLE		wait in both the start and end states for a trigger event.
;1035:START_OPEN	the door to moves to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when triggered (not useful for touch or takedamage doors).
;1036:NOMONSTER	monsters will not trigger this door
;1037:
;1038:"model2"	.md3 model to also draw
;1039:"angle"		determines the opening direction
;1040:"targetname" if set, no touch field will be spawned and a remote button or trigger field activates the door.
;1041:"speed"		movement speed (100 default)
;1042:"wait"		wait before returning (3 default, -1 = never return)
;1043:"lip"		lip remaining at end of move (8 default)
;1044:"dmg"		damage to inflict when blocked (2 default)
;1045:"color"		constantLight color
;1046:"light"		constantLight radius
;1047:"health"	if set, the door must be shot open
;1048:*/
;1049:void SP_func_door (gentity_t *ent) {
line 1055
;1050:	vec3_t	abs_movedir;
;1051:	float	distance;
;1052:	vec3_t	size;
;1053:	float	lip;
;1054:
;1055:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex("sound/movers/doors/dr1_strt.wav");
ADDRGP4 $448
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1056
;1056:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex("sound/movers/doors/dr1_end.wav");
ADDRGP4 $449
ARGP4
ADDRLP4 40
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 596
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 1058
;1057:
;1058:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1061
;1059:
;1060:	// default speed of 400
;1061:	if (!ent->speed)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
NEF4 $450
line 1062
;1062:		ent->speed = 400;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTF4 1137180672
ASGNF4
LABELV $450
line 1065
;1063:
;1064:	// default wait of 2 seconds
;1065:	if (!ent->wait)
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
CNSTF4 0
NEF4 $452
line 1066
;1066:		ent->wait = 2;
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
CNSTF4 1073741824
ASGNF4
LABELV $452
line 1067
;1067:	ent->wait *= 1000;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1148846080
MULF4
ASGNF4
line 1070
;1068:
;1069:	// default lip of 8 units
;1070:	G_SpawnFloat( "lip", "8", &lip );
ADDRGP4 $454
ARGP4
ADDRGP4 $455
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1073
;1071:
;1072:	// default damage of 2 points
;1073:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $456
ARGP4
ADDRGP4 $457
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1076
;1074:
;1075:	// first position at start
;1076:	VectorCopy( ent->s.origin, ent->pos1 );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 52
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1079
;1077:
;1078:	// calculate second position
;1079:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1080
;1080:	G_SetMovedir (ent->s.angles, ent->movedir);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 680
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 1081
;1081:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ARGF4
ADDRLP4 64
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 64
INDIRF4
ASGNF4
line 1082
;1082:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ARGF4
ADDRLP4 68
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRF4
ASGNF4
line 1083
;1083:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ARGF4
ADDRLP4 72
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 72
INDIRF4
ASGNF4
line 1084
;1084:	VectorSubtract( ent->r.maxs, ent->r.mins, size );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 76
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 76
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 80
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1085
;1085:	distance = DotProduct( abs_movedir, size ) - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 1086
;1086:	VectorMA( ent->pos1, distance, ent->movedir, ent->pos2 );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1089
;1087:
;1088:	// if "start_open", reverse position 1 and 2
;1089:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $466
line 1092
;1090:		vec3_t	temp;
;1091:
;1092:		VectorCopy( ent->pos2, temp );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRB
ASGNB 12
line 1093
;1093:		VectorCopy( ent->s.origin, ent->pos2 );
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1094
;1094:		VectorCopy( temp, ent->pos1 );
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 96
INDIRB
ASGNB 12
line 1095
;1095:	}
LABELV $466
line 1097
;1096:
;1097:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1099
;1098:
;1099:	ent->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1101
;1100:
;1101:	if ( ! (ent->flags & FL_TEAMSLAVE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $469
line 1104
;1102:		int health;
;1103:
;1104:		G_SpawnInt( "health", "0", &health );
ADDRGP4 $471
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 96
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1105
;1105:		if ( health ) {
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $473
line 1106
;1106:			ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 1
ASGNI4
line 1107
;1107:		}
LABELV $473
line 1108
;1108:		if ( ent->targetname || health ) {
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $477
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $475
LABELV $477
line 1110
;1109:			// non touch/shoot doors
;1110:			ent->think = Think_MatchTeam;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Think_MatchTeam
ASGNP4
line 1111
;1111:		} else {
ADDRGP4 $476
JUMPV
LABELV $475
line 1112
;1112:			ent->think = Think_SpawnNewDoorTrigger;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Think_SpawnNewDoorTrigger
ASGNP4
line 1113
;1113:		}
LABELV $476
line 1114
;1114:	}
LABELV $469
line 1118
;1115:
;1116:
;1117:#if ESCAPE_MODE	// JUHOX: set entity class
;1118:	ent->entClass = GEC_func_door;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 11
ASGNI4
line 1121
;1119:#endif
;1120:
;1121:}
LABELV $447
endproc SP_func_door 112 12
export Touch_Plat
proc Touch_Plat 4 0
line 1138
;1122:
;1123:/*
;1124:===============================================================================
;1125:
;1126:PLAT
;1127:
;1128:===============================================================================
;1129:*/
;1130:
;1131:/*
;1132:==============
;1133:Touch_Plat
;1134:
;1135:Don't allow decent if a living player is on it
;1136:===============
;1137:*/
;1138:void Touch_Plat( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1139
;1139:	if ( !other->client || other->client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $481
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $479
LABELV $481
line 1140
;1140:		return;
ADDRGP4 $478
JUMPV
LABELV $479
line 1144
;1141:	}
;1142:
;1143:	// delay return-to-pos1 by one second
;1144:	if ( ent->moverState == MOVER_POS2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 1
NEI4 $482
line 1145
;1145:		ent->nextthink = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1146
;1146:	}
LABELV $482
line 1147
;1147:}
LABELV $478
endproc Touch_Plat 4 0
export Touch_PlatCenterTrigger
proc Touch_PlatCenterTrigger 4 12
line 1156
;1148:
;1149:/*
;1150:==============
;1151:Touch_PlatCenterTrigger
;1152:
;1153:If the plat is at the bottom position, start it going up
;1154:===============
;1155:*/
;1156:void Touch_PlatCenterTrigger(gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1157
;1157:	if ( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $486
line 1158
;1158:		return;
ADDRGP4 $485
JUMPV
LABELV $486
line 1161
;1159:	}
;1160:
;1161:	if ( ent->parent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 0
NEI4 $488
line 1162
;1162:		Use_BinaryMover( ent->parent, ent, other );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1163
;1163:	}
LABELV $488
line 1164
;1164:}
LABELV $485
endproc Touch_PlatCenterTrigger 4 12
export SpawnPlatTrigger
proc SpawnPlatTrigger 60 4
line 1176
;1165:
;1166:
;1167:/*
;1168:================
;1169:SpawnPlatTrigger
;1170:
;1171:Spawn a trigger in the middle of the plat's low position
;1172:Elevator cars require that the trigger extend through the entire low position,
;1173:not just sit on top of it.
;1174:================
;1175:*/
;1176:void SpawnPlatTrigger( gentity_t *ent ) {
line 1182
;1177:	gentity_t	*trigger;
;1178:	vec3_t	tmin, tmax;
;1179:
;1180:	// the middle trigger will be a thin trigger just
;1181:	// above the starting position
;1182:	trigger = G_Spawn();
ADDRLP4 28
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 1183
;1183:	if (!trigger) return;	// JUHOX BUGFIX
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $491
ADDRGP4 $490
JUMPV
LABELV $491
line 1184
;1184:	trigger->classname = "plat_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRGP4 $493
ASGNP4
line 1185
;1185:	trigger->touch = Touch_PlatCenterTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Touch_PlatCenterTrigger
ASGNP4
line 1186
;1186:	trigger->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 1073741824
ASGNI4
line 1187
;1187:	trigger->parent = ent;
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1189
;1188:	
;1189:	tmin[0] = ent->pos1[0] + ent->r.mins[0] + 33;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1190
;1190:	tmin[1] = ent->pos1[1] + ent->r.mins[1] + 33;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 36
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1191
;1191:	tmin[2] = ent->pos1[2] + ent->r.mins[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 40
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1193
;1192:
;1193:	tmax[0] = ent->pos1[0] + ent->r.maxs[0] - 33;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 44
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1194
;1194:	tmax[1] = ent->pos1[1] + ent->r.maxs[1] - 33;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+4
ADDRLP4 48
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1195
;1195:	tmax[2] = ent->pos1[2] + ent->r.maxs[2] + 8;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+8
ADDRLP4 52
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 1197
;1196:
;1197:	if ( tmax[0] <= tmin[0] ) {
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
GTF4 $498
line 1198
;1198:		tmin[0] = ent->pos1[0] + (ent->r.mins[0] + ent->r.maxs[0]) *0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1199
;1199:		tmax[0] = tmin[0] + 1;
ADDRLP4 16
ADDRLP4 4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1200
;1200:	}
LABELV $498
line 1201
;1201:	if ( tmax[1] <= tmin[1] ) {
ADDRLP4 16+4
INDIRF4
ADDRLP4 4+4
INDIRF4
GTF4 $500
line 1202
;1202:		tmin[1] = ent->pos1[1] + (ent->r.mins[1] + ent->r.maxs[1]) *0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 56
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1203
;1203:		tmax[1] = tmin[1] + 1;
ADDRLP4 16+4
ADDRLP4 4+4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1204
;1204:	}
LABELV $500
line 1206
;1205:	
;1206:	VectorCopy (tmin, trigger->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 1207
;1207:	VectorCopy (tmax, trigger->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
ADDRLP4 16
INDIRB
ASGNB 12
line 1209
;1208:
;1209:	trap_LinkEntity (trigger);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1210
;1210:}
LABELV $490
endproc SpawnPlatTrigger 60 4
export SP_func_plat
proc SP_func_plat 40 12
line 1224
;1211:
;1212:
;1213:/*QUAKED func_plat (0 .5 .8) ?
;1214:Plats are always drawn in the extended position so they will light correctly.
;1215:
;1216:"lip"		default 8, protrusion above rest position
;1217:"height"	total height of movement, defaults to model height
;1218:"speed"		overrides default 200.
;1219:"dmg"		overrides default 2
;1220:"model2"	.md3 model to also draw
;1221:"color"		constantLight color
;1222:"light"		constantLight radius
;1223:*/
;1224:void SP_func_plat (gentity_t *ent) {
line 1232
;1225:	float		lip, height;
;1226:
;1227:	// JUHOX: new keys 'sound1' & 'sound2' for func_plat
;1228:#if 0
;1229:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex("sound/movers/plats/pt1_strt.wav");
;1230:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex("sound/movers/plats/pt1_end.wav");
;1231:#else
;1232:	{
line 1235
;1233:		char* sound;
;1234:
;1235:		G_SpawnString("sound1", "sound/movers/plats/pt1_strt.wav", &sound);
ADDRGP4 $508
ARGP4
ADDRGP4 $509
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1236
;1236:		ent->sound1to2 = ent->sound2to1 = G_SoundIndex(sound);
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1238
;1237:
;1238:		G_SpawnString("sound2", "sound/movers/plats/pt1_end.wav", &sound);
ADDRGP4 $510
ARGP4
ADDRGP4 $511
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1239
;1239:		ent->soundPos1 = ent->soundPos2 = G_SoundIndex(sound);
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 596
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 24
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1240
;1240:	}
line 1243
;1241:#endif
;1242:
;1243:	VectorClear (ent->s.angles);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1245
;1244:
;1245:	G_SpawnFloat( "speed", "200", &ent->speed );
ADDRGP4 $512
ARGP4
ADDRGP4 $513
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1246
;1246:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $456
ARGP4
ADDRGP4 $457
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1247
;1247:	G_SpawnFloat( "wait", "1", &ent->wait );
ADDRGP4 $514
ARGP4
ADDRGP4 $515
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1248
;1248:	G_SpawnFloat( "lip", "8", &lip );
ADDRGP4 $454
ARGP4
ADDRGP4 $455
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1250
;1249:
;1250:	ent->wait = 1000;
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
CNSTF4 1148846080
ASGNF4
line 1253
;1251:
;1252:	// create second position
;1253:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1255
;1254:
;1255:	if ( !G_SpawnFloat( "height", "0", &height ) ) {
ADDRGP4 $518
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 20
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $516
line 1256
;1256:		height = (ent->r.maxs[2] - ent->r.mins[2]) - lip;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 1257
;1257:	}
LABELV $516
line 1260
;1258:
;1259:	// pos1 is the rest (bottom) position, pos2 is the top
;1260:	VectorCopy( ent->s.origin, ent->pos2 );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1261
;1261:	VectorCopy( ent->pos2, ent->pos1 );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 628
ADDP4
INDIRB
ASGNB 12
line 1262
;1262:	ent->pos1[2] -= height;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
line 1264
;1263:
;1264:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1268
;1265:
;1266:	// touch function keeps the plat from returning while
;1267:	// a live player is standing on it
;1268:	ent->touch = Touch_Plat;
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Touch_Plat
ASGNP4
line 1270
;1269:
;1270:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 704
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1272
;1271:
;1272:	ent->parent = ent;	// so it can be treated as a door
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 604
ADDP4
ADDRLP4 36
INDIRP4
ASGNP4
line 1275
;1273:
;1274:	// spawn the trigger if one hasn't been custom made
;1275:	if ( !ent->targetname ) {
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $519
line 1276
;1276:		SpawnPlatTrigger(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 SpawnPlatTrigger
CALLV
pop
line 1277
;1277:	}
LABELV $519
line 1280
;1278:
;1279:#if ESCAPE_MODE	// JUHOX: set entity class
;1280:	ent->entClass = GEC_func_plat;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 5
ASGNI4
line 1282
;1281:#endif
;1282:}
LABELV $507
endproc SP_func_plat 40 12
export Touch_Button
proc Touch_Button 4 12
line 1299
;1283:
;1284:
;1285:/*
;1286:===============================================================================
;1287:
;1288:BUTTON
;1289:
;1290:===============================================================================
;1291:*/
;1292:
;1293:/*
;1294:==============
;1295:Touch_Button
;1296:
;1297:===============
;1298:*/
;1299:void Touch_Button(gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1300
;1300:	if ( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $522
line 1301
;1301:		return;
ADDRGP4 $521
JUMPV
LABELV $522
line 1304
;1302:	}
;1303:
;1304:	if ( ent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 0
NEI4 $524
line 1305
;1305:		Use_BinaryMover( ent, other, other );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1306
;1306:	}
LABELV $524
line 1307
;1307:}
LABELV $521
endproc Touch_Button 4 12
export SP_func_button
proc SP_func_button 84 12
line 1323
;1308:
;1309:
;1310:/*QUAKED func_button (0 .5 .8) ?
;1311:When a button is touched, it moves some distance in the direction of it's angle, triggers all of it's targets, waits some time, then returns to it's original position where it can be triggered again.
;1312:
;1313:"model2"	.md3 model to also draw
;1314:"angle"		determines the opening direction
;1315:"target"	all entities with a matching targetname will be used
;1316:"speed"		override the default 40 speed
;1317:"wait"		override the default 1 second wait (-1 = never return)
;1318:"lip"		override the default 4 pixel lip remaining at end of move
;1319:"health"	if set, the button must be killed instead of touched
;1320:"color"		constantLight color
;1321:"light"		constantLight radius
;1322:*/
;1323:void SP_func_button( gentity_t *ent ) {
line 1329
;1324:	vec3_t		abs_movedir;
;1325:	float		distance;
;1326:	vec3_t		size;
;1327:	float		lip;
;1328:
;1329:	ent->sound1to2 = G_SoundIndex("sound/movers/switches/butn2.wav");
ADDRGP4 $527
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1331
;1330:	
;1331:	if ( !ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
NEF4 $528
line 1332
;1332:		ent->speed = 40;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTF4 1109393408
ASGNF4
line 1333
;1333:	}
LABELV $528
line 1335
;1334:
;1335:	if ( !ent->wait ) {
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
CNSTF4 0
NEF4 $530
line 1336
;1336:		ent->wait = 1;
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
CNSTF4 1065353216
ASGNF4
line 1337
;1337:	}
LABELV $530
line 1338
;1338:	ent->wait *= 1000;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1148846080
MULF4
ASGNF4
line 1341
;1339:
;1340:	// first position
;1341:	VectorCopy( ent->s.origin, ent->pos1 );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1344
;1342:
;1343:	// calculate second position
;1344:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1346
;1345:
;1346:	G_SpawnFloat( "lip", "4", &lip );
ADDRGP4 $454
ARGP4
ADDRGP4 $532
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1348
;1347:
;1348:	G_SetMovedir( ent->s.angles, ent->movedir );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 116
ADDP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 680
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 1349
;1349:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 52
INDIRF4
ASGNF4
line 1350
;1350:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 56
INDIRF4
ASGNF4
line 1351
;1351:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ARGF4
ADDRLP4 60
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 60
INDIRF4
ASGNF4
line 1352
;1352:	VectorSubtract( ent->r.maxs, ent->r.mins, size );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 64
INDIRP4
CNSTI4 448
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 436
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 64
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 440
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 68
INDIRP4
CNSTI4 456
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1353
;1353:	distance = abs_movedir[0] * size[0] + abs_movedir[1] * size[1] + abs_movedir[2] * size[2] - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
line 1354
;1354:	VectorMA (ent->pos1, distance, ent->movedir, ent->pos2);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 688
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1356
;1355:
;1356:	if (ent->health) {
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
EQI4 $541
line 1358
;1357:		// shootable button
;1358:		ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 1
ASGNI4
line 1359
;1359:	} else {
ADDRGP4 $542
JUMPV
LABELV $541
line 1361
;1360:		// touchable button
;1361:		ent->touch = Touch_Button;
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ADDRGP4 Touch_Button
ASGNP4
line 1362
;1362:	}
LABELV $542
line 1364
;1363:
;1364:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1367
;1365:
;1366:#if ESCAPE_MODE	// JUHOX: set entity class
;1367:	ent->entClass = GEC_func_button;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 10
ASGNI4
line 1369
;1368:#endif
;1369:}
LABELV $526
endproc SP_func_button 84 12
export Think_BeginMoving
proc Think_BeginMoving 0 0
line 1393
;1370:
;1371:
;1372:
;1373:/*
;1374:===============================================================================
;1375:
;1376:TRAIN
;1377:
;1378:===============================================================================
;1379:*/
;1380:
;1381:
;1382:#define TRAIN_START_ON		1
;1383:#define TRAIN_TOGGLE		2
;1384:#define TRAIN_BLOCK_STOPS	4
;1385:
;1386:/*
;1387:===============
;1388:Think_BeginMoving
;1389:
;1390:The wait time at a corner has completed, so start moving again
;1391:===============
;1392:*/
;1393:void Think_BeginMoving( gentity_t *ent ) {
line 1394
;1394:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1395
;1395:	ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 1396
;1396:}
LABELV $543
endproc Think_BeginMoving 0 0
export Reached_Train
proc Reached_Train 40 12
line 1403
;1397:
;1398:/*
;1399:===============
;1400:Reached_Train
;1401:===============
;1402:*/
;1403:void Reached_Train( gentity_t *ent ) {
line 1410
;1404:	gentity_t		*next;
;1405:	float			speed;
;1406:	vec3_t			move;
;1407:	float			length;
;1408:
;1409:	// copy the apropriate values
;1410:	next = ent->nextTrain;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
ASGNP4
line 1411
;1411:	if ( !next || !next->nextTrain ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $548
ADDRLP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $546
LABELV $548
line 1412
;1412:		return;		// just stop
ADDRGP4 $545
JUMPV
LABELV $546
line 1416
;1413:	}
;1414:
;1415:	// fire all other targets
;1416:	G_UseTargets( next, NULL );
ADDRLP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 1419
;1417:
;1418:	// set the new trajectory
;1419:	ent->nextTrain = next->nextTrain;
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
ASGNP4
line 1420
;1420:	VectorCopy( next->s.origin, ent->pos1 );
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1421
;1421:	VectorCopy( next->nextTrain->s.origin, ent->pos2 );
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1424
;1422:
;1423:	// if the path_corner has a speed, use that
;1424:	if ( next->speed ) {
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
EQF4 $549
line 1425
;1425:		speed = next->speed;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 1426
;1426:	} else {
ADDRGP4 $550
JUMPV
LABELV $549
line 1428
;1427:		// otherwise use the train's speed
;1428:		speed = ent->speed;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 1429
;1429:	}
LABELV $550
line 1430
;1430:	if ( speed < 1 ) {
ADDRLP4 16
INDIRF4
CNSTF4 1065353216
GEF4 $551
line 1431
;1431:		speed = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 1432
;1432:	}
LABELV $551
line 1435
;1433:
;1434:	// calculate duration
;1435:	VectorSubtract( ent->pos2, ent->pos1, move );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
CNSTI4 628
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28
INDIRP4
CNSTI4 632
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 32
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 624
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1436
;1436:	length = VectorLength( move );
ADDRLP4 4
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 36
INDIRF4
ASGNF4
line 1438
;1437:
;1438:	ent->s.pos.trDuration = length * 1000 / speed;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRF4
CNSTF4 1148846080
MULF4
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1441
;1439:
;1440:	// looping sound
;1441:	ent->s.loopSound = next->soundLoop;
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
ASGNI4
line 1444
;1442:
;1443:	// start it going
;1444:	SetMoverState( ent, MOVER_1TO2, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 1447
;1445:
;1446:	// if there is a "wait" value on the target, don't start moving yet
;1447:	if ( next->wait ) {
ADDRLP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
CNSTF4 0
EQF4 $556
line 1448
;1448:		ent->nextthink = level.time + next->wait * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 800
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1449
;1449:		ent->think = Think_BeginMoving;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Think_BeginMoving
ASGNP4
line 1450
;1450:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 1451
;1451:	}
LABELV $556
line 1452
;1452:}
LABELV $545
endproc Reached_Train 40 12
export Think_SetupTrainTargets
proc Think_SetupTrainTargets 28 12
line 1462
;1453:
;1454:
;1455:/*
;1456:===============
;1457:Think_SetupTrainTargets
;1458:
;1459:Link all the corners together
;1460:===============
;1461:*/
;1462:void Think_SetupTrainTargets( gentity_t *ent ) {
line 1465
;1463:	gentity_t		*path, *next, *start;
;1464:
;1465:	ent->nextTrain = G_Find( NULL, FOFS(targetname), ent->target );
CNSTP4 0
ARGP4
CNSTI4 656
ARGI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 608
ADDP4
ADDRLP4 16
INDIRP4
ASGNP4
line 1466
;1466:	if ( !ent->nextTrain ) {
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $560
line 1467
;1467:		G_Printf( "func_train at %s with an unfound target\n",
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $562
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1469
;1468:			vtos(ent->r.absmin) );
;1469:		return;
ADDRGP4 $559
JUMPV
LABELV $560
line 1472
;1470:	}
;1471:
;1472:	start = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1473
;1473:	for ( path = ent->nextTrain ; path != start ; path = next ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $566
JUMPV
LABELV $563
line 1474
;1474:		if ( !start ) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $567
line 1475
;1475:			start = path;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
line 1476
;1476:		}
LABELV $567
line 1478
;1477:
;1478:		if ( !path->target ) {
ADDRLP4 4
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $569
line 1479
;1479:			G_Printf( "Train corner at %s without a target\n",
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $571
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1481
;1480:				vtos(path->s.origin) );
;1481:			return;
ADDRGP4 $559
JUMPV
LABELV $569
line 1487
;1482:		}
;1483:
;1484:		// find a path_corner among the targets
;1485:		// there may also be other targets that get fired when the corner
;1486:		// is reached
;1487:		next = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
LABELV $572
line 1488
;1488:		do {
line 1489
;1489:			next = G_Find( next, FOFS(targetname), path->target );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 656
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1490
;1490:			if ( !next ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $575
line 1491
;1491:				G_Printf( "Train corner at %s without a target path_corner\n",
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $577
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1493
;1492:					vtos(path->s.origin) );
;1493:				return;
ADDRGP4 $559
JUMPV
LABELV $575
line 1495
;1494:			}
;1495:		} while ( strcmp( next->classname, "path_corner" ) );
LABELV $573
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRP4
ARGP4
ADDRGP4 $578
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $572
line 1497
;1496:
;1497:		path->nextTrain = next;
ADDRLP4 4
INDIRP4
CNSTI4 608
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1498
;1498:	}
LABELV $564
line 1473
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
LABELV $566
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
NEU4 $563
line 1501
;1499:
;1500:	// start the train moving from the first corner
;1501:	Reached_Train( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Reached_Train
CALLV
pop
line 1502
;1502:}
LABELV $559
endproc Think_SetupTrainTargets 28 12
export SP_path_corner
proc SP_path_corner 4 8
line 1512
;1503:
;1504:
;1505:
;1506:/*QUAKED path_corner (.5 .3 0) (-8 -8 -8) (8 8 8)
;1507:Train path corners.
;1508:Target: next path corner and other targets to fire
;1509:"speed" speed to move to the next corner
;1510:"wait" seconds to wait before behining move to next corner
;1511:*/
;1512:void SP_path_corner( gentity_t *self ) {
line 1513
;1513:	if ( !self->targetname ) {
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $580
line 1514
;1514:		G_Printf ("path_corner with no targetname at %s\n", vtos(self->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $582
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1515
;1515:		G_FreeEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1516
;1516:		return;
ADDRGP4 $579
JUMPV
LABELV $580
line 1520
;1517:	}
;1518:	// path corners don't need to be linked in
;1519:#if ESCAPE_MODE	// JUHOX: set entity class
;1520:	self->entClass = GEC_path_corner;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 33
ASGNI4
line 1522
;1521:#endif
;1522:}
LABELV $579
endproc SP_path_corner 4 8
export SP_func_train
proc SP_func_train 12 8
line 1538
;1523:
;1524:
;1525:
;1526:/*QUAKED func_train (0 .5 .8) ? START_ON TOGGLE BLOCK_STOPS
;1527:A train is a mover that moves between path_corner target points.
;1528:Trains MUST HAVE AN ORIGIN BRUSH.
;1529:The train spawns at the first target it is pointing at.
;1530:"model2"	.md3 model to also draw
;1531:"speed"		default 100
;1532:"dmg"		default	2
;1533:"noise"		looping sound to play when the train is in motion
;1534:"target"	next path corner
;1535:"color"		constantLight color
;1536:"light"		constantLight radius
;1537:*/
;1538:void SP_func_train (gentity_t *self) {
line 1539
;1539:	VectorClear (self->s.angles);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1541
;1540:
;1541:	if (self->spawnflags & TRAIN_BLOCK_STOPS) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $584
line 1542
;1542:		self->damage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 0
ASGNI4
line 1543
;1543:	} else {
ADDRGP4 $585
JUMPV
LABELV $584
line 1544
;1544:		if (!self->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 0
NEI4 $586
line 1545
;1545:			self->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 2
ASGNI4
line 1546
;1546:		}
LABELV $586
line 1547
;1547:	}
LABELV $585
line 1549
;1548:
;1549:	if ( !self->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
NEF4 $588
line 1550
;1550:		self->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTF4 1120403456
ASGNF4
line 1551
;1551:	}
LABELV $588
line 1553
;1552:
;1553:	if ( !self->target ) {
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $590
line 1554
;1554:		G_Printf ("func_train without a target at %s\n", vtos(self->r.absmin));
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $592
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1555
;1555:		G_FreeEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1556
;1556:		return;
ADDRGP4 $583
JUMPV
LABELV $590
line 1559
;1557:	}
;1558:
;1559:	trap_SetBrushModel( self, self->model );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1560
;1560:	InitMover( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1562
;1561:
;1562:	self->reached = Reached_Train;
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
ADDRGP4 Reached_Train
ASGNP4
line 1566
;1563:
;1564:	// start trains on the second frame, to make sure their targets have had
;1565:	// a chance to spawn
;1566:	self->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1567
;1567:	self->think = Think_SetupTrainTargets;
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
ADDRGP4 Think_SetupTrainTargets
ASGNP4
line 1570
;1568:
;1569:#if ESCAPE_MODE	// JUHOX: set entity class
;1570:	self->entClass = GEC_func_train;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 12
ASGNI4
line 1572
;1571:#endif
;1572:}
LABELV $583
endproc SP_func_train 12 8
export SP_func_static
proc SP_func_static 12 8
line 1589
;1573:
;1574:/*
;1575:===============================================================================
;1576:
;1577:STATIC
;1578:
;1579:===============================================================================
;1580:*/
;1581:
;1582:
;1583:/*QUAKED func_static (0 .5 .8) ?
;1584:A bmodel that just sits there, doing nothing.  Can be used for conditional walls and models.
;1585:"model2"	.md3 model to also draw
;1586:"color"		constantLight color
;1587:"light"		constantLight radius
;1588:*/
;1589:void SP_func_static( gentity_t *ent ) {
line 1590
;1590:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1591
;1591:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1592
;1592:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1593
;1593:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1596
;1594:
;1595:#if ESCAPE_MODE	// JUHOX: set entity class
;1596:	ent->entClass = GEC_func_static;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 6
ASGNI4
line 1598
;1597:#endif
;1598:}
LABELV $594
endproc SP_func_static 12 8
export SP_func_rotating
proc SP_func_rotating 16 8
line 1621
;1599:
;1600:
;1601:/*
;1602:===============================================================================
;1603:
;1604:ROTATING
;1605:
;1606:===============================================================================
;1607:*/
;1608:
;1609:
;1610:/*QUAKED func_rotating (0 .5 .8) ? START_ON - X_AXIS Y_AXIS
;1611:You need to have an origin brush as part of this entity.  The center of that brush will be
;1612:the point around which it is rotated. It will rotate around the Z axis by default.  You can
;1613:check either the X_AXIS or Y_AXIS box to change that.
;1614:
;1615:"model2"	.md3 model to also draw
;1616:"speed"		determines how fast it moves; default value is 100.
;1617:"dmg"		damage to inflict when blocked (2 default)
;1618:"color"		constantLight color
;1619:"light"		constantLight radius
;1620:*/
;1621:void SP_func_rotating (gentity_t *ent) {
line 1622
;1622:	if ( !ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 0
NEF4 $596
line 1623
;1623:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTF4 1120403456
ASGNF4
line 1624
;1624:	}
LABELV $596
line 1627
;1625:
;1626:	// set the axis of rotation
;1627:	ent->s.apos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 1628
;1628:	if ( ent->spawnflags & 4 ) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $598
line 1629
;1629:		ent->s.apos.trDelta[2] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 1630
;1630:	} else if ( ent->spawnflags & 8 ) {
ADDRGP4 $599
JUMPV
LABELV $598
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $600
line 1631
;1631:		ent->s.apos.trDelta[0] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 1632
;1632:	} else {
ADDRGP4 $601
JUMPV
LABELV $600
line 1633
;1633:		ent->s.apos.trDelta[1] = ent->speed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 1634
;1634:	}
LABELV $601
LABELV $599
line 1636
;1635:
;1636:	if (!ent->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 0
NEI4 $602
line 1637
;1637:		ent->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 2
ASGNI4
line 1638
;1638:	}
LABELV $602
line 1640
;1639:
;1640:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1641
;1641:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1643
;1642:
;1643:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1644
;1644:	VectorCopy( ent->s.pos.trBase, ent->r.currentOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1645
;1645:	VectorCopy( ent->s.apos.trBase, ent->r.currentAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 1647
;1646:
;1647:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1650
;1648:
;1649:#if ESCAPE_MODE	// JUHOX: set entity class
;1650:	ent->entClass = GEC_func_rotating;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 7
ASGNI4
line 1652
;1651:#endif
;1652:}
LABELV $595
endproc SP_func_rotating 16 8
export SP_func_bobbing
proc SP_func_bobbing 28 12
line 1674
;1653:
;1654:
;1655:/*
;1656:===============================================================================
;1657:
;1658:BOBBING
;1659:
;1660:===============================================================================
;1661:*/
;1662:
;1663:
;1664:/*QUAKED func_bobbing (0 .5 .8) ? X_AXIS Y_AXIS
;1665:Normally bobs on the Z axis
;1666:"model2"	.md3 model to also draw
;1667:"height"	amplitude of bob (32 default)
;1668:"speed"		seconds to complete a bob cycle (4 default)
;1669:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;1670:"dmg"		damage to inflict when blocked (2 default)
;1671:"color"		constantLight color
;1672:"light"		constantLight radius
;1673:*/
;1674:void SP_func_bobbing (gentity_t *ent) {
line 1678
;1675:	float		height;
;1676:	float		phase;
;1677:
;1678:	G_SpawnFloat( "speed", "4", &ent->speed );
ADDRGP4 $512
ARGP4
ADDRGP4 $532
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1679
;1679:	G_SpawnFloat( "height", "32", &height );
ADDRGP4 $518
ARGP4
ADDRGP4 $605
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1680
;1680:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $456
ARGP4
ADDRGP4 $457
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1681
;1681:	G_SpawnFloat( "phase", "0", &phase );
ADDRGP4 $606
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1683
;1682:
;1683:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1684
;1684:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1686
;1685:
;1686:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1687
;1687:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1689
;1688:
;1689:	ent->s.pos.trDuration = ent->speed * 1000;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
CVFI4 4
ASGNI4
line 1690
;1690:	ent->s.pos.trTime = ent->s.pos.trDuration * phase;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1691
;1691:	ent->s.pos.trType = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 4
ASGNI4
line 1694
;1692:
;1693:	// set the axis of bobbing
;1694:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $607
line 1695
;1695:		ent->s.pos.trDelta[0] = height;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1696
;1696:	} else if ( ent->spawnflags & 2 ) {
ADDRGP4 $608
JUMPV
LABELV $607
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $609
line 1697
;1697:		ent->s.pos.trDelta[1] = height;
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1698
;1698:	} else {
ADDRGP4 $610
JUMPV
LABELV $609
line 1699
;1699:		ent->s.pos.trDelta[2] = height;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1700
;1700:	}
LABELV $610
LABELV $608
line 1703
;1701:
;1702:#if ESCAPE_MODE	// JUHOX: set entity class
;1703:	ent->entClass = GEC_func_bobbing;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 8
ASGNI4
line 1705
;1704:#endif
;1705:}
LABELV $604
endproc SP_func_bobbing 28 12
export SP_func_pendulum
proc SP_func_pendulum 44 12
line 1727
;1706:
;1707:/*
;1708:===============================================================================
;1709:
;1710:PENDULUM
;1711:
;1712:===============================================================================
;1713:*/
;1714:
;1715:
;1716:/*QUAKED func_pendulum (0 .5 .8) ?
;1717:You need to have an origin brush as part of this entity.
;1718:Pendulums always swing north / south on unrotated models.  Add an angles field to the model to allow rotation in other directions.
;1719:Pendulum frequency is a physical constant based on the length of the beam and gravity.
;1720:"model2"	.md3 model to also draw
;1721:"speed"		the number of degrees each way the pendulum swings, (30 default)
;1722:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;1723:"dmg"		damage to inflict when blocked (2 default)
;1724:"color"		constantLight color
;1725:"light"		constantLight radius
;1726:*/
;1727:void SP_func_pendulum(gentity_t *ent) {
line 1733
;1728:	float		freq;
;1729:	float		length;
;1730:	float		phase;
;1731:	float		speed;
;1732:
;1733:	G_SpawnFloat( "speed", "30", &speed );
ADDRGP4 $512
ARGP4
ADDRGP4 $612
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1734
;1734:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $456
ARGP4
ADDRGP4 $457
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1735
;1735:	G_SpawnFloat( "phase", "0", &phase );
ADDRGP4 $606
ARGP4
ADDRGP4 $472
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1737
;1736:
;1737:	trap_SetBrushModel( ent, ent->model );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 544
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
line 1740
;1738:
;1739:	// find pendulum length
;1740:	length = fabs( ent->r.mins[2] );
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 1741
;1741:	if ( length < 8 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1090519040
GEF4 $613
line 1742
;1742:		length = 8;
ADDRLP4 0
CNSTF4 1090519040
ASGNF4
line 1743
;1743:	}
LABELV $613
line 1749
;1744:
;1745:	// JUHOX: use g_gravity.integer instead of g_gravity.value
;1746:#if 0
;1747:	freq = 1 / ( M_PI * 2 ) * sqrt( g_gravity.value / ( 3 * length ) );
;1748:#else
;1749:	freq = 1 / ( M_PI * 2 ) * sqrt( g_gravity.integer / ( 3 * length ) );
ADDRGP4 g_gravity+12
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
CNSTF4 1077936128
MULF4
DIVF4
ARGF4
ADDRLP4 24
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
CNSTF4 1042479491
MULF4
ASGNF4
line 1752
;1750:#endif
;1751:
;1752:	ent->s.pos.trDuration = ( 1000 / freq );
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1754
;1753:
;1754:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1756
;1755:
;1756:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1757
;1757:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1759
;1758:
;1759:	VectorCopy( ent->s.angles, ent->s.apos.trBase );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 116
ADDP4
INDIRB
ASGNB 12
line 1761
;1760:
;1761:	ent->s.apos.trDuration = 1000 / freq;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1762
;1762:	ent->s.apos.trTime = ent->s.apos.trDuration * phase;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1763
;1763:	ent->s.apos.trType = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 4
ASGNI4
line 1764
;1764:	ent->s.apos.trDelta[2] = speed;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1767
;1765:
;1766:#if ESCAPE_MODE	// JUHOX: set entity class
;1767:	ent->entClass = GEC_func_pendulum;
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 9
ASGNI4
line 1769
;1768:#endif
;1769:}
LABELV $611
endproc SP_func_pendulum 44 12
import G_ExplodeMissile
bss
export pushed_p
align 4
LABELV pushed_p
skip 4
export pushed
align 4
LABELV pushed
skip 32768
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_mapName
import g_proxMineTimeout
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_meeting
import g_weaponLimit
import g_cloakingDevice
import g_unlimitedAmmo
import g_noHealthRegen
import g_noItems
import g_grapple
import g_lightningDamageLimit
import g_baseHealth
import g_stamina
import g_armorFragments
import g_tssSafetyMode
import g_tss
import g_respawnAtPOD
import g_respawnDelay
import g_gameSeed
import g_template
import g_debugEFH
import g_challengingEnv
import g_distanceLimit
import g_monsterLoad
import g_scoreMode
import g_monsterProgression
import g_monsterBreeding
import g_maxMonstersPP
import g_monsterLauncher
import g_skipEndSequence
import g_monstersPerTrap
import g_monsterTitans
import g_monsterGuards
import g_monsterHealthScale
import g_monsterSpawnDelay
import g_maxMonsters
import g_minMonsters
import g_artefacts
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_editmode
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import IsPlayerFighting
import G_Constitution
import G_GetEntityPlayerState
import EntityAudible
import G_MonsterAction
import G_CheckMonsterDamage
import G_GetMonsterGeneric1
import G_IsMovable
import G_CanBeDamaged
import G_UpdateMonsterCounters
import G_AddMonsterSeed
import G_ReleaseTrap
import G_IsFriendlyMonster
import G_MonsterOwner
import G_IsAttackingGuard
import G_ChargeMonsters
import G_IsMonsterSuccessfulAttacking
import G_IsMonsterNearEntity
import IsFightingMonster
import G_MonsterSpawning
import G_SpawnMonster
import G_MonsterType
import G_MonsterBaseHealth
import G_MonsterHealthScale
import G_GetMonsterSpawnPoint
import G_GetMonsterBounds
import G_KillMonster
import G_MonsterScanForNoises
import CheckTouchedMonsters
import G_NumMonsters
import G_UpdateMonsterCS
import G_InitMonsters
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import Svcmd_AbortPodium_f
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import CheckObeliskAttack
import Team_GetDroppedOrTakenFlag
import Team_CheckDroppedItem
import OnSameTeam
import Team_GetFlagStatus
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientImpacts
import SetTargetPos
import CheckPlayerDischarge
import TotalChargeDamage
import TSS_Run
import TSS_DangerIndex
import IsPlayerInvolvedInFighting
import NearHomeBase
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientSetPlayerClass
import ClientConnect
import SelectAppropriateSpawnPoint
import LogExit
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import G_SetPlayerRefOrigin
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import PositionWouldTelefrag
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamCount
import GetRespawnLocationType
import ForceRespawn
import Weapon_HookThink
import Weapon_HookFree
import CheckTitanAttack
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import Weapon_GrapplingHook_Throw
import TeleportPlayer
import trigger_teleporter_touch
import fire_monster_seed
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_blaster
import G_RunMissile
import GibEntity
import ScorePlum
import DropArmor
import DropHealth
import TossClientCubes
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import DoOverkill
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_acos
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_NumEntitiesFree
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import G_SpawnArtefact
import G_BounceItemRotation
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import G_Say
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_EFH_NextDebugSegment
import G_EFH_SpaceExtent
import G_UpdateLightingOrigins
import G_GetTotalWayLength
import G_MakeWorldAwareOfMonsterDeath
import G_FindSegment
import G_UpdateWorld
import G_SpawnWorld
import G_InitWorldSystem
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import G_PlayTemplate
import G_PrintTemplateList
import G_SendGameTemplate
import G_TemplateList_Error
import G_TemplateList_Stop
import G_TemplateList_Request
import G_RestartGameTemplates
import G_DefineTemplate
import G_SetTemplateName
import G_LoadGameTemplates
import G_InitGameTemplates
import sv_mapChecksum
import templateList
import numTemplateFiles
import templateFileList
import InitLocalSeed
import SeededRandom
import SetGameSeed
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $612
byte 1 51
byte 1 48
byte 1 0
align 1
LABELV $606
byte 1 112
byte 1 104
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $605
byte 1 51
byte 1 50
byte 1 0
align 1
LABELV $592
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $582
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $578
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $577
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 10
byte 1 0
align 1
LABELV $571
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $562
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 117
byte 1 110
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $532
byte 1 52
byte 1 0
align 1
LABELV $527
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 101
byte 1 115
byte 1 47
byte 1 98
byte 1 117
byte 1 116
byte 1 110
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $518
byte 1 104
byte 1 101
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $515
byte 1 49
byte 1 0
align 1
LABELV $514
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $513
byte 1 50
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $512
byte 1 115
byte 1 112
byte 1 101
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $511
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $510
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 50
byte 1 0
align 1
LABELV $509
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $508
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 49
byte 1 0
align 1
LABELV $493
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $472
byte 1 48
byte 1 0
align 1
LABELV $471
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $457
byte 1 50
byte 1 0
align 1
LABELV $456
byte 1 100
byte 1 109
byte 1 103
byte 1 0
align 1
LABELV $455
byte 1 56
byte 1 0
align 1
LABELV $454
byte 1 108
byte 1 105
byte 1 112
byte 1 0
align 1
LABELV $449
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $448
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $443
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $384
byte 1 49
byte 1 32
byte 1 49
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $383
byte 1 99
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $382
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $381
byte 1 49
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $380
byte 1 110
byte 1 111
byte 1 105
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $344
byte 1 82
byte 1 101
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 66
byte 1 105
byte 1 110
byte 1 97
byte 1 114
byte 1 121
byte 1 77
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $124
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 112
byte 1 32
byte 1 62
byte 1 32
byte 1 38
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 91
byte 1 77
byte 1 65
byte 1 88
byte 1 95
byte 1 71
byte 1 69
byte 1 78
byte 1 84
byte 1 73
byte 1 84
byte 1 73
byte 1 69
byte 1 83
byte 1 93
byte 1 0
