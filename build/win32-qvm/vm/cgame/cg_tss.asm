code
proc TSS_MemCmp 4 0
file "..\..\..\..\code\cgame\cg_tss.c"
line 78
;1:// Copyright (C) 2001 J. Hoffmann
;2://
;3:// cg_tss -- client part of the tactical support system
;4:#include "cg_local.h"
;5:#include "../q3_ui/keycodes.h"
;6:
;7:
;8:
;9:#define TSS_KEYCATCHER KEYCATCH_UI
;10:
;11:#define TSS_X 48
;12:#define TSS_Y 52
;13:#define TSS_W 544
;14:#define TSS_H 352
;15:#define TSS_MOUSE_FACTOR 2	// the higher the slower
;16:
;17:#define TSS_LOWER_OR_EQUAL_CHAR '\x90'
;18:#define TSS_LOWER_OR_EQUAL_STR "\x90"
;19:#define TSS_GREATER_OR_EQUAL_CHAR '\x91'
;20:#define TSS_GREATER_OR_EQUAL_STR "\x91"
;21:#define TSS_UNEQUAL_CHAR '\x92'
;22:#define TSS_UNEQUAL_STR "\x92"
;23:
;24:typedef enum {
;25:	TSSBID_RESUMEGAME,
;26:	TSSBID_CALLLEADERVOTE,
;27:	TSSBID_CALLSURRENDERVOTE,
;28:	TSSBID_VOTE_YES,
;29:	TSSBID_VOTE_NO,
;30:	TSSBID_NAVAID_ON,
;31:	TSSBID_NAVAID_OFF,
;32:	TSSBID_GROUPFORMATION_TIGHT,
;33:	TSSBID_GROUPFORMATION_LOOSE,
;34:	TSSBID_GROUPFORMATION_FREE,
;35:	TSSBID_SAFETYMODE,
;36:	TSSBID_CREATE_STRATEGY,
;37:	TSSBID_DUPLICATE_STRATEGY,
;38:	TSSBID_UTILIZE_STRATEGY,
;39:	TSSBID_REMOVE_STRATEGY,
;40:	TSSBID_CANCEL,
;41:	TSSBID_APPLY,
;42:	TSSBID_INSERT_DIRECTIVE,
;43:	TSSBID_DELETE_DIRECTIVE,
;44:	TSSBID_CLEAR_DIRECTIVE,
;45:	TSSBID_COPY_DIRECTIVE,
;46:	TSSBID_PASTE_DIRECTIVE,
;47:	TSSBID_SEARCH_SELECTED,
;48:	TSSBID_JOIN_RED,
;49:	TSSBID_JOIN_BLUE,
;50:	TSSBID_AUTOGLC_ON,
;51:	TSSBID_AUTOGLC_OFF,
;52:
;53:	TSSBID_ADD_STRATEGY = 10000	// + stock position
;54:} tss_button_id_t;
;55:#define TSS_BUTTON ((int*)1)
;56:#define TSS_SIMPLE_TEXT ((const char* const*)1)
;57:
;58:#define TSS_STOCK_WINDOW_SIZE 13
;59:
;60:
;61:
;62:
;63:
;64:static int selectedStrategyScrollOffset;
;65:static int lastKey;	// to identify repeated keys
;66:static int altKey;
;67:static char searchIDBuf[4];
;68:static char searchNameBuf[TSS_NAME_SIZE];
;69:
;70:
;71:
;72:
;73:/*
;74:=================
;75:TSS_MemCmp
;76:=================
;77:*/
;78:static qboolean TSS_MemCmp(const void* m1, const void* m2, int size) {
ADDRGP4 $128
JUMPV
LABELV $127
line 79
;79:	while (size-- > 0) {
line 80
;80:		if (((const char*)m1)[size] != ((const char*)m2)[size]) return qtrue;
ADDRLP4 0
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
EQI4 $130
CNSTI4 1
RETI4
ADDRGP4 $126
JUMPV
LABELV $130
line 81
;81:	}
LABELV $128
line 79
ADDRLP4 0
ADDRFP4 8
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $127
line 82
;82:	return qfalse;
CNSTI4 0
RETI4
LABELV $126
endproc TSS_MemCmp 4 0
proc TSS_StdClearDirective 8 12
line 90
;83:}
;84:
;85:/*
;86:=================
;87:TSS_StdClearDirective
;88:=================
;89:*/
;90:static void TSS_StdClearDirective(tss_directive_t* directive) {
line 93
;91:	int i;
;92:
;93:	if (!directive) return;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $133
ADDRGP4 $132
JUMPV
LABELV $133
line 95
;94:
;95:	memset(directive, 0, sizeof(*directive));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1120
ARGI4
ADDRGP4 memset
CALLP4
pop
line 96
;96:	directive->instr.division.unassignedPlayers = 100;
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTI4 100
ASGNI4
line 97
;97:	for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $135
line 98
;98:		directive->instr.groupOrganization[i] = i;
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 99
;99:		directive->instr.division.group[i].minReadyMembers = 100;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
ADDP4
CNSTI4 8
ADDP4
CNSTI4 100
ASGNI4
line 100
;100:		directive->instr.orders.order[i].maxDanger = 25;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 4
ADDP4
CNSTI4 25
ASGNI4
line 101
;101:	}
LABELV $136
line 97
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $135
line 102
;102:}
LABELV $132
endproc TSS_StdClearDirective 8 12
proc TSS_ClearDirective 8 8
line 109
;103:
;104:/*
;105:=================
;106:TSS_ClearDirective
;107:=================
;108:*/
;109:static void TSS_ClearDirective(tss_strategy_t* strategy, int d) {
line 112
;110:	tss_directive_t* directive;
;111:
;112:	if (d < 0 || d > TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY) return;
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $142
ADDRLP4 4
INDIRI4
CNSTI4 26
LEI4 $140
LABELV $142
ADDRGP4 $139
JUMPV
LABELV $140
line 113
;113:	directive = &strategy->directives[d];
ADDRLP4 0
ADDRFP4 4
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
ASGNP4
line 115
;114:
;115:	TSS_StdClearDirective(directive);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 TSS_StdClearDirective
CALLV
pop
line 116
;116:	if (d == 0) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $143
line 117
;117:		strcpy(directive->name, "default");
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 $145
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 118
;118:	}
LABELV $143
line 119
;119:}
LABELV $139
endproc TSS_ClearDirective 8 8
proc TSS_PaletteSlotID 0 0
line 126
;120:
;121:/*
;122:=================
;123:TSS_PaletteSlotID
;124:=================
;125:*/
;126:static int TSS_PaletteSlotID(tss_strategyPaletteSlot_t* pslot) {
line 127
;127:	if (!pslot) return -1;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $147
CNSTI4 -1
RETI4
ADDRGP4 $146
JUMPV
LABELV $147
line 128
;128:	if (!pslot->slot) return -1;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $149
CNSTI4 -1
RETI4
ADDRGP4 $146
JUMPV
LABELV $149
line 129
;129:	return pslot->slot->id;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
RETI4
LABELV $146
endproc TSS_PaletteSlotID 0 0
proc TSS_GetSlotAtStockPos 4 8
line 137
;130:}
;131:
;132:/*
;133:=================
;134:TSS_GetSlotAtStockPos
;135:=================
;136:*/
;137:static tss_strategySlot_t* TSS_GetSlotAtStockPos(int pos) {
line 138
;138:	pos -= cg.tssStrategyStockScrollOffset;
ADDRFP4 0
ADDRFP4 0
INDIRI4
ADDRGP4 cg+132316
INDIRI4
SUBI4
ASGNI4
line 139
;139:	return CG_TSS_GetSortedSlot(pos, cg.tssStrategyStockSortOrder);
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_GetSortedSlot
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
RETP4
LABELV $151
endproc TSS_GetSlotAtStockPos 4 8
proc TSS_SetStockWindow 12 4
line 147
;140:}
;141:
;142:/*
;143:=================
;144:TSS_SetStockWindow
;145:=================
;146:*/
;147:static int TSS_SetStockWindow(int pos, int index) {
line 151
;148:	int numStrategies;
;149:	int start;
;150:
;151:	numStrategies = CG_TSS_NumStrategiesInStock(cg.tssStrategyStockSortOrder);
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_TSS_NumStrategiesInStock
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 153
;152:
;153:	index -= pos;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRI4
SUBI4
ASGNI4
line 154
;154:	start = index;
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
line 156
;155:
;156:	if (start + TSS_STOCK_WINDOW_SIZE > numStrategies) {
ADDRLP4 0
INDIRI4
CNSTI4 13
ADDI4
ADDRLP4 4
INDIRI4
LEI4 $156
line 157
;157:		start = numStrategies - TSS_STOCK_WINDOW_SIZE;
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 13
SUBI4
ASGNI4
line 158
;158:	}
LABELV $156
line 159
;159:	if (start < 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $158
line 160
;160:		start = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 161
;161:	}
LABELV $158
line 163
;162:
;163:	pos += index - start;
ADDRFP4 0
ADDRFP4 0
INDIRI4
ADDRFP4 4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ADDI4
ASGNI4
line 164
;164:	cg.tssStrategyStockScrollOffset = -start;
ADDRGP4 cg+132316
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
line 165
;165:	return pos;
ADDRFP4 0
INDIRI4
RETI4
LABELV $154
endproc TSS_SetStockWindow 12 4
proc TSS_SelectStrategy 4 12
line 173
;166:}
;167:
;168:/*
;169:=================
;170:TSS_SelectStrategy
;171:=================
;172:*/
;173:static void TSS_SelectStrategy(tss_strategyPaletteSlot_t* pslot) {
line 174
;174:	if (cg.tssSelectedStrategy && cg.tssStrategyWorkCopyChanged) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $162
ADDRGP4 cg+162884
INDIRI4
CNSTI4 0
EQI4 $162
line 175
;175:		memcpy(cg.tssSelectedStrategy->strategy, &cg.tssStrategyWorkCopy, sizeof(tss_strategy_t));
ADDRGP4 cg+131684
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 cg+132496
ARGP4
CNSTI4 30388
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 176
;176:		cg.tssSelectedStrategy->isChanged = qtrue;
ADDRGP4 cg+131684
INDIRP4
CNSTI4 1
ASGNI4
line 177
;177:		cg.tssSavingNeeded = qtrue;
ADDRGP4 cg+162892
CNSTI4 1
ASGNI4
line 178
;178:		cg.tssStrategyWorkCopyChanged = qfalse;
ADDRGP4 cg+162884
CNSTI4 0
ASGNI4
line 179
;179:	}
LABELV $162
line 180
;180:	if (pslot && pslot != cg.tssSelectedStrategy) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 0
INDIRU4
CNSTU4 0
EQU4 $171
ADDRLP4 0
INDIRU4
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
EQU4 $171
line 181
;181:		memcpy(&cg.tssStrategyWorkCopy, pslot->strategy, sizeof(tss_strategy_t));
ADDRGP4 cg+132496
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 30388
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 182
;182:		cg.tssStrategyWorkCopyChanged = qfalse;
ADDRGP4 cg+162884
CNSTI4 0
ASGNI4
line 183
;183:	}
LABELV $171
line 184
;184:	cg.tssSelectedStrategy = pslot;
ADDRGP4 cg+131684
ADDRFP4 0
INDIRP4
ASGNP4
line 185
;185:}
LABELV $161
endproc TSS_SelectStrategy 4 12
proc TSS_ApplyChanges 4 4
line 192
;186:
;187:/*
;188:=================
;189:TSS_ApplyChanges
;190:=================
;191:*/
;192:static void TSS_ApplyChanges(void) {
line 195
;193:	tss_strategyPaletteSlot_t* pslot;
;194:
;195:	pslot = cg.tssSelectedStrategy;
ADDRLP4 0
ADDRGP4 cg+131684
INDIRP4
ASGNP4
line 196
;196:	TSS_SelectStrategy(NULL);
CNSTP4 0
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 197
;197:	CG_TSS_SavePaletteSlotIfNeeded(pslot);	// this may change the strategy->name field
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TSS_SavePaletteSlotIfNeeded
CALLV
pop
line 198
;198:	TSS_SelectStrategy(pslot);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 199
;199:}
LABELV $177
endproc TSS_ApplyChanges 4 4
proc TSS_CancelChanges 4 4
line 206
;200:
;201:/*
;202:=================
;203:TSS_CancelChanges
;204:=================
;205:*/
;206:static void TSS_CancelChanges(void) {
line 209
;207:	tss_strategyPaletteSlot_t* pslot;
;208:
;209:	pslot = cg.tssSelectedStrategy;
ADDRLP4 0
ADDRGP4 cg+131684
INDIRP4
ASGNP4
line 210
;210:	cg.tssSelectedStrategy = NULL;
ADDRGP4 cg+131684
CNSTP4 0
ASGNP4
line 211
;211:	TSS_SelectStrategy(pslot);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 212
;212:}
LABELV $179
endproc TSS_CancelChanges 4 4
proc TSS_PaletteSlotIndex 4 0
line 219
;213:
;214:/*
;215:=================
;216:TSS_PaletteSlotIndex
;217:=================
;218:*/
;219:static int TSS_PaletteSlotIndex(tss_strategyPaletteSlot_t* pslot) {
line 222
;220:	int index;
;221:
;222:	if (!pslot) return -1;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $183
CNSTI4 -1
RETI4
ADDRGP4 $182
JUMPV
LABELV $183
line 223
;223:	if (pslot < cg.tssPalette.slots) return -1;
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+131688+4
CVPU4 4
GEU4 $185
CNSTI4 -1
RETI4
ADDRGP4 $182
JUMPV
LABELV $185
line 225
;224:
;225:	index = pslot - cg.tssPalette.slots;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+131688+4
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 24
DIVI4
ASGNI4
line 226
;226:	if (index >= cg.tssPalette.numEntries) return -1;
ADDRLP4 0
INDIRI4
ADDRGP4 cg+131688
INDIRI4
LTI4 $191
CNSTI4 -1
RETI4
ADDRGP4 $182
JUMPV
LABELV $191
line 228
;227:
;228:	return index;
ADDRLP4 0
INDIRI4
RETI4
LABELV $182
endproc TSS_PaletteSlotIndex 4 0
proc TSS_SearchPaletteSlotIndex 4 0
line 236
;229:}
;230:
;231:/*
;232:=================
;233:TSS_SearchPaletteSlotIndex
;234:=================
;235:*/
;236:static int TSS_SearchPaletteSlotIndex(tss_strategySlot_t* sslot) {
line 239
;237:	int i;
;238:
;239:	for (i = 0; i < cg.tssPalette.numEntries; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $198
JUMPV
LABELV $195
line 240
;240:		if (cg.tssPalette.slots[i].slot == sslot) return i;
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4+4
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $200
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $194
JUMPV
LABELV $200
line 241
;241:	}
LABELV $196
line 239
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $198
ADDRLP4 0
INDIRI4
ADDRGP4 cg+131688
INDIRI4
LTI4 $195
line 242
;242:	return -1;
CNSTI4 -1
RETI4
LABELV $194
endproc TSS_SearchPaletteSlotIndex 4 0
proc TSS_AddToPalette 20 8
line 250
;243:}
;244:
;245:/*
;246:=================
;247:TSS_AddToPalette
;248:=================
;249:*/
;250:static int TSS_AddToPalette(tss_strategySlot_t* sslot) {
line 254
;251:	tss_strategyPaletteSlot_t* pslot;
;252:	int index;
;253:
;254:	if (!sslot) return -1;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $206
CNSTI4 -1
RETI4
ADDRGP4 $205
JUMPV
LABELV $206
line 255
;255:	if (cg.tssPalette.numEntries >= TSS_MAX_STRATEGIES_PER_PALETTE) return -1;
ADDRGP4 cg+131688
INDIRI4
CNSTI4 26
LTI4 $208
CNSTI4 -1
RETI4
ADDRGP4 $205
JUMPV
LABELV $208
line 257
;256:
;257:	index = TSS_SearchPaletteSlotIndex(sslot);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_SearchPaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 258
;258:	if (index >= 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $211
line 259
;259:		pslot = &cg.tssPalette.slots[index];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ASGNP4
line 260
;260:		goto SelectSlot;
ADDRGP4 $215
JUMPV
LABELV $211
line 263
;261:	}
;262:
;263:	index = cg.tssPalette.numEntries;
ADDRLP4 0
ADDRGP4 cg+131688
INDIRI4
ASGNI4
line 264
;264:	pslot = &cg.tssPalette.slots[index];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ASGNP4
line 265
;265:	if (!CG_TSS_LoadPaletteSlot(sslot, pslot)) return -1;
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 CG_TSS_LoadPaletteSlot
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $219
CNSTI4 -1
RETI4
ADDRGP4 $205
JUMPV
LABELV $219
line 267
;266:
;267:	cg.tssPalette.numEntries++;
ADDRLP4 16
ADDRGP4 cg+131688
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 269
;268:
;269:	if (!cg.tssUtilizedStrategy) {
ADDRGP4 cg+131680
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $222
line 270
;270:		cg.tssUtilizedStrategy = pslot;
ADDRGP4 cg+131680
ADDRLP4 4
INDIRP4
ASGNP4
line 271
;271:	}
LABELV $222
LABELV $215
line 274
;272:
;273:	SelectSlot:
;274:	TSS_SelectStrategy(pslot);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 275
;275:	return index;
ADDRLP4 0
INDIRI4
RETI4
LABELV $205
endproc TSS_AddToPalette 20 8
proc TSS_RemoveFromPalette 28 12
line 283
;276:}
;277:
;278:/*
;279:=================
;280:TSS_RemoveFromPalette
;281:=================
;282:*/
;283:static void TSS_RemoveFromPalette(tss_strategyPaletteSlot_t* pslot) {
line 288
;284:	int index;
;285:	int selected;
;286:	int i;
;287:
;288:	index = TSS_PaletteSlotIndex(pslot);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 289
;289:	if (index < 0) return;
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $227
ADDRGP4 $226
JUMPV
LABELV $227
line 291
;290:
;291:	i = TSS_PaletteSlotIndex(cg.tssUtilizedStrategy);
ADDRGP4 cg+131680
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ASGNI4
line 292
;292:	if (i == index) {
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $230
line 293
;293:		cg.tssUtilizedStrategy = NULL;
ADDRGP4 cg+131680
CNSTP4 0
ASGNP4
line 294
;294:	}
ADDRGP4 $231
JUMPV
LABELV $230
line 295
;295:	else if (i > index) {
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $233
line 296
;296:		cg.tssUtilizedStrategy--;
ADDRLP4 20
ADDRGP4 cg+131680
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRP4
CNSTI4 -24
ADDP4
ASGNP4
line 297
;297:	}
LABELV $233
LABELV $231
line 299
;298:
;299:	selected = TSS_PaletteSlotIndex(cg.tssSelectedStrategy);
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 20
INDIRI4
ASGNI4
line 300
;300:	if (selected >= index) {
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $237
line 301
;301:		if (selected >= cg.tssPalette.numEntries - 1 || selected > index) {
ADDRLP4 8
INDIRI4
ADDRGP4 cg+131688
INDIRI4
CNSTI4 1
SUBI4
GEI4 $242
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $239
LABELV $242
line 302
;302:			selected--;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 303
;303:		}
LABELV $239
line 304
;304:	}
LABELV $237
line 305
;305:	TSS_SelectStrategy(NULL);
CNSTP4 0
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 307
;306:
;307:	CG_TSS_FreePaletteSlot(pslot);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TSS_FreePaletteSlot
CALLV
pop
line 309
;308:
;309:	for (i = index + 1; i < cg.tssPalette.numEntries; i++) {
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $246
JUMPV
LABELV $243
line 311
;310:		// copy from 'i' to 'i-1'
;311:		memcpy(&cg.tssPalette.slots[i - 1], &cg.tssPalette.slots[i], sizeof(tss_strategyPaletteSlot_t));
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4-24
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ARGP4
CNSTI4 24
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 312
;312:	}
LABELV $244
line 309
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $246
ADDRLP4 0
INDIRI4
ADDRGP4 cg+131688
INDIRI4
LTI4 $243
line 313
;313:	cg.tssPalette.numEntries--;
ADDRLP4 24
ADDRGP4 cg+131688
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 315
;314:
;315:	if (selected >= 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $254
line 316
;316:		TSS_SelectStrategy(&cg.tssPalette.slots[selected]);
ADDRLP4 8
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 317
;317:	}
LABELV $254
line 318
;318:}
LABELV $226
endproc TSS_RemoveFromPalette 28 12
export TSS_GetPalette
proc TSS_GetPalette 20 12
line 325
;319:
;320:/*
;321:=================
;322:TSS_GetPalette
;323:=================
;324:*/
;325:void TSS_GetPalette(tss_savedPalette_t* palette) {
line 328
;326:	int i;
;327:
;328:	memset(palette, 0, sizeof(*palette));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 116
ARGI4
ADDRGP4 memset
CALLP4
pop
line 330
;329:
;330:	palette->utilizedStrategy = TSS_PaletteSlotID(cg.tssUtilizedStrategy);
ADDRGP4 cg+131680
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 TSS_PaletteSlotID
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
line 331
;331:	palette->selectedStrategy = TSS_PaletteSlotID(cg.tssSelectedStrategy);
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_PaletteSlotID
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 332
;332:	palette->numEntries = cg.tssPalette.numEntries;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+131688
INDIRI4
ASGNI4
line 333
;333:	for (i = 0; i < palette->numEntries; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $265
JUMPV
LABELV $262
line 334
;334:		palette->palette[i] = TSS_PaletteSlotID(&cg.tssPalette.slots[i]);
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 TSS_PaletteSlotID
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 335
;335:	}
LABELV $263
line 333
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $265
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $262
line 336
;336:}
LABELV $258
endproc TSS_GetPalette 20 12
export TSS_SetPalette
proc TSS_SetPalette 8 4
line 375
;337:
;338:/*
;339:=================
;340:TSS_SavePalette
;341:=================
;342:*/
;343:#if !TSSINCVAR
;344:static void TSS_SavePalette(void) {
;345:	static tss_savedPalette_t savedPalette;
;346:	int i;
;347:	const char* filename;
;348:	fileHandle_t f;
;349:
;350:	TSS_GetPalette(&savedPalette);
;351:
;352:	switch (cg.tssGametype) {
;353:	case GT_TEAM:
;354:		filename = "tss/tdm/" TSS_PALETTE_FILE;
;355:		break;
;356:	case GT_CTF:
;357:		filename = "tss/ctf/" TSS_PALETTE_FILE;
;358:		break;
;359:	default:
;360:		return;
;361:	}
;362:	trap_FS_FOpenFile(filename, &f, FS_WRITE);
;363:	if (f) {
;364:		trap_FS_Write(&savedPalette, sizeof(savedPalette), f);
;365:		trap_FS_FCloseFile(f);
;366:	}
;367:}
;368:#endif
;369:
;370:/*
;371:=================
;372:TSS_SetPalette
;373:=================
;374:*/
;375:void TSS_SetPalette(const tss_savedPalette_t* palette) {
line 378
;376:	int i;
;377:
;378:	for (i = 0; i < palette->numEntries; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $272
JUMPV
LABELV $269
line 379
;379:		TSS_AddToPalette(CG_TSS_GetSlotByID(palette->palette[i]));
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_TSS_GetSlotByID
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 TSS_AddToPalette
CALLI4
pop
line 380
;380:	}
LABELV $270
line 378
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $272
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $269
line 382
;381:
;382:	if (palette->utilizedStrategy >= 0) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
LTI4 $273
line 383
;383:		TSS_AddToPalette(CG_TSS_GetSlotByID(palette->utilizedStrategy));
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_TSS_GetSlotByID
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 TSS_AddToPalette
CALLI4
pop
line 384
;384:		cg.tssUtilizedStrategy = cg.tssSelectedStrategy;
ADDRGP4 cg+131680
ADDRGP4 cg+131684
INDIRP4
ASGNP4
line 385
;385:	}
LABELV $273
line 387
;386:
;387:	TSS_AddToPalette(CG_TSS_GetSlotByID(palette->selectedStrategy));
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_TSS_GetSlotByID
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 TSS_AddToPalette
CALLI4
pop
line 388
;388:}
LABELV $268
endproc TSS_SetPalette 8 4
export CG_TSS_InitInterface
proc CG_TSS_InitInterface 4 4
line 430
;389:
;390:/*
;391:=================
;392:TSS_LoadPalette
;393:=================
;394:*/
;395:#if !TSSINCVAR
;396:static qboolean TSS_LoadPalette(void) {
;397:	tss_savedPalette_t savedPalette;
;398:	const char* filename;
;399:	fileHandle_t f;
;400:	int len;
;401:	int i;
;402:
;403:	switch (cg.tssGametype) {
;404:	case GT_TEAM:
;405:		filename = "tss/tdm/" TSS_PALETTE_FILE;
;406:		break;
;407:	case GT_CTF:
;408:		filename = "tss/ctf/" TSS_PALETTE_FILE;
;409:		break;
;410:	default:
;411:		return qfalse;
;412:	}
;413:	len = trap_FS_FOpenFile(filename, &f, FS_READ);
;414:	if (!f) return qfalse;
;415:	if (len != sizeof(savedPalette)) return qfalse;
;416:
;417:	trap_FS_Read(&savedPalette, sizeof(savedPalette), f);
;418:	trap_FS_FCloseFile(f);
;419:
;420:	TSS_SetPalette(&savedPalette);
;421:	return qtrue;
;422:}
;423:#endif
;424:
;425:/*
;426:=================
;427:CG_TSS_InitInterface
;428:=================
;429:*/
;430:void CG_TSS_InitInterface(void) {
line 433
;431:	int i;
;432:
;433:	lastKey = -1;
ADDRGP4 lastKey
CNSTI4 -1
ASGNI4
line 434
;434:	altKey = 0;
ADDRGP4 altKey
CNSTI4 0
ASGNI4
line 436
;435:
;436:	cg.tssOnline = qfalse;
ADDRGP4 cg+128220
CNSTI4 0
ASGNI4
line 437
;437:	cg.tssUtilizedStrategy = NULL;
ADDRGP4 cg+131680
CNSTP4 0
ASGNP4
line 438
;438:	cg.tssSelectedStrategy = NULL;
ADDRGP4 cg+131684
CNSTP4 0
ASGNP4
line 439
;439:	cg.tssPalette.numEntries = 0;
ADDRGP4 cg+131688
CNSTI4 0
ASGNI4
line 440
;440:	cg.tssStrategyStockScrollOffset = 0;
ADDRGP4 cg+132316
CNSTI4 0
ASGNI4
line 441
;441:	cg.tssStrategyStockSortOrder = SSO_accessTime;
ADDRGP4 cg+132320
CNSTI4 1
ASGNI4
line 442
;442:	cg.tssDivisionMode = DM_percentage;
ADDRGP4 cg+132368
CNSTI4 2
ASGNI4
line 452
;443:#if !TSSINCVAR
;444:	{
;445:		char buf[16];
;446:
;447:		trap_Cvar_VariableStringBuffer("sv_pure", buf, sizeof(buf));
;448:		cg.tssPureServer = atoi(buf);
;449:	}
;450:#endif
;451:
;452:	for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $285
line 453
;453:		cg.tssGroupLeader[0][i] = -1;	// '---'
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952
ADDP4
CNSTI4 -1
ASGNI4
line 454
;454:		cg.tssGroupLeader[1][i] = -1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952+40
ADDP4
CNSTI4 -1
ASGNI4
line 455
;455:		cg.tssGroupLeader[2][i] = -1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952+80
ADDP4
CNSTI4 -1
ASGNI4
line 456
;456:		cg.tssCurrentLeader[i] = -1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130240
ADDP4
CNSTI4 -1
ASGNI4
line 457
;457:	}
LABELV $286
line 452
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $285
line 459
;458:
;459:	TSS_StdClearDirective(&cg.tssDirectiveClipboard);
ADDRGP4 cg+130560
ARGP4
ADDRGP4 TSS_StdClearDirective
CALLV
pop
line 460
;460:}
LABELV $277
endproc CG_TSS_InitInterface 4 4
export CG_TSS_LoadInterface
proc CG_TSS_LoadInterface 24 8
line 467
;461:
;462:/*
;463:=================
;464:CG_TSS_LoadInterface
;465:=================
;466:*/
;467:void CG_TSS_LoadInterface(void) {
line 471
;468:#if !TSSINCVAR
;469:	if (cg.tssPureServer) return;
;470:#endif
;471:	if (cgs.gametype < GT_TEAM) return;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $297
ADDRGP4 $296
JUMPV
LABELV $297
line 473
;472:
;473:	switch (cgs.gametype) {
ADDRLP4 0
ADDRGP4 cgs+31456
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
EQI4 $304
ADDRLP4 0
INDIRI4
CNSTI4 4
EQI4 $306
ADDRGP4 $300
JUMPV
LABELV $304
line 476
;474:	case GT_TEAM:
;475:	//case GT_STU:
;476:		cg.tssGametype = GT_TEAM;
ADDRGP4 cg+128096
CNSTI4 3
ASGNI4
line 477
;477:		break;
ADDRGP4 $301
JUMPV
LABELV $306
line 479
;478:	case GT_CTF:
;479:		cg.tssGametype = GT_CTF;
ADDRGP4 cg+128096
CNSTI4 4
ASGNI4
line 480
;480:		break;
ADDRGP4 $301
JUMPV
LABELV $300
line 482
;481:	default:
;482:		cg.tssGametype = -1;
ADDRGP4 cg+128096
CNSTI4 -1
ASGNI4
line 483
;483:		return;
ADDRGP4 $296
JUMPV
LABELV $301
line 490
;484:	}
;485:
;486:#if !TSSINCVAR
;487:	CG_TSS_LoadStrategyStock();
;488:	TSS_LoadPalette();
;489:#else
;490:	TSSFS_LoadStrategyStock();
ADDRGP4 TSSFS_LoadStrategyStock
CALLV
pop
line 492
;491:#endif
;492:	if (!cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $309
line 494
;493:		if (
;494:			TSS_AddToPalette(
ADDRGP4 cg+128096
INDIRI4
CNSTI4 4
NEI4 $318
ADDRLP4 8
ADDRGP4 $315
ASGNP4
ADDRGP4 $319
JUMPV
LABELV $318
ADDRLP4 8
ADDRGP4 $316
ASGNP4
LABELV $319
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 CG_TSS_GetSlotByName
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 TSS_AddToPalette
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
GEI4 $312
line 499
;495:				CG_TSS_GetSlotByName(
;496:					cg.tssGametype == GT_CTF? "juhox powerpliers" : "juhox crowd"
;497:				)
;498:			) < 0
;499:		) {
line 500
;500:			TSS_AddToPalette(CG_TSS_GetSortedSlot(0, SSO_accessTime));
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 20
ADDRGP4 CG_TSS_GetSortedSlot
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 TSS_AddToPalette
CALLI4
pop
line 501
;501:		}
LABELV $312
line 502
;502:	}
LABELV $309
line 503
;503:}
LABELV $296
endproc CG_TSS_LoadInterface 24 8
export CG_TSS_SaveInterface
proc CG_TSS_SaveInterface 0 0
line 510
;504:
;505:/*
;506:=================
;507:CG_TSS_SaveInterface
;508:=================
;509:*/
;510:void CG_TSS_SaveInterface(void) {
line 525
;511:#if !TSSINCVAR
;512:	int i;
;513:
;514:	if (cg.tssPureServer) return;
;515:	if (cgs.gametype < GT_TEAM) return;
;516:	if (CG_TSS_NumStrategiesInStock(SSO_creationTime) <= 0) return;
;517:
;518:	TSS_SavePalette();
;519:	TSS_SelectStrategy(NULL);
;520:	for (i = 0; i < cg.tssPalette.numEntries; i++) {
;521:		CG_TSS_FreePaletteSlot(&cg.tssPalette.slots[i]);
;522:	}
;523:	CG_TSS_SaveStrategyStock();
;524:#endif
;525:}
LABELV $320
endproc CG_TSS_SaveInterface 0 0
proc TSS_SaveInterfaceIfNeeded 8 4
line 533
;526:
;527:/*
;528:=================
;529:TSS_SaveInterfaceIfNeeded
;530:=================
;531:*/
;532:#if TSSINCVAR
;533:static void TSS_SaveInterfaceIfNeeded(void) {
line 536
;534:	int i;
;535:
;536:	if (!cg.tssSavingNeeded) return;
ADDRGP4 cg+162892
INDIRI4
CNSTI4 0
NEI4 $322
ADDRGP4 $321
JUMPV
LABELV $322
line 537
;537:	if (cgs.gametype < GT_TEAM) return;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $325
ADDRGP4 $321
JUMPV
LABELV $325
line 538
;538:	if (CG_TSS_NumStrategiesInStock(SSO_creationTime) <= 0) return;
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 CG_TSS_NumStrategiesInStock
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
GTI4 $328
ADDRGP4 $321
JUMPV
LABELV $328
line 540
;539:
;540:	for (i = 0; i < cg.tssPalette.numEntries; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $333
JUMPV
LABELV $330
line 541
;541:		CG_TSS_SavePaletteSlotIfNeeded(&cg.tssPalette.slots[i]);
ADDRLP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ARGP4
ADDRGP4 CG_TSS_SavePaletteSlotIfNeeded
CALLV
pop
line 542
;542:	}
LABELV $331
line 540
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $333
ADDRLP4 0
INDIRI4
ADDRGP4 cg+131688
INDIRI4
LTI4 $330
line 543
;543:	TSSFS_SaveStrategyStock();
ADDRGP4 TSSFS_SaveStrategyStock
CALLV
pop
line 544
;544:	cg.tssSavingNeeded = qfalse;
ADDRGP4 cg+162892
CNSTI4 0
ASGNI4
line 545
;545:}
LABELV $321
endproc TSS_SaveInterfaceIfNeeded 8 4
proc TSS_RemapFlagStatus 4 0
line 553
;546:#endif
;547:
;548:/*
;549:=================
;550:TSS_RemapFlagStatus
;551:=================
;552:*/
;553:static tss_flagStatus_t TSS_RemapFlagStatus(int quakeFlagStatus) {
line 554
;554:	switch (quakeFlagStatus) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $341
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $342
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $343
ADDRGP4 $339
JUMPV
LABELV $341
line 556
;555:		case 0:
;556:			return TSSFS_atBase;
CNSTI4 0
RETI4
ADDRGP4 $338
JUMPV
LABELV $342
line 558
;557:		case 1:
;558:			return TSSFS_taken;
CNSTI4 2
RETI4
ADDRGP4 $338
JUMPV
LABELV $343
line 560
;559:		case 2:
;560:			return TSSFS_dropped;
CNSTI4 1
RETI4
ADDRGP4 $338
JUMPV
LABELV $339
line 562
;561:	}
;562:	return 0;
CNSTI4 0
RETI4
LABELV $338
endproc TSS_RemapFlagStatus 4 0
proc TSS_UpdateTacticalMeasures 88 12
line 570
;563:}
;564:
;565:/*
;566:=================
;567:TSS_UpdateTacticalMeasures
;568:=================
;569:*/
;570:static void TSS_UpdateTacticalMeasures(void) {
line 574
;571:	int i;
;572:	int* var;
;573:
;574:	cg.tssNumTeamMates = 0;
ADDRGP4 cg+128400
CNSTI4 0
ASGNI4
line 575
;575:	cg.tssNumTeamMatesAlive = 0;
ADDRGP4 cg+129944
CNSTI4 0
ASGNI4
line 576
;576:	cg.tssNumEnemies = 0;
ADDRGP4 cg+129940
CNSTI4 0
ASGNI4
line 577
;577:	cg.tssNumEnemiesAlive = 0;
ADDRGP4 cg+129948
CNSTI4 0
ASGNI4
line 579
;578:
;579:	for (i = 0; i < MAX_CLIENTS; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $349
line 580
;580:		if (!cgs.clientinfo[i].infoValid) continue;
ADDRLP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
INDIRI4
CNSTI4 0
NEI4 $353
ADDRGP4 $350
JUMPV
LABELV $353
line 581
;581:		if (cgs.clientinfo[i].team != cgs.clientinfo[cg.clientNum].team) {
ADDRLP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+68
ADDP4
INDIRI4
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+68
ADDP4
INDIRI4
EQI4 $356
line 582
;582:			cg.tssNumEnemies++;
ADDRLP4 8
ADDRGP4 cg+129940
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 583
;583:			if (cgs.clientinfo[i].health > 0) cg.tssNumEnemiesAlive++;
ADDRLP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+128
ADDP4
INDIRI4
CNSTI4 0
LEI4 $350
ADDRLP4 12
ADDRGP4 cg+129948
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 584
;584:			continue;
ADDRGP4 $350
JUMPV
LABELV $356
line 587
;585:		}
;586:
;587:		if (cgs.clientinfo[i].health > 0) cg.tssNumTeamMatesAlive++;
ADDRLP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+128
ADDP4
INDIRI4
CNSTI4 0
LEI4 $369
ADDRLP4 8
ADDRGP4 cg+129944
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $369
line 589
;588:
;589:		cg.tssNumTeamMates++;
ADDRLP4 12
ADDRGP4 cg+128400
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 590
;590:	}
LABELV $350
line 579
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $349
line 593
;591:
;592:	if (
;593:		cgs.clientinfo[cg.clientNum].teamLeader &&
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $375
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $375
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $375
line 596
;594:		cg.snap->ps.stats[STAT_HEALTH] > 0 &&
;595:		cg.snap->ps.pm_type == PM_SPECTATOR
;596:	) {
line 598
;597:		// mission leader in safety mode
;598:		cg.tssNumTeamMates--;
ADDRLP4 8
ADDRGP4 cg+128400
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 599
;599:		cg.tssNumTeamMatesAlive--;
ADDRLP4 12
ADDRGP4 cg+129944
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 600
;600:	}
LABELV $375
line 602
;601:
;602:	if (cgs.gametype < GT_TEAM) return;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $384
ADDRGP4 $344
JUMPV
LABELV $384
line 604
;603:
;604:	var = cg.tssMeasures.var;
ADDRLP4 0
ADDRGP4 cg+130400
ASGNP4
line 605
;605:	var[TSSTM_YTS] = cg.tssNumTeamMates;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+128400
INDIRI4
ASGNI4
line 606
;606:	var[TSSTM_OTS] = cg.tssNumEnemies;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+129940
INDIRI4
ASGNI4
line 607
;607:	var[TSSTM_BTS] = var[TSSTM_YTS] - var[TSSTM_OTS];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ASGNI4
line 608
;608:	var[TSSTM_RSPD] = cg.tssRespawnDelay;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+130212
INDIRI4
ASGNI4
line 609
;609:	var[TSSTM_YAQ] = cg.tssNumTeamMatesAlive;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRGP4 cg+129944
INDIRI4
ASGNI4
line 610
;610:	var[TSSTM_OAQ] = cg.tssNumEnemiesAlive;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRGP4 cg+129948
INDIRI4
ASGNI4
line 611
;611:	var[TSSTM_YAP] = BG_TSS_Proportion(var[TSSTM_YAQ], var[TSSTM_YTS], 100);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 16
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 612
;612:	var[TSSTM_OAP] = BG_TSS_Proportion(var[TSSTM_OAQ], var[TSSTM_OTS], 100);
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 24
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 613
;613:	var[TSSTM_BAQ] = var[TSSTM_YAQ] - var[TSSTM_OAQ];
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
SUBI4
ASGNI4
line 614
;614:	var[TSSTM_BAP] = var[TSSTM_YAP] - var[TSSTM_OAP];
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
SUBI4
ASGNI4
line 615
;615:	var[TSSTM_YAMQ] = (int) (cg.tssYAMQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRGP4 cg+130224
INDIRF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 616
;616:	var[TSSTM_YALQ] = (int) (cg.tssYALQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+130228
INDIRF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 617
;617:	var[TSSTM_OAMQ] = (int) (cg.tssOAMQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRGP4 cg+130232
INDIRF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 618
;618:	var[TSSTM_OALQ] = (int) (cg.tssOALQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRGP4 cg+130236
INDIRF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 619
;619:	var[TSSTM_YAMP] = (int) (100 * cg.tssYAMQ / var[TSSTM_YTS] + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRGP4 cg+130224
INDIRF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 620
;620:	var[TSSTM_YALP] = (int) (100 * cg.tssYALQ / var[TSSTM_YTS] + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cg+130228
INDIRF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 621
;621:	var[TSSTM_OAMP] = (int) (100 * cg.tssOAMQ / var[TSSTM_OTS] + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRGP4 cg+130232
INDIRF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 622
;622:	var[TSSTM_OALP] = (int) (100 * cg.tssOALQ / var[TSSTM_OTS] + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRGP4 cg+130236
INDIRF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 623
;623:	var[TSSTM_BAMQ] = (int) (cg.tssYAMQ - cg.tssOAMQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRGP4 cg+130224
INDIRF4
ADDRGP4 cg+130232
INDIRF4
SUBF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 624
;624:	var[TSSTM_BALQ] = (int) (cg.tssYALQ - cg.tssOALQ + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 cg+130228
INDIRF4
ADDRGP4 cg+130236
INDIRF4
SUBF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 625
;625:	var[TSSTM_BAMP] = var[TSSTM_YAMP] - var[TSSTM_OAMP];
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
SUBI4
ASGNI4
line 626
;626:	var[TSSTM_BALP] = var[TSSTM_YALP] - var[TSSTM_OALP];
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
SUBI4
ASGNI4
line 627
;627:	var[TSSTM_BAMT] = (int) (100 * (cg.tssYAMQ - cg.tssOAMQ - var[TSSTM_BAQ]) / (var[TSSTM_YTS] + var[TSSTM_OTS]) + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRGP4 cg+130224
INDIRF4
ADDRGP4 cg+130232
INDIRF4
SUBF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 628
;628:	var[TSSTM_BALT] = (int) (100 * (cg.tssYALQ - cg.tssOALQ - var[TSSTM_BAQ]) / (var[TSSTM_YTS] + var[TSSTM_OTS]) + 0.5);
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+130228
INDIRF4
ADDRGP4 cg+130236
INDIRF4
SUBF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1120403456
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDI4
CVIF4 4
DIVF4
CNSTF4 1056964608
ADDF4
CVFI4 4
ASGNI4
line 629
;629:	i = cg.tssGametype == GT_CTF? cgs.capturelimit : cgs.fraglimit;
ADDRGP4 cg+128096
INDIRI4
CNSTI4 4
NEI4 $413
ADDRLP4 68
ADDRGP4 cgs+31472
INDIRI4
ASGNI4
ADDRGP4 $414
JUMPV
LABELV $413
ADDRLP4 68
ADDRGP4 cgs+31468
INDIRI4
ASGNI4
LABELV $414
ADDRLP4 4
ADDRLP4 68
INDIRI4
ASGNI4
line 631
;630:#if MONSTER_MODE
;631:	if (cgs.gametype == GT_STU) i = cgs.artefacts;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
NEI4 $415
ADDRLP4 4
ADDRGP4 cgs+31848
INDIRI4
ASGNI4
LABELV $415
line 633
;632:#endif
;633:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $419
line 634
;634:		var[TSSTM_SCB] = cgs.scores2 - cgs.scores1;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 cgs+35128
INDIRI4
ADDRGP4 cgs+35124
INDIRI4
SUBI4
ASGNI4
line 635
;635:		var[TSSTM_YFS] = TSS_RemapFlagStatus(cgs.blueflag);
ADDRGP4 cgs+35136
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 TSS_RemapFlagStatus
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 636
;636:		var[TSSTM_OFS] = TSS_RemapFlagStatus(cgs.redflag);
ADDRGP4 cgs+35132
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 TSS_RemapFlagStatus
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 637
;637:		if (i) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $420
line 638
;638:			var[TSSTM_YRS] = i - cgs.scores2;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+35128
INDIRI4
SUBI4
ASGNI4
line 639
;639:			var[TSSTM_ORS] = i - cgs.scores1;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+35124
INDIRI4
SUBI4
ASGNI4
line 640
;640:		}
line 641
;641:	}
ADDRGP4 $420
JUMPV
LABELV $419
line 642
;642:	else {
line 643
;643:		var[TSSTM_SCB] = cgs.scores1 - cgs.scores2;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 cgs+35124
INDIRI4
ADDRGP4 cgs+35128
INDIRI4
SUBI4
ASGNI4
line 644
;644:		var[TSSTM_YFS] = TSS_RemapFlagStatus(cgs.redflag);
ADDRGP4 cgs+35132
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 TSS_RemapFlagStatus
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 645
;645:		var[TSSTM_OFS] = TSS_RemapFlagStatus(cgs.blueflag);
ADDRGP4 cgs+35136
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 TSS_RemapFlagStatus
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 646
;646:		if (i) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $434
line 647
;647:			var[TSSTM_YRS] = i - cgs.scores1;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+35124
INDIRI4
SUBI4
ASGNI4
line 648
;648:			var[TSSTM_ORS] = i - cgs.scores2;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+35128
INDIRI4
SUBI4
ASGNI4
line 649
;649:		}
LABELV $434
line 650
;650:	}
LABELV $420
line 651
;651:	if (i) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $438
line 652
;652:		if (var[TSSTM_YRS] > 100) var[TSSTM_YRS] = 100;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
CNSTI4 100
LEI4 $440
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 100
ASGNI4
LABELV $440
line 653
;653:		if (var[TSSTM_ORS] > 100) var[TSSTM_ORS] = 100;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
CNSTI4 100
LEI4 $439
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 100
ASGNI4
line 654
;654:	}
ADDRGP4 $439
JUMPV
LABELV $438
line 655
;655:	else {
line 656
;656:		var[TSSTM_YRS] = 999;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 999
ASGNI4
line 657
;657:		var[TSSTM_ORS] = 999;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 999
ASGNI4
line 658
;658:	}
LABELV $439
line 659
;659:	var[TSSTM_RFAQ] = cg.tssRFAQ;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRGP4 cg+130216
INDIRI4
ASGNI4
line 660
;660:	var[TSSTM_RFDQ] = cg.tssRFDQ;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cg+130220
INDIRI4
ASGNI4
line 661
;661:	var[TSSTM_RFAP] = BG_TSS_Proportion(var[TSSTM_RFAQ], var[TSSTM_YTS], 100);
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 76
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 662
;662:	var[TSSTM_RFDP] = BG_TSS_Proportion(var[TSSTM_RFDQ], var[TSSTM_YTS], 100);
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 84
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 84
INDIRI4
ASGNI4
line 663
;663:	var[TSSTM_FIN] = cg.tssFightIntensity;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRGP4 cg+130208
INDIRI4
ASGNI4
line 664
;664:	var[TSSTM_TIDY] = cg.tssTidiness;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 cg+130200
INDIRI4
ASGNI4
line 665
;665:	var[TSSTM_AVST] = cg.tssAvgStamina;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 cg+130204
INDIRI4
ASGNI4
line 666
;666:	if (cgs.timelimit) {
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
EQI4 $449
line 667
;667:		var[TSSTM_TIME] = (cgs.timelimit - (cg.time - cgs.levelStartTime)) / 60000;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cgs+31476
INDIRI4
ADDRGP4 cg+107656
INDIRI4
ADDRGP4 cgs+35120
INDIRI4
SUBI4
SUBI4
CNSTI4 60000
DIVI4
ASGNI4
line 668
;668:	}
ADDRGP4 $450
JUMPV
LABELV $449
line 669
;669:	else {
line 670
;670:		var[TSSTM_TIME] = 999;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
CNSTI4 999
ASGNI4
line 671
;671:	}
LABELV $450
line 672
;672:	var[TSSTM_YFP] = cg.tssYFP;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRGP4 cg+130192
INDIRI4
ASGNI4
line 673
;673:	var[TSSTM_OFP] = cg.tssOFP;
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRGP4 cg+130196
INDIRI4
ASGNI4
line 674
;674:}
LABELV $344
endproc TSS_UpdateTacticalMeasures 88 12
proc CG_TSS_UpdateInterface 92 12
line 681
;675:
;676:/*
;677:=================
;678:CG_TSS_UpdateInterface
;679:=================
;680:*/
;681:static void CG_TSS_UpdateInterface(void) {
line 685
;682:	int i, n;
;683:	char buf[MAX_QPATH];
;684:
;685:	if (cg.tssLastUpdate + 250 > cg.time || !cg.snap) {
ADDRGP4 cg+128104
INDIRI4
CNSTI4 250
ADDI4
ADDRGP4 cg+107656
INDIRI4
GTI4 $463
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $458
LABELV $463
line 686
;686:		return;
ADDRGP4 $457
JUMPV
LABELV $458
line 688
;687:	}
;688:	cg.tssLastUpdate = cg.time;
ADDRGP4 cg+128104
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 690
;689:
;690:	if (BG_TSS_GetPlayerInfo(&cg.snap->ps, TSSPI_isValid)) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 BG_TSS_GetPlayerInfo
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $466
line 691
;691:		cg.tssActivated = qtrue;
ADDRGP4 cg+128224
CNSTI4 1
ASGNI4
line 692
;692:		cg.tssNavAid = BG_TSS_GetPlayerInfo(&cg.snap->ps, TSSPI_navAid);
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 76
ADDRGP4 BG_TSS_GetPlayerInfo
CALLI4
ASGNI4
ADDRGP4 cg+128228
ADDRLP4 76
INDIRI4
ASGNI4
line 693
;693:		cg.tssGroupLeaderAuthorization = (BG_TSS_GetPlayerInfo(&cg.snap->ps, TSSPI_groupMemberStatus) <= TSSGMS_temporaryLeader);
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 84
ADDRGP4 BG_TSS_GetPlayerInfo
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 3
GTI4 $475
ADDRLP4 80
CNSTI4 1
ASGNI4
ADDRGP4 $476
JUMPV
LABELV $475
ADDRLP4 80
CNSTI4 0
ASGNI4
LABELV $476
ADDRGP4 cg+128232
ADDRLP4 80
INDIRI4
ASGNI4
line 694
;694:		cg.tssGroupFormation = BG_TSS_GetPlayerInfo(&cg.snap->ps, TSSPI_groupFormation);
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 88
ADDRGP4 BG_TSS_GetPlayerInfo
CALLI4
ASGNI4
ADDRGP4 cg+128236
ADDRLP4 88
INDIRI4
ASGNI4
line 695
;695:	}
ADDRGP4 $467
JUMPV
LABELV $466
line 696
;696:	else {
line 697
;697:		cg.tssActivated = qfalse;
ADDRGP4 cg+128224
CNSTI4 0
ASGNI4
line 698
;698:		cg.tssNavAid = qfalse;
ADDRGP4 cg+128228
CNSTI4 0
ASGNI4
line 699
;699:		cg.tssGroupLeaderAuthorization = qfalse;
ADDRGP4 cg+128232
CNSTI4 0
ASGNI4
line 700
;700:		cg.tssGroupFormation = -1;
ADDRGP4 cg+128236
CNSTI4 -1
ASGNI4
line 701
;701:	}
LABELV $467
line 703
;702:
;703:	if (!cg.tssActivated && !cg.tssOnline) {
ADDRGP4 cg+128224
INDIRI4
CNSTI4 0
NEI4 $483
ADDRGP4 cg+128220
INDIRI4
CNSTI4 0
NEI4 $483
line 704
;704:		memset(cg.tssCurrentLeader, -1, sizeof(cg.tssCurrentLeader));
ADDRGP4 cg+130240
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 40
ARGI4
ADDRGP4 memset
CALLP4
pop
line 705
;705:		memset(cg.tssCurrentTotal, 0, sizeof(cg.tssCurrentTotal));
ADDRGP4 cg+130280
ARGP4
CNSTI4 0
ARGI4
CNSTI4 40
ARGI4
ADDRGP4 memset
CALLP4
pop
line 706
;706:		memset(cg.tssCurrentAlive, 0, sizeof(cg.tssCurrentAlive));
ADDRGP4 cg+130320
ARGP4
CNSTI4 0
ARGI4
CNSTI4 40
ARGI4
ADDRGP4 memset
CALLP4
pop
line 707
;707:		memset(cg.tssCurrentReady, 0, sizeof(cg.tssCurrentReady));
ADDRGP4 cg+130360
ARGP4
CNSTI4 0
ARGI4
CNSTI4 40
ARGI4
ADDRGP4 memset
CALLP4
pop
line 708
;708:	}
LABELV $483
line 710
;709:
;710:	strcpy(cg.tssTeamLeaderName, "---");
ADDRGP4 cg+128204
ARGP4
ADDRGP4 $496
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 712
;711:
;712:	n = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 713
;713:	for (i = 0; i < MAX_CLIENTS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $497
line 714
;714:		if (!cgs.clientinfo[i].infoValid) continue;
ADDRLP4 0
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
INDIRI4
CNSTI4 0
NEI4 $501
ADDRGP4 $498
JUMPV
LABELV $501
line 715
;715:		if (cgs.clientinfo[i].team != cgs.clientinfo[cg.clientNum].team) {
ADDRLP4 0
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+68
ADDP4
INDIRI4
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+68
ADDP4
INDIRI4
EQI4 $504
line 716
;716:			continue;
ADDRGP4 $498
JUMPV
LABELV $504
line 719
;717:		}
;718:
;719:		cg.tssTeamMateList[n] = &cg.tssTeamMateNames[n][0];
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129428
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg+128404
ADDP4
ASGNP4
line 720
;720:		cg.tssTeamMatesClientNum[n] = i;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129684
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 722
;721:		
;722:		Q_strncpyz(buf, cgs.clientinfo[i].name, sizeof(buf));
ADDRLP4 8
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+4
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 723
;723:		Q_CleanStr(buf);
ADDRLP4 8
ARGP4
ADDRGP4 Q_CleanStr
CALLP4
pop
line 724
;724:		Q_strncpyz(cg.tssTeamMateNames[n], buf, 16);
ADDRLP4 4
INDIRI4
CNSTI4 4
LSHI4
ADDRGP4 cg+128404
ADDP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 726
;725:
;726:		if (cgs.clientinfo[i].teamLeader) {
ADDRLP4 0
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $517
line 727
;727:			strcpy(cg.tssTeamLeaderName, cg.tssTeamMateList[n]);
ADDRGP4 cg+128204
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129428
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 728
;728:		}
LABELV $517
line 730
;729:
;730:		n++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 731
;731:	}
LABELV $498
line 713
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $497
line 733
;732:
;733:	TSS_UpdateTacticalMeasures();
ADDRGP4 TSS_UpdateTacticalMeasures
CALLV
pop
line 735
;734:
;735:	if (cgs.gametype < GT_TEAM) return;
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $523
ADDRGP4 $457
JUMPV
LABELV $523
line 738
;736:
;737:	// Ouch! The array addressing below is really a fast, dirty hack!
;738:	for (i = 0; i < 3 * MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $526
line 741
;739:		int j;
;740:
;741:		cg.tssMultiMandate[0][i] = qfalse;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130072
ADDP4
CNSTI4 0
ASGNI4
line 742
;742:		if (cg.tssGroupLeader[0][i] < 0) continue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952
ADDP4
INDIRI4
CNSTI4 0
GEI4 $531
ADDRGP4 $527
JUMPV
LABELV $531
line 744
;743:
;744:		for (j = i + 1; j < 3 * MAX_GROUPS; j++) {
ADDRLP4 76
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $537
JUMPV
LABELV $534
line 745
;745:			if (cg.tssGroupLeader[0][i] == cg.tssGroupLeader[0][j]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952
ADDP4
INDIRI4
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129952
ADDP4
INDIRI4
NEI4 $538
line 746
;746:				cg.tssMultiMandate[0][i] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130072
ADDP4
CNSTI4 1
ASGNI4
line 747
;747:				cg.tssMultiMandate[0][j] = qtrue;
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130072
ADDP4
CNSTI4 1
ASGNI4
line 748
;748:			}
LABELV $538
line 749
;749:		}
LABELV $535
line 744
ADDRLP4 76
ADDRLP4 76
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $537
ADDRLP4 76
INDIRI4
CNSTI4 30
LTI4 $534
line 750
;750:	}
LABELV $527
line 738
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 30
LTI4 $526
line 751
;751:}
LABELV $457
endproc CG_TSS_UpdateInterface 92 12
proc TSS_CreateStrategy 16 16
line 759
;752:
;753:
;754:/*
;755:=================
;756:TSS_CreateStrategy
;757:=================
;758:*/
;759:static void TSS_CreateStrategy(void) {
line 762
;760:	tss_strategyPaletteSlot_t* pslot;
;761:
;762:	if (cg.tssPalette.numEntries >= TSS_MAX_STRATEGIES_PER_PALETTE) return;
ADDRGP4 cg+131688
INDIRI4
CNSTI4 26
LTI4 $545
ADDRGP4 $544
JUMPV
LABELV $545
line 764
;763:
;764:	pslot = &cg.tssPalette.slots[cg.tssPalette.numEntries];
ADDRLP4 0
ADDRGP4 cg+131688
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ASGNP4
line 765
;765:	if (!CG_TSS_CreateNewStrategy(pslot)) return;
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_TSS_CreateNewStrategy
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $551
ADDRGP4 $544
JUMPV
LABELV $551
line 767
;766:
;767:	cg.tssPalette.numEntries++;
ADDRLP4 8
ADDRGP4 cg+131688
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 768
;768:	TSS_SelectStrategy(pslot);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
line 770
;769:
;770:	TSS_SetStockWindow(0, CG_TSS_GetSortIndexByID(pslot->slot->id, cg.tssStrategyStockSortOrder));
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_TSS_GetSortIndexByID
CALLI4
ASGNI4
CNSTI4 0
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 TSS_SetStockWindow
CALLI4
pop
line 771
;771:	Com_sprintf(searchIDBuf, sizeof(searchIDBuf), "%d", pslot->slot->id);
ADDRGP4 searchIDBuf
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 $555
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 772
;772:}
LABELV $544
endproc TSS_CreateStrategy 16 16
proc TSS_DuplicateStrategy 16 12
line 779
;773:
;774:/*
;775:=================
;776:TSS_DuplicateStrategy
;777:=================
;778:*/
;779:static void TSS_DuplicateStrategy(void) {
line 782
;780:	tss_strategyPaletteSlot_t* original;
;781:
;782:	if (!cg.tssSelectedStrategy) return;
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $557
ADDRGP4 $556
JUMPV
LABELV $557
line 784
;783:
;784:	original = cg.tssSelectedStrategy;
ADDRLP4 0
ADDRGP4 cg+131684
INDIRP4
ASGNP4
line 785
;785:	TSS_CreateStrategy();
ADDRGP4 TSS_CreateStrategy
CALLV
pop
line 786
;786:	if (cg.tssSelectedStrategy && cg.tssSelectedStrategy != original) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $561
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
EQU4 $561
line 789
;787:		int sortIndex;
;788:
;789:		strcpy(cg.tssSelectedStrategy->slot->tssname, original->slot->tssname);
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 790
;790:		sortIndex = CG_TSS_GetSortIndexByID(cg.tssSelectedStrategy->slot->id, cg.tssStrategyStockSortOrder);
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_TSS_GetSortIndexByID
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 791
;791:		sortIndex = CG_TSS_StrategyNameChanged(sortIndex, cg.tssStrategyStockSortOrder);
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_TSS_StrategyNameChanged
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 792
;792:		TSS_SetStockWindow(0, sortIndex);
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 TSS_SetStockWindow
CALLI4
pop
line 794
;793:
;794:		memcpy(cg.tssSelectedStrategy->strategy, original->strategy, sizeof(tss_strategy_t));
ADDRGP4 cg+131684
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 30388
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 795
;795:		TSS_CancelChanges();	// update work copy
ADDRGP4 TSS_CancelChanges
CALLV
pop
line 796
;796:	}
LABELV $561
line 797
;797:}
LABELV $556
endproc TSS_DuplicateStrategy 16 12
proc TSS_InsertDirective 12 12
line 804
;798:
;799:/*
;800:=================
;801:TSS_InsertDirective
;802:=================
;803:*/
;804:static void TSS_InsertDirective(tss_strategy_t* strategy, int d) {
line 805
;805:	if (!strategy) return;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $571
ADDRGP4 $570
JUMPV
LABELV $571
line 806
;806:	if (d <= 0 || d > TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY) return;
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $575
ADDRLP4 0
INDIRI4
CNSTI4 26
LEI4 $573
LABELV $575
ADDRGP4 $570
JUMPV
LABELV $573
line 808
;807:
;808:	memmove(
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 1120
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1120
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
ADDP4
ARGP4
CNSTI4 26
ADDRLP4 4
INDIRI4
SUBI4
CVIU4 4
CNSTU4 1120
MULU4
CVUI4 4
ARGI4
ADDRGP4 memmove
CALLP4
pop
line 812
;809:		&strategy->directives[d+1], &strategy->directives[d],
;810:		sizeof(tss_directive_t) * (TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY - d)
;811:	);
;812:	TSS_ClearDirective(strategy, d);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 TSS_ClearDirective
CALLV
pop
line 813
;813:}
LABELV $570
endproc TSS_InsertDirective 12 12
proc TSS_DeleteDirective 12 12
line 820
;814:
;815:/*
;816:=================
;817:TSS_DeleteDirective
;818:=================
;819:*/
;820:static void TSS_DeleteDirective(tss_strategy_t* strategy, int d) {
line 821
;821:	if (!strategy) return;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $577
ADDRGP4 $576
JUMPV
LABELV $577
line 822
;822:	if (d <= 0 || d > TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY) return;
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $581
ADDRLP4 0
INDIRI4
CNSTI4 26
LEI4 $579
LABELV $581
ADDRGP4 $576
JUMPV
LABELV $579
line 824
;823:
;824:	memmove(
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 1120
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1120
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
CNSTI4 26
ADDRLP4 4
INDIRI4
SUBI4
CVIU4 4
CNSTU4 1120
MULU4
CVUI4 4
ARGI4
ADDRGP4 memmove
CALLP4
pop
line 828
;825:		&strategy->directives[d], &strategy->directives[d+1],
;826:		sizeof(tss_directive_t) * (TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY - d)
;827:	);
;828:	TSS_ClearDirective(strategy, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 26
ARGI4
ADDRGP4 TSS_ClearDirective
CALLV
pop
line 829
;829:}
LABELV $576
endproc TSS_DeleteDirective 12 12
proc TSS_EvalPredicate 56 0
line 836
;830:
;831:/*
;832:=================
;833:TSS_EvalPredicate
;834:=================
;835:*/
;836:static qboolean TSS_EvalPredicate(tss_tacticalPredicate_t* predicate, tss_tacticalMeasures_t* measures) {
line 837
;837:	if (predicate->magnitude == TSSTM_no) return qtrue;
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $583
CNSTI4 1
RETI4
ADDRGP4 $582
JUMPV
LABELV $583
line 839
;838:
;839:	switch (predicate->op) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $585
ADDRLP4 0
INDIRI4
CNSTI4 5
GTI4 $585
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $612
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $612
address $588
address $592
address $596
address $600
address $604
address $608
code
LABELV $588
line 841
;840:	case TSSPROP_varLowerThanLimit:
;841:		return measures->var[predicate->magnitude] < predicate->limit;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
GEI4 $590
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $591
JUMPV
LABELV $590
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $591
ADDRLP4 8
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $592
line 843
;842:	case TSSPROP_varLowerThanOrEqualToLimit:
;843:		return measures->var[predicate->magnitude] <= predicate->limit;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
GTI4 $594
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRGP4 $595
JUMPV
LABELV $594
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $595
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $596
line 845
;844:	case TSSPROP_varHigherThanOrEqualToLimit:
;845:		return measures->var[predicate->magnitude] >= predicate->limit;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $598
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $599
JUMPV
LABELV $598
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $599
ADDRLP4 24
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $600
line 847
;846:	case TSSPROP_varHigherThanLimit:
;847:		return measures->var[predicate->magnitude] > predicate->limit;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LEI4 $602
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRGP4 $603
JUMPV
LABELV $602
ADDRLP4 32
CNSTI4 0
ASGNI4
LABELV $603
ADDRLP4 32
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $604
line 849
;848:	case TSSPROP_varEqualToLimit:
;849:		return measures->var[predicate->magnitude] == predicate->limit;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
NEI4 $606
ADDRLP4 40
CNSTI4 1
ASGNI4
ADDRGP4 $607
JUMPV
LABELV $606
ADDRLP4 40
CNSTI4 0
ASGNI4
LABELV $607
ADDRLP4 40
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $608
line 851
;850:	case TSSPROP_varUnequalToLimit:
;851:		return measures->var[predicate->magnitude] != predicate->limit;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
EQI4 $610
ADDRLP4 48
CNSTI4 1
ASGNI4
ADDRGP4 $611
JUMPV
LABELV $610
ADDRLP4 48
CNSTI4 0
ASGNI4
LABELV $611
ADDRLP4 48
INDIRI4
RETI4
ADDRGP4 $582
JUMPV
LABELV $585
line 853
;852:	default:	// should not happen
;853:		return qfalse;
CNSTI4 0
RETI4
LABELV $582
endproc TSS_EvalPredicate 56 0
proc TSS_EvalClause 8 8
line 862
;854:	}
;855:}
;856:
;857:/*
;858:=================
;859:TSS_EvalClause
;860:=================
;861:*/
;862:static qboolean TSS_EvalClause(tss_clause_t* clause, tss_tacticalMeasures_t* measures) {
line 865
;863:	int i;
;864:
;865:	if (!clause->inUse) return qfalse;
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $614
CNSTI4 0
RETI4
ADDRGP4 $613
JUMPV
LABELV $614
line 867
;866:
;867:	for (i = 0; i < TSS_PREDICATES_PER_CLAUSE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $616
line 868
;868:		if (!TSS_EvalPredicate(&clause->predicate[i], measures)) return qfalse;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 TSS_EvalPredicate
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $620
CNSTI4 0
RETI4
ADDRGP4 $613
JUMPV
LABELV $620
line 869
;869:	}
LABELV $617
line 867
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $616
line 870
;870:	return qtrue;
CNSTI4 1
RETI4
LABELV $613
endproc TSS_EvalClause 8 8
proc TSS_EvalOccasion 8 8
line 878
;871:}
;872:
;873:/*
;874:=================
;875:TSS_EvalOccasion
;876:=================
;877:*/
;878:static qboolean TSS_EvalOccasion(tss_occasion_t* occasion, tss_tacticalMeasures_t* measures) {
line 881
;879:	int i;
;880:
;881:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $623
line 882
;882:		if (TSS_EvalClause(&occasion->clause[i], measures)) return qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 TSS_EvalClause
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $627
CNSTI4 1
RETI4
ADDRGP4 $622
JUMPV
LABELV $627
line 883
;883:	}
LABELV $624
line 881
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LTI4 $623
line 884
;884:	return qfalse;
CNSTI4 0
RETI4
LABELV $622
endproc TSS_EvalOccasion 8 8
proc TSS_DetermineCondition 12 8
line 892
;885:}
;886:
;887:/*
;888:=================
;889:TSS_DetermineCondition
;890:=================
;891:*/
;892:static int TSS_DetermineCondition(tss_strategy_t* strategy, tss_tacticalMeasures_t* measures) {
line 895
;893:	int i;
;894:
;895:	for (i = 1; i <= TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $630
line 898
;896:		tss_directive_t* directive;
;897:
;898:		directive = &strategy->directives[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
ASGNP4
line 899
;899:		if (!directive->inUse) continue;
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $634
ADDRGP4 $631
JUMPV
LABELV $634
line 901
;900:
;901:		if (!TSS_EvalOccasion(&directive->occasion, measures)) continue;
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_EvalOccasion
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $636
ADDRGP4 $631
JUMPV
LABELV $636
line 902
;902:		return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $629
JUMPV
LABELV $631
line 895
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LEI4 $630
line 904
;903:	}
;904:	return 0;
CNSTI4 0
RETI4
LABELV $629
endproc TSS_DetermineCondition 12 8
export CG_TSS_Update
proc CG_TSS_Update 4 8
line 912
;905:}
;906:
;907:/*
;908:=================
;909:CG_TSS_Update
;910:=================
;911:*/
;912:void CG_TSS_Update(void) {
line 913
;913:	TSS_UpdateTacticalMeasures();
ADDRGP4 TSS_UpdateTacticalMeasures
CALLV
pop
line 915
;914:
;915:	if (cg.tssUtilizedStrategy && cg.tssUtilizedStrategy->strategy->autoCondition) {
ADDRGP4 cg+131680
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $639
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $639
line 916
;916:		cg.tssUtilizedStrategy->condition = TSS_DetermineCondition(
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 cg+130400
ARGP4
ADDRLP4 0
ADDRGP4 TSS_DetermineCondition
CALLI4
ASGNI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 919
;917:			cg.tssUtilizedStrategy->strategy, &cg.tssMeasures
;918:		);
;919:	}
LABELV $639
line 920
;920:}
LABELV $638
endproc CG_TSS_Update 4 8
data
align 4
LABELV $684
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
code
proc CG_TSS_Print 40 16
line 927
;921:
;922:/*
;923:=================
;924:CG_TSS_Print
;925:=================
;926:*/
;927:static void CG_TSS_Print(const char* text, float* color) {
line 928
;928:	if (!text) return;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $650
ADDRGP4 $646
JUMPV
LABELV $649
line 930
;929:
;930:	while (*text) {
line 934
;931:		int x, y;
;932:		char buf[2];
;933:
;934:		switch (*text) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 -112
EQI4 $668
ADDRLP4 12
INDIRI4
CNSTI4 -111
EQI4 $672
ADDRLP4 12
INDIRI4
CNSTI4 -110
EQI4 $675
ADDRLP4 12
INDIRI4
CNSTI4 -112
LTI4 $652
LABELV $686
ADDRLP4 12
INDIRI4
CNSTI4 10
EQI4 $655
ADDRGP4 $652
JUMPV
LABELV $655
line 936
;935:		case '\n':
;936:			if (cg.tssCursorLine == cg.tssPrintLine) {
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
NEI4 $656
line 937
;937:				if (cg.tssPrintCol >= TSS_W / SMALLCHAR_WIDTH) {
ADDRGP4 cg+128108
INDIRI4
CNSTI4 68
LTI4 $660
line 938
;938:					cg.tssPrintCol = TSS_W / SMALLCHAR_WIDTH - 1;
ADDRGP4 cg+128108
CNSTI4 67
ASGNI4
line 939
;939:				}
LABELV $660
line 940
;940:				cg.tssCursorLineEnd = cg.tssPrintCol;
ADDRGP4 cg+128124
ADDRGP4 cg+128108
INDIRI4
ASGNI4
line 941
;941:			}
LABELV $656
line 942
;942:			cg.tssPrintCol = 0;
ADDRGP4 cg+128108
CNSTI4 0
ASGNI4
line 943
;943:			cg.tssPrintLine++;
ADDRLP4 20
ADDRGP4 cg+128112
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 944
;944:			break;
ADDRGP4 $653
JUMPV
LABELV $668
line 946
;945:		case TSS_LOWER_OR_EQUAL_CHAR:
;946:			CG_TSS_Print("<", color);
ADDRGP4 $669
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 947
;947:			cg.tssPrintCol--;
ADDRLP4 24
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 948
;948:			CG_TSS_Print("\x08", color);
ADDRGP4 $671
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 949
;949:			break;
ADDRGP4 $653
JUMPV
LABELV $672
line 951
;950:		case TSS_GREATER_OR_EQUAL_CHAR:
;951:			CG_TSS_Print(">", color);
ADDRGP4 $673
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 952
;952:			cg.tssPrintCol--;
ADDRLP4 28
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 953
;953:			CG_TSS_Print("\x08", color);
ADDRGP4 $671
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 954
;954:			break;
ADDRGP4 $653
JUMPV
LABELV $675
line 956
;955:		case TSS_UNEQUAL_CHAR:
;956:			CG_TSS_Print("=", color);
ADDRGP4 $676
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 957
;957:			cg.tssPrintCol--;
ADDRLP4 32
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 958
;958:			CG_TSS_Print("/", color);
ADDRGP4 $678
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 959
;959:			break;
ADDRGP4 $653
JUMPV
LABELV $652
line 961
;960:		default:
;961:			x = TSS_X + SMALLCHAR_WIDTH * cg.tssPrintCol;
ADDRLP4 4
ADDRGP4 cg+128108
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 48
ADDI4
ASGNI4
line 962
;962:			y = TSS_Y + SMALLCHAR_HEIGHT * cg.tssPrintLine;
ADDRLP4 8
ADDRGP4 cg+128112
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
ASGNI4
line 963
;963:			buf[0] = *text;
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRI1
ASGNI1
line 964
;964:			buf[1] = 0;
ADDRLP4 0+1
CNSTI1 0
ASGNI1
line 965
;965:			if (color) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $682
line 966
;966:				CG_DrawSmallStringColor(x, y, buf, color);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 967
;967:			}
ADDRGP4 $683
JUMPV
LABELV $682
line 968
;968:			else {
line 971
;969:				static vec4_t normalColor = {0.5, 0.5, 0.5, 1};
;970:
;971:				CG_DrawSmallStringColor(x, y, buf, normalColor);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 $684
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 972
;972:			}
LABELV $683
line 973
;973:			cg.tssPrintCol++;
ADDRLP4 36
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 974
;974:		}
LABELV $653
line 975
;975:		text++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 976
;976:	}
LABELV $650
line 930
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $649
line 977
;977:}
LABELV $646
endproc CG_TSS_Print 40 16
proc TSS_Print 0 8
line 984
;978:
;979:/*
;980:=================
;981:TSS_Print
;982:=================
;983:*/
;984:static void TSS_Print(const char* text) {
line 985
;985:	CG_TSS_Print(text, NULL);
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 986
;986:}
LABELV $687
endproc TSS_Print 0 8
proc TSS_FillLine 8 4
ADDRFP4 0
ADDRFP4 0
INDIRI4
CVII1 4
ASGNI1
line 993
;987:
;988:/*
;989:=================
;990:TSS_FillLine
;991:=================
;992:*/
;993:static void TSS_FillLine(char c) {
line 995
;994:	char buf[2];
;995:	const int end = TSS_W / SMALLCHAR_WIDTH;
ADDRLP4 4
CNSTI4 68
ASGNI4
line 997
;996:
;997:	buf[0] = c;
ADDRLP4 0
ADDRFP4 0
INDIRI1
ASGNI1
line 998
;998:	buf[1] = 0;
ADDRLP4 0+1
CNSTI1 0
ASGNI1
ADDRGP4 $691
JUMPV
LABELV $690
line 1000
;999:
;1000:	while (cg.tssPrintCol < end) {
line 1001
;1001:		TSS_Print(buf);
ADDRLP4 0
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1002
;1002:	}
LABELV $691
line 1000
ADDRGP4 cg+128108
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $690
line 1003
;1003:	TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1004
;1004:}
LABELV $688
endproc TSS_FillLine 8 4
proc CG_TSS_MapStr 4 0
line 1015
;1005:
;1006:/*
;1007:=================
;1008:CG_TSS_MapStr
;1009:=================
;1010:*/
;1011:static const char* CG_TSS_MapStr(
;1012:	int par, int parmin,
;1013:	const char* const* translationTable1,		// may be NULL if parmin >= 0
;1014:	const char* const* translationTable2		// may be NULL
;1015:) {
line 1018
;1016:	const char* str;
;1017:
;1018:	str = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1019
;1019:	if (translationTable2 == TSS_SIMPLE_TEXT) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 1
NEU4 $696
line 1020
;1020:		str = (const char*) translationTable1;
ADDRLP4 0
ADDRFP4 8
INDIRP4
ASGNP4
line 1021
;1021:	}
ADDRGP4 $697
JUMPV
LABELV $696
line 1022
;1022:	else if (par < 0 || !translationTable2) {
ADDRFP4 0
INDIRI4
CNSTI4 0
LTI4 $700
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $698
LABELV $700
line 1023
;1023:		if (translationTable1) str = translationTable1[par - parmin];
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $699
ADDRLP4 0
ADDRFP4 0
INDIRI4
ADDRFP4 4
INDIRI4
SUBI4
CNSTI4 2
LSHI4
ADDRFP4 8
INDIRP4
ADDP4
INDIRP4
ASGNP4
line 1024
;1024:	}
ADDRGP4 $699
JUMPV
LABELV $698
line 1025
;1025:	else {
line 1026
;1026:		str = translationTable2[par];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRP4
ASGNP4
line 1027
;1027:	}
LABELV $699
LABELV $697
line 1029
;1028:
;1029:	if (!str) str = "";
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $703
ADDRLP4 0
ADDRGP4 $705
ASGNP4
LABELV $703
line 1030
;1030:	return str;
ADDRLP4 0
INDIRP4
RETP4
LABELV $695
endproc CG_TSS_MapStr 4 0
data
align 4
LABELV parameterInUse
byte 4 1
align 4
LABELV parameterChangeNotifier
byte 4 0
align 4
LABELV textParameterChangeNotifier
byte 4 0
align 4
LABELV parameterReversedHome
byte 4 0
bss
align 4
LABELV $711
skip 4
code
proc CG_TSS_Parameter 172 20
line 1049
;1031:}
;1032:
;1033:static float cursorC;
;1034:static qboolean parameterInUse = qtrue;
;1035:static qboolean* parameterChangeNotifier = NULL;
;1036:static qboolean* textParameterChangeNotifier = NULL;
;1037:static qboolean parameterReversedHome = qfalse;
;1038:
;1039:/*
;1040:=================
;1041:CG_TSS_Parameter
;1042:=================
;1043:*/
;1044:static qboolean CG_TSS_Parameter(
;1045:	int* parameter, int parmin, int parmax,
;1046:	const char* const* translationTable1,
;1047:	const char* const* translationTable2,
;1048:	int width
;1049:) {
line 1056
;1050:	vec4_t color;
;1051:	int buttonID;
;1052:	char* textField;
;1053:	char buf[128];
;1054:	qboolean isActive;
;1055:
;1056:	isActive =qfalse;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 1057
;1057:	if (width > 127) width = 127;
ADDRFP4 20
INDIRI4
CNSTI4 127
LEI4 $707
ADDRFP4 20
CNSTI4 127
ASGNI4
LABELV $707
line 1059
;1058:
;1059:	textField = NULL;
ADDRLP4 16
CNSTP4 0
ASGNP4
line 1060
;1060:	if (parameter == TSS_BUTTON) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 1
NEU4 $709
line 1063
;1061:		static int dummyParameter;
;1062:
;1063:		parameter = &dummyParameter;
ADDRFP4 0
ADDRGP4 $711
ASGNP4
line 1064
;1064:		buttonID = parmin;
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
line 1065
;1065:		parmin = 0;
ADDRFP4 4
CNSTI4 0
ASGNI4
line 1066
;1066:		parmax = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 1067
;1067:	}
ADDRGP4 $710
JUMPV
LABELV $709
line 1068
;1068:	else {
line 1069
;1069:		buttonID = -1;
ADDRLP4 20
CNSTI4 -1
ASGNI4
line 1070
;1070:		if (parmin > parmax) {
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $712
line 1071
;1071:			textField = (char*) parameter;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
line 1072
;1072:			parameter = NULL;
ADDRFP4 0
CNSTP4 0
ASGNP4
line 1073
;1073:			parmin = 0;
ADDRFP4 4
CNSTI4 0
ASGNI4
line 1074
;1074:			parmax = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 1075
;1075:			if (width <= 0) width = TSS_NAME_SIZE;
ADDRFP4 20
INDIRI4
CNSTI4 0
GTI4 $714
ADDRFP4 20
CNSTI4 32
ASGNI4
LABELV $714
line 1076
;1076:		}
LABELV $712
line 1077
;1077:	}
LABELV $710
line 1079
;1078:
;1079:	if (width <= 0) {
ADDRFP4 20
INDIRI4
CNSTI4 0
GTI4 $716
line 1080
;1080:		if (translationTable1 || translationTable2) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $720
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $718
LABELV $720
line 1081
;1081:			if (width == 0) {
ADDRFP4 20
INDIRI4
CNSTI4 0
NEI4 $721
line 1084
;1082:				int i;
;1083:
;1084:				for (i = parmin; i <= parmax; i++) {
ADDRLP4 156
ADDRFP4 4
INDIRI4
ASGNI4
ADDRGP4 $726
JUMPV
LABELV $723
line 1087
;1085:					int size;
;1086:	
;1087:					size = strlen(CG_TSS_MapStr(i, parmin, translationTable1, translationTable2));
ADDRLP4 156
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 CG_TSS_MapStr
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 168
INDIRI4
ASGNI4
line 1088
;1088:					if (size > width) width = size;
ADDRLP4 160
INDIRI4
ADDRFP4 20
INDIRI4
LEI4 $727
ADDRFP4 20
ADDRLP4 160
INDIRI4
ASGNI4
LABELV $727
line 1089
;1089:				}
LABELV $724
line 1084
ADDRLP4 156
ADDRLP4 156
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $726
ADDRLP4 156
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $723
line 1090
;1090:			}
ADDRGP4 $719
JUMPV
LABELV $721
line 1091
;1091:			else {
line 1092
;1092:				width = strlen(CG_TSS_MapStr(*parameter, parmin, translationTable1, translationTable2));
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 CG_TSS_MapStr
CALLP4
ASGNP4
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRFP4 20
ADDRLP4 160
INDIRI4
ASGNI4
line 1093
;1093:			}
line 1094
;1094:		}
ADDRGP4 $719
JUMPV
LABELV $718
line 1095
;1095:		else {
line 1096
;1096:			if (abs(parmin) < 10 && abs(parmax) < 10) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 156
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 10
GEI4 $729
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 160
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 10
GEI4 $729
line 1097
;1097:				width = 1;
ADDRFP4 20
CNSTI4 1
ASGNI4
line 1098
;1098:			}
ADDRGP4 $730
JUMPV
LABELV $729
line 1099
;1099:			else if (abs(parmin) < 100 && abs(parmax) < 100) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 100
GEI4 $731
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 100
GEI4 $731
line 1100
;1100:				width = 2;
ADDRFP4 20
CNSTI4 2
ASGNI4
line 1101
;1101:			}
ADDRGP4 $732
JUMPV
LABELV $731
line 1102
;1102:			else {
line 1103
;1103:				width = 3;
ADDRFP4 20
CNSTI4 3
ASGNI4
line 1104
;1104:			}
LABELV $732
LABELV $730
line 1105
;1105:			if (parmin < 0) width++;
ADDRFP4 4
INDIRI4
CNSTI4 0
GEI4 $733
ADDRFP4 20
ADDRFP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $733
line 1106
;1106:		}
LABELV $719
line 1107
;1107:	}
LABELV $716
line 1110
;1108:
;1109:	// draw button background
;1110:	if (buttonID >= 0) {
ADDRLP4 20
INDIRI4
CNSTI4 0
LTI4 $735
line 1111
;1111:		color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1112
;1112:		color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1113
;1113:		color[2] = 1;
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1114
;1114:		color[3] = 0.17;
ADDRLP4 0+12
CNSTF4 1043207291
ASGNF4
line 1115
;1115:		CG_FillRect(
ADDRGP4 cg+128108
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 48
ADDI4
CVIF4 4
ARGF4
ADDRGP4 cg+128112
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
CNSTI4 1
ADDI4
CVIF4 4
ARGF4
ADDRFP4 20
INDIRI4
CNSTI4 3
LSHI4
CVIF4 4
ARGF4
CNSTF4 1097859072
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1121
;1116:			TSS_X + SMALLCHAR_WIDTH*cg.tssPrintCol,
;1117:			TSS_Y + SMALLCHAR_HEIGHT*cg.tssPrintLine + 1,
;1118:			SMALLCHAR_WIDTH * width, SMALLCHAR_HEIGHT - 1,
;1119:			color
;1120:		);
;1121:	}
LABELV $735
line 1123
;1122:	// draw text field background
;1123:	if (textField) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $742
line 1124
;1124:		color[0] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 1125
;1125:		color[1] = 0;
ADDRLP4 0+4
CNSTF4 0
ASGNF4
line 1126
;1126:		color[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1127
;1127:		color[3] = 0.3;
ADDRLP4 0+12
CNSTF4 1050253722
ASGNF4
line 1128
;1128:		CG_FillRect(
ADDRGP4 cg+128108
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 48
ADDI4
CVIF4 4
ARGF4
ADDRGP4 cg+128112
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
CNSTI4 1
ADDI4
CVIF4 4
ARGF4
ADDRFP4 20
INDIRI4
CNSTI4 3
LSHI4
CVIF4 4
ARGF4
CNSTF4 1097859072
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1134
;1129:			TSS_X + SMALLCHAR_WIDTH*cg.tssPrintCol,
;1130:			TSS_Y + SMALLCHAR_HEIGHT*cg.tssPrintLine + 1,
;1131:			SMALLCHAR_WIDTH * width, SMALLCHAR_HEIGHT - 1,
;1132:			color
;1133:		);
;1134:	}
LABELV $742
line 1135
;1135:	if (buttonID >= 0 || textField) {
ADDRLP4 20
INDIRI4
CNSTI4 0
GEI4 $751
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $749
LABELV $751
line 1138
;1136:		// redraw cursor if needed
;1137:		if (
;1138:			cg.tssPrintLine == cg.tssCursorLine &&
ADDRGP4 cg+128112
INDIRI4
ADDRGP4 cg+128120
INDIRI4
NEI4 $752
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
LTI4 $752
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
ADDRFP4 20
INDIRI4
ADDI4
GEI4 $752
line 1141
;1139:			cg.tssCursorCol >= cg.tssPrintCol &&
;1140:			cg.tssCursorCol < cg.tssPrintCol + width
;1141:		) {
line 1142
;1142:			color[0] = cursorC;
ADDRLP4 0
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1143
;1143:			color[1] = cursorC;
ADDRLP4 0+4
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1144
;1144:			color[2] = cursorC;
ADDRLP4 0+8
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1145
;1145:			color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1146
;1146:			CG_FillRect(
ADDRGP4 cg+128116
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 48
ADDI4
CVIF4 4
ARGF4
ADDRGP4 cg+128120
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
CVIF4 4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1152
;1147:				TSS_X + SMALLCHAR_WIDTH * cg.tssCursorCol,
;1148:				TSS_Y + SMALLCHAR_HEIGHT * cg.tssCursorLine,
;1149:				SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT,
;1150:				color
;1151:			);
;1152:		}
LABELV $752
line 1153
;1153:	}
LABELV $749
line 1156
;1154:
;1155:	// determine color and active variable
;1156:	color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1157
;1157:	color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1158
;1158:	color[2] = 1;
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1159
;1159:	color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1160
;1160:	if (!parameterInUse) {
ADDRGP4 parameterInUse
INDIRI4
CNSTI4 0
NEI4 $768
line 1161
;1161:		color[0] = 0.5;
ADDRLP4 0
CNSTF4 1056964608
ASGNF4
line 1162
;1162:		color[1] = 0.5;
ADDRLP4 0+4
CNSTF4 1056964608
ASGNF4
line 1163
;1163:		color[2] = 0.5;
ADDRLP4 0+8
CNSTF4 1056964608
ASGNF4
line 1164
;1164:		color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1165
;1165:	}
ADDRGP4 $769
JUMPV
LABELV $768
line 1167
;1166:	else if (
;1167:		cg.tssCursorLine == cg.tssPrintLine &&
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
NEI4 $773
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
LTI4 $773
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
ADDRFP4 20
INDIRI4
ADDI4
GEI4 $773
line 1170
;1168:		cg.tssCursorCol >= cg.tssPrintCol &&
;1169:		cg.tssCursorCol < cg.tssPrintCol + width
;1170:	) {
line 1171
;1171:		color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1172
;1172:		color[1] = 0.7;
ADDRLP4 0+4
CNSTF4 1060320051
ASGNF4
line 1173
;1173:		color[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1174
;1174:		color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 1175
;1175:		cg.tssCurrentValue = parameter;
ADDRGP4 cg+128132
ADDRFP4 0
INDIRP4
ASGNP4
line 1176
;1176:		cg.tssCurrentTextField = textField;
ADDRGP4 cg+128128
ADDRLP4 16
INDIRP4
ASGNP4
line 1177
;1177:		cg.tssCurrentValueMin = parmin;
ADDRGP4 cg+128148
ADDRFP4 4
INDIRI4
ASGNI4
line 1178
;1178:		cg.tssCurrentValueMax = parmax;
ADDRGP4 cg+128152
ADDRFP4 8
INDIRI4
ASGNI4
line 1179
;1179:		cg.tssCurrentValueReversedHome = parameterReversedHome;
ADDRGP4 cg+128156
ADDRGP4 parameterReversedHome
INDIRI4
ASGNI4
line 1180
;1180:		cg.tssButtonID = buttonID;
ADDRGP4 cg+128144
ADDRLP4 20
INDIRI4
ASGNI4
line 1181
;1181:		cg.tssCurrentParStartCol = cg.tssPrintCol;
ADDRGP4 cg+128160
ADDRGP4 cg+128108
INDIRI4
ASGNI4
line 1182
;1182:		cg.tssCurrentParWidth = width;
ADDRGP4 cg+128164
ADDRFP4 20
INDIRI4
ASGNI4
line 1183
;1183:		cg.tssCurrentValueChanged = parameterChangeNotifier;
ADDRGP4 cg+128136
ADDRGP4 parameterChangeNotifier
INDIRP4
ASGNP4
line 1184
;1184:		cg.tssCurrentTextFieldChanged = textParameterChangeNotifier;
ADDRGP4 cg+128140
ADDRGP4 textParameterChangeNotifier
INDIRP4
ASGNP4
line 1185
;1185:		isActive = qtrue;
ADDRLP4 24
CNSTI4 1
ASGNI4
line 1186
;1186:	}
LABELV $773
LABELV $769
line 1190
;1187:
;1188:	// determine values needed for TAB-movement
;1189:	if (
;1190:		parameterInUse &&
ADDRGP4 parameterInUse
INDIRI4
CNSTI4 0
EQI4 $795
ADDRGP4 cg+128168
INDIRI4
CNSTI4 0
LTI4 $799
ADDRGP4 cg+128172
INDIRI4
CNSTI4 0
GEI4 $795
LABELV $799
line 1192
;1191:		(cg.tssNextValueCol < 0 || cg.tssNextValueLine < 0)
;1192:	) {
line 1194
;1193:		if (
;1194:			cg.tssCursorLine > cg.tssPrintLine ||
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
GTI4 $808
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
NEI4 $800
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
ADDRFP4 20
INDIRI4
ADDI4
LTI4 $800
LABELV $808
line 1199
;1195:			(
;1196:				cg.tssCursorLine == cg.tssPrintLine &&
;1197:				cg.tssCursorCol >= cg.tssPrintCol + width
;1198:			)
;1199:		) {
line 1200
;1200:			cg.tssPrevValueCol = cg.tssPrintCol;
ADDRGP4 cg+128176
ADDRGP4 cg+128108
INDIRI4
ASGNI4
line 1201
;1201:			cg.tssPrevValueLine = cg.tssPrintLine;
ADDRGP4 cg+128180
ADDRGP4 cg+128112
INDIRI4
ASGNI4
line 1202
;1202:		}
LABELV $800
line 1204
;1203:		if (
;1204:			cg.tssCursorLine < cg.tssPrintLine ||
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
LTI4 $821
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
NEI4 $813
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
GEI4 $813
LABELV $821
line 1209
;1205:			(
;1206:				cg.tssCursorLine == cg.tssPrintLine &&
;1207:				cg.tssCursorCol < cg.tssPrintCol
;1208:			)
;1209:		) {
line 1210
;1210:			cg.tssNextValueCol = cg.tssPrintCol;
ADDRGP4 cg+128168
ADDRGP4 cg+128108
INDIRI4
ASGNI4
line 1211
;1211:			cg.tssNextValueLine = cg.tssPrintLine;
ADDRGP4 cg+128172
ADDRGP4 cg+128112
INDIRI4
ASGNI4
line 1212
;1212:		}
LABELV $813
line 1213
;1213:	}
LABELV $795
line 1215
;1214:
;1215:	if (textField) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $826
line 1216
;1216:		textField[width-1] = 0;
ADDRFP4 20
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 16
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1217
;1217:		CG_TSS_Print(textField, color);
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 1218
;1218:		cg.tssPrintCol += width - strlen(textField);
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRI4
ADDRFP4 20
INDIRI4
ADDRLP4 156
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1219
;1219:		goto Exit;
ADDRGP4 $829
JUMPV
LABELV $826
line 1222
;1220:	}
;1221:
;1222:	if (*parameter < parmin) *parameter = parmin;
ADDRFP4 0
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
GEI4 $830
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $830
line 1223
;1223:	if (*parameter > parmax) *parameter = parmax;
ADDRFP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $832
ADDRFP4 0
INDIRP4
ADDRFP4 8
INDIRI4
ASGNI4
LABELV $832
line 1225
;1224:
;1225:	if (translationTable1 || translationTable2) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $836
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $834
LABELV $836
line 1228
;1226:		const char* s;
;1227:
;1228:		s = CG_TSS_MapStr(*parameter, parmin, translationTable1, translationTable2);
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 CG_TSS_MapStr
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 160
INDIRP4
ASGNP4
line 1230
;1229:		// print left adjusted
;1230:		CG_TSS_Print(s, color);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 1231
;1231:		cg.tssPrintCol += width - strlen(s);
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 168
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRI4
ADDRFP4 20
INDIRI4
ADDRLP4 164
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1232
;1232:	}
ADDRGP4 $835
JUMPV
LABELV $834
line 1233
;1233:	else {
line 1234
;1234:		if (parmin < 0 && *parameter > 0) {
ADDRFP4 4
INDIRI4
CNSTI4 0
GEI4 $838
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
LEI4 $838
line 1235
;1235:			Com_sprintf(buf, sizeof(buf), "+%d", *parameter);
ADDRLP4 28
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $840
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1236
;1236:		}
ADDRGP4 $839
JUMPV
LABELV $838
line 1237
;1237:		else {
line 1238
;1238:			Com_sprintf(buf, sizeof(buf), "%d", *parameter);
ADDRLP4 28
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $555
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1239
;1239:		}
LABELV $839
line 1241
;1240:		// print right adjusted
;1241:		cg.tssPrintCol += width - strlen(buf);
ADDRLP4 28
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
ADDRGP4 cg+128108
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRI4
ADDRFP4 20
INDIRI4
ADDRLP4 156
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1242
;1242:		CG_TSS_Print(buf, color);
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_TSS_Print
CALLV
pop
line 1243
;1243:	}
LABELV $835
LABELV $829
line 1246
;1244:
;1245:	Exit:
;1246:	parameterChangeNotifier = NULL;
ADDRGP4 parameterChangeNotifier
CNSTP4 0
ASGNP4
line 1247
;1247:	textParameterChangeNotifier = NULL;
ADDRGP4 textParameterChangeNotifier
CNSTP4 0
ASGNP4
line 1248
;1248:	parameterInUse = qtrue;
ADDRGP4 parameterInUse
CNSTI4 1
ASGNI4
line 1249
;1249:	parameterReversedHome = qfalse;
ADDRGP4 parameterReversedHome
CNSTI4 0
ASGNI4
line 1250
;1250:	return isActive;
ADDRLP4 24
INDIRI4
RETI4
LABELV $706
endproc CG_TSS_Parameter 172 20
proc TSS_Button 8 24
line 1258
;1251:}
;1252:
;1253:/*
;1254:=================
;1255:TSS_Button
;1256:=================
;1257:*/
;1258:static qboolean TSS_Button(int buttonID, const char* name) {
line 1261
;1259:	const char* table;
;1260:
;1261:	table = name;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
line 1262
;1262:	return CG_TSS_Parameter(TSS_BUTTON, buttonID, 0, &table, NULL, 0);
CNSTP4 1
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
RETI4
LABELV $842
endproc TSS_Button 8 24
proc TSS_NumPar 4 24
line 1270
;1263:}
;1264:
;1265:/*
;1266:=================
;1267:TSS_NumPar
;1268:=================
;1269:*/
;1270:static qboolean TSS_NumPar(int* parameter, int parmin, int parmax) {
line 1271
;1271:	return CG_TSS_Parameter(parameter, parmin, parmax, NULL, NULL, 0);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $843
endproc TSS_NumPar 4 24
proc TSS_BigNumPar 4 24
line 1279
;1272:}
;1273:
;1274:/*
;1275:=================
;1276:TSS_BigNumPar
;1277:=================
;1278:*/
;1279:static qboolean TSS_BigNumPar(int* parameter, int parmin, int parmax) {
line 1280
;1280:	return CG_TSS_Parameter(parameter, parmin, parmax, NULL, NULL, 3);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $844
endproc TSS_BigNumPar 4 24
proc TSS_ListPar 4 24
line 1288
;1281:}
;1282:
;1283:/*
;1284:=================
;1285:TSS_ListPar
;1286:=================
;1287:*/
;1288:static qboolean TSS_ListPar(int* parameter, int parmin, int parmax, const char* const* transTab) {
line 1289
;1289:	return CG_TSS_Parameter(parameter, parmin, parmax, transTab, NULL, 0);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $845
endproc TSS_ListPar 4 24
proc TSS_ListParTight 4 24
line 1297
;1290:}
;1291:
;1292:/*
;1293:=================
;1294:TSS_ListParTight
;1295:=================
;1296:*/
;1297:static qboolean TSS_ListParTight(int* parameter, int parmin, int parmax, const char* const* transTab) {
line 1298
;1298:	return CG_TSS_Parameter(parameter, parmin, parmax, transTab, NULL, -1);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $846
endproc TSS_ListParTight 4 24
proc TSS_TeamListPar 4 24
line 1306
;1299:}
;1300:
;1301:/*
;1302:=================
;1303:TSS_TeamListPar
;1304:=================
;1305:*/
;1306:static qboolean TSS_TeamListPar(int* parameter, int parmin, const char* const* transTab) {
line 1307
;1307:	if (!transTab) parmin = 0;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $848
ADDRFP4 4
CNSTI4 0
ASGNI4
LABELV $848
line 1308
;1308:	return CG_TSS_Parameter(parameter, parmin, cg.tssNumTeamMates-1, transTab, cg.tssTeamMateList, 0);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 cg+128400
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+129428
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $847
endproc TSS_TeamListPar 4 24
proc TSS_TeamListParTight 4 24
line 1316
;1309:}
;1310:
;1311:/*
;1312:=================
;1313:TSS_TeamListParTight
;1314:=================
;1315:*/
;1316:static qboolean TSS_TeamListParTight(int* parameter, int parmin, const char* const* transTab) {
line 1317
;1317:	if (!transTab) parmin = 0;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $853
ADDRFP4 4
CNSTI4 0
ASGNI4
LABELV $853
line 1318
;1318:	return CG_TSS_Parameter(parameter, parmin, cg.tssNumTeamMates-1, transTab, cg.tssTeamMateList, -1);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 cg+128400
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+129428
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $852
endproc TSS_TeamListParTight 4 24
proc TSS_StringWithNumberPar 4 24
line 1326
;1319:}
;1320:
;1321:/*
;1322:=================
;1323:TSS_StringWithNumberPar
;1324:=================
;1325:*/
;1326:static qboolean TSS_StringWithNumberPar(int* parameter, int parmin, int parmax, const char* string) {
line 1327
;1327:	return CG_TSS_Parameter(parameter, parmin, parmax, (const char* const*) string, TSS_SIMPLE_TEXT, -1);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRP4
ARGP4
CNSTP4 1
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $857
endproc TSS_StringWithNumberPar 4 24
proc TSS_TextPar 4 24
line 1335
;1328:}
;1329:
;1330:/*
;1331:=================
;1332:TSS_TextPar
;1333:=================
;1334:*/
;1335:static qboolean TSS_TextPar(char* textpar, int width) {
line 1336
;1336:	return CG_TSS_Parameter((int*)textpar, 1, 0, NULL, NULL, width);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_Parameter
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $858
endproc TSS_TextPar 4 24
proc TSS_TextWithNumberPar 4 8
line 1344
;1337:}
;1338:
;1339:/*
;1340:=================
;1341:TSS_TextWithNumberPar
;1342:=================
;1343:*/
;1344:static qboolean TSS_TextWithNumberPar(char* textpar, int width, int* numpar, int numparmin, int numparmax) {
line 1345
;1345:	if (TSS_TextPar(textpar, width)) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 TSS_TextPar
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $860
line 1346
;1346:		cg.tssCurrentValue = numpar;
ADDRGP4 cg+128132
ADDRFP4 8
INDIRP4
ASGNP4
line 1347
;1347:		cg.tssCurrentValueMin = numparmin;
ADDRGP4 cg+128148
ADDRFP4 12
INDIRI4
ASGNI4
line 1348
;1348:		cg.tssCurrentValueMax = numparmax;
ADDRGP4 cg+128152
ADDRFP4 16
INDIRI4
ASGNI4
line 1349
;1349:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $859
JUMPV
LABELV $860
line 1351
;1350:	}
;1351:	return qfalse;
CNSTI4 0
RETI4
LABELV $859
endproc TSS_TextWithNumberPar 4 8
proc TSS_IsTacticalMagnitudeAllowed 8 0
line 1359
;1352:}
;1353:
;1354:/*
;1355:=================
;1356:TSS_IsTacticalMagnitudeAllowed
;1357:=================
;1358:*/
;1359:static qboolean TSS_IsTacticalMagnitudeAllowed(tss_tacticalMagnitude_t magnitude) {
line 1360
;1360:	if (cg.tssGametype < GT_CTF) {
ADDRGP4 cg+128096
INDIRI4
CNSTI4 4
GEI4 $866
line 1361
;1361:		switch (magnitude) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 36
LTI4 $870
ADDRLP4 0
INDIRI4
CNSTI4 39
GTI4 $870
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $873-144
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $873
address $872
address $872
address $872
address $872
code
LABELV $872
line 1366
;1362:		case TSSTM_YFS:
;1363:		case TSSTM_OFS:
;1364:		case TSSTM_YFP:
;1365:		case TSSTM_OFP:
;1366:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $865
JUMPV
line 1368
;1367:		default:
;1368:			break;
LABELV $870
line 1370
;1369:		}
;1370:	}
LABELV $866
line 1371
;1371:	return qtrue;
CNSTI4 1
RETI4
LABELV $865
endproc TSS_IsTacticalMagnitudeAllowed 8 0
data
align 4
LABELV tssMagnitudeNames
address $875
address $876
address $877
address $878
address $879
address $880
address $881
address $882
address $883
address $884
address $885
address $886
address $887
address $888
address $889
address $890
address $891
address $892
address $893
address $894
address $895
address $896
address $897
address $898
address $899
address $900
address $901
address $902
address $903
address $904
address $905
address $906
address $907
address $908
address $909
address $910
address $911
address $912
address $913
address $914
align 4
LABELV $916
address $669
address $917
address $918
address $673
address $676
address $919
align 4
LABELV $920
address $921
address $922
address $923
code
proc TSS_TacticalPredicatePar 20 16
line 1387
;1372:}
;1373:
;1374:static const char* const tssMagnitudeNames[TSSTM_num_magnitudes] = {
;1375:	"----", "YTS ", "OTS ", "BTS ", "RSPD", "YAP ", "YAQ ", "OAP ",
;1376:	"OAQ ", "BAP ", "BAQ ", "YAMP", "YAMQ", "OAMP", "OAMQ", "BAMP",
;1377:	"BAMQ", "YALP", "YALQ", "OALP", "OALQ", "BALP", "BALQ", "BAMT",
;1378:	"BALT", "RFAP", "RFAQ", "RFDP", "RFDQ", "FIN ", "TIDY", "AVST",
;1379:	"TIME", "YRS ", "ORS ", "SCB ", "YFS ", "OFS ", "YFP ", "OFP "
;1380:};
;1381:
;1382:/*
;1383:=================
;1384:TSS_TacticalPredicatePar
;1385:=================
;1386:*/
;1387:static void TSS_TacticalPredicatePar(tss_tacticalPredicate_t* predicate) {
line 1397
;1388:	static const char* const opNames[] = {
;1389:		"<", TSS_LOWER_OR_EQUAL_STR, TSS_GREATER_OR_EQUAL_STR, ">", "=",
;1390:		TSS_UNEQUAL_STR
;1391:	};
;1392:	static const char* const flagStatusNames[] = {
;1393:		"1-bas", "2-dro", "3-tak"
;1394:	};
;1395:	qboolean inUse;
;1396:
;1397:	if (!TSS_IsTacticalMagnitudeAllowed(predicate->magnitude)) {
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 TSS_IsTacticalMagnitudeAllowed
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $924
line 1398
;1398:		predicate->magnitude = TSSTM_no;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 1399
;1399:	}
LABELV $924
line 1401
;1400:
;1401:	inUse = parameterInUse;
ADDRLP4 0
ADDRGP4 parameterInUse
INDIRI4
ASGNI4
line 1402
;1402:	TSS_ListPar((int*)&predicate->magnitude, 0, TSSTM_num_magnitudes-1, tssMagnitudeNames);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 39
ARGI4
ADDRGP4 tssMagnitudeNames
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1404
;1403:
;1404:	switch (predicate->magnitude) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $926
ADDRLP4 8
INDIRI4
CNSTI4 39
GTI4 $926
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $941
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $941
address $929
address $931
address $931
address $933
address $931
address $935
address $931
address $935
address $931
address $937
address $933
address $935
address $931
address $935
address $931
address $937
address $933
address $935
address $931
address $935
address $931
address $937
address $933
address $937
address $937
address $935
address $931
address $935
address $931
address $935
address $935
address $935
address $931
address $931
address $931
address $933
address $939
address $939
address $937
address $937
code
LABELV $929
line 1406
;1405:	case TSSTM_no:
;1406:		TSS_Print("------");
ADDRGP4 $930
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1407
;1407:		return;
ADDRGP4 $915
JUMPV
LABELV $931
line 1422
;1408:	case TSSTM_YTS:
;1409:	case TSSTM_OTS:
;1410:	case TSSTM_RSPD:
;1411:	case TSSTM_YAQ:
;1412:	case TSSTM_OAQ:
;1413:	case TSSTM_YAMQ:
;1414:	case TSSTM_OAMQ:
;1415:	case TSSTM_YALQ:
;1416:	case TSSTM_OALQ:
;1417:	case TSSTM_RFAQ:
;1418:	case TSSTM_RFDQ:
;1419:	case TSSTM_TIME:
;1420:	case TSSTM_YRS:
;1421:	case TSSTM_ORS:
;1422:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1423
;1423:		TSS_ListPar((int*)&predicate->op, 0, 5, opNames);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 $916
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1424
;1424:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1425
;1425:		TSS_NumPar(&predicate->limit, 0, 100);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 1426
;1426:		TSS_Print("  ");
ADDRGP4 $932
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1427
;1427:		break;
ADDRGP4 $927
JUMPV
LABELV $933
line 1433
;1428:	case TSSTM_BTS:
;1429:	case TSSTM_BAQ:
;1430:	case TSSTM_BAMQ:
;1431:	case TSSTM_BALQ:
;1432:	case TSSTM_SCB:
;1433:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1434
;1434:		TSS_ListPar((int*)&predicate->op, 0, 5, opNames);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 $916
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1435
;1435:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1436
;1436:		TSS_NumPar(&predicate->limit, -100, 100);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 -100
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 1437
;1437:		TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1438
;1438:		break;
ADDRGP4 $927
JUMPV
LABELV $935
line 1450
;1439:	case TSSTM_YAP:
;1440:	case TSSTM_OAP:
;1441:	case TSSTM_YAMP:
;1442:	case TSSTM_OAMP:
;1443:	case TSSTM_YALP:
;1444:	case TSSTM_OALP:
;1445:	case TSSTM_RFAP:
;1446:	case TSSTM_RFDP:
;1447:	case TSSTM_FIN:
;1448:	case TSSTM_TIDY:
;1449:	case TSSTM_AVST:
;1450:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1451
;1451:		TSS_ListPar((int*)&predicate->op, 0, 5, opNames);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 $916
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1452
;1452:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1453
;1453:		TSS_NumPar(&predicate->limit, 0, 100);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 1454
;1454:		TSS_Print("% ");
ADDRGP4 $936
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1455
;1455:		break;
ADDRGP4 $927
JUMPV
LABELV $937
line 1463
;1456:	case TSSTM_BAP:
;1457:	case TSSTM_BAMP:
;1458:	case TSSTM_BALP:
;1459:	case TSSTM_BAMT:
;1460:	case TSSTM_BALT:
;1461:	case TSSTM_YFP:
;1462:	case TSSTM_OFP:
;1463:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1464
;1464:		TSS_ListPar((int*)&predicate->op, 0, 5, opNames);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 $916
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1465
;1465:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1466
;1466:		TSS_NumPar(&predicate->limit, -100, 100);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 -100
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 1467
;1467:		TSS_Print("%");
ADDRGP4 $938
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1468
;1468:		break;
ADDRGP4 $927
JUMPV
LABELV $939
line 1471
;1469:	case TSSTM_YFS:
;1470:	case TSSTM_OFS:
;1471:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1472
;1472:		TSS_ListPar((int*)&predicate->op, 0, 5, opNames);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 $916
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1473
;1473:		parameterInUse = inUse;
ADDRGP4 parameterInUse
ADDRLP4 0
INDIRI4
ASGNI4
line 1474
;1474:		TSS_ListPar(&predicate->limit, 0, 2, flagStatusNames);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 $920
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1475
;1475:		break;
ADDRGP4 $927
JUMPV
LABELV $926
line 1477
;1476:	default:
;1477:		TSS_Print("??????");	// should not occur
ADDRGP4 $940
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1478
;1478:		break;
LABELV $927
line 1482
;1479:	}
;1480:
;1481:	if (
;1482:		cg.tssCurrentValue == (int*) &predicate->magnitude ||
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRP4
CVPU4 4
EQU4 $948
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
CVPU4 4
EQU4 $948
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CVPU4 4
NEU4 $942
LABELV $948
line 1485
;1483:		cg.tssCurrentValue == (int*) &predicate->op ||
;1484:		cg.tssCurrentValue == &predicate->limit
;1485:	) {
line 1486
;1486:		cg.tssCurrentMagnitude = predicate->magnitude;
ADDRGP4 cg+132324
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1487
;1487:	}
LABELV $942
line 1488
;1488:}
LABELV $915
endproc TSS_TacticalPredicatePar 20 16
data
align 4
LABELV $951
address $921
address $922
address $923
export CG_TSS_SPrintTacticalMeasure
code
proc CG_TSS_SPrintTacticalMeasure 40 24
line 1498
;1489:
;1490:/*
;1491:=================
;1492:CG_TSS_SPrintTacticalMeasure
;1493:=================
;1494:*/
;1495:void CG_TSS_SPrintTacticalMeasure(
;1496:	char* buf, int size,
;1497:	tss_tacticalMagnitude_t magnitude, tss_tacticalMeasures_t* measures
;1498:) {
line 1504
;1499:	static const char* const flagStatusNames[3] = {
;1500:		"1-bas", "2-dro", "3-tak"
;1501:	};
;1502:	const char* sign;
;1503:	
;1504:	switch (magnitude) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $952
ADDRLP4 4
INDIRI4
CNSTI4 39
GTI4 $952
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $972
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $972
address $955
address $952
address $952
address $966
address $952
address $958
address $952
address $958
address $952
address $960
address $966
address $958
address $952
address $958
address $952
address $960
address $966
address $958
address $952
address $958
address $952
address $960
address $966
address $960
address $960
address $958
address $952
address $958
address $952
address $958
address $958
address $958
address $952
address $952
address $952
address $966
address $956
address $956
address $960
address $960
code
LABELV $955
line 1506
;1505:	case TSSTM_no:
;1506:		buf[0] = 0;
ADDRFP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 1507
;1507:		break;
ADDRGP4 $953
JUMPV
LABELV $956
line 1510
;1508:	case TSSTM_YFS:
;1509:	case TSSTM_OFS:
;1510:		Com_sprintf(buf, size, "%s=%s", tssMagnitudeNames[magnitude], flagStatusNames[measures->var[magnitude]]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $957
ARGP4
ADDRLP4 12
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tssMagnitudeNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $951
ADDP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1511
;1511:		break;
ADDRGP4 $953
JUMPV
LABELV $958
line 1523
;1512:	case TSSTM_YAP:
;1513:	case TSSTM_OAP:
;1514:	case TSSTM_YAMP:
;1515:	case TSSTM_OAMP:
;1516:	case TSSTM_YALP:
;1517:	case TSSTM_OALP:
;1518:	case TSSTM_RFAP:
;1519:	case TSSTM_RFDP:
;1520:	case TSSTM_FIN:
;1521:	case TSSTM_TIDY:
;1522:	case TSSTM_AVST:
;1523:		Com_sprintf(buf, size, "%s=%d%%", tssMagnitudeNames[magnitude], measures->var[magnitude]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $959
ARGP4
ADDRLP4 16
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tssMagnitudeNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1524
;1524:		break;
ADDRGP4 $953
JUMPV
LABELV $960
line 1532
;1525:	case TSSTM_BAP:
;1526:	case TSSTM_BAMP:
;1527:	case TSSTM_BALP:
;1528:	case TSSTM_BAMT:
;1529:	case TSSTM_BALT:
;1530:	case TSSTM_YFP:
;1531:	case TSSTM_OFP:
;1532:		sign = (measures->var[magnitude] > 0? "+" : "");
ADDRFP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $963
ADDRLP4 20
ADDRGP4 $961
ASGNP4
ADDRGP4 $964
JUMPV
LABELV $963
ADDRLP4 20
ADDRGP4 $705
ASGNP4
LABELV $964
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1533
;1533:		Com_sprintf(buf, size, "%s=%s%d%%", tssMagnitudeNames[magnitude], sign, measures->var[magnitude]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $965
ARGP4
ADDRLP4 24
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tssMagnitudeNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1534
;1534:		break;
ADDRGP4 $953
JUMPV
LABELV $966
line 1540
;1535:	case TSSTM_BTS:
;1536:	case TSSTM_BAQ:
;1537:	case TSSTM_BAMQ:
;1538:	case TSSTM_BALQ:
;1539:	case TSSTM_SCB:
;1540:		sign = (measures->var[magnitude] > 0? "+" : "");
ADDRFP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $968
ADDRLP4 28
ADDRGP4 $961
ASGNP4
ADDRGP4 $969
JUMPV
LABELV $968
ADDRLP4 28
ADDRGP4 $705
ASGNP4
LABELV $969
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 1541
;1541:		Com_sprintf(buf, size, "%s=%s%d", tssMagnitudeNames[magnitude], sign, measures->var[magnitude]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $970
ARGP4
ADDRLP4 32
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tssMagnitudeNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1542
;1542:		break;
ADDRGP4 $953
JUMPV
LABELV $952
line 1544
;1543:	default:
;1544:		Com_sprintf(buf, size, "%s=%d", tssMagnitudeNames[magnitude], measures->var[magnitude]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 $971
ARGP4
ADDRLP4 36
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tssMagnitudeNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 36
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 12
INDIRP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1545
;1545:		break;
LABELV $953
line 1547
;1546:	}
;1547:}
LABELV $950
endproc CG_TSS_SPrintTacticalMeasure 40 24
proc TSS_PrintTacticalMeasure 32 16
line 1554
;1548:
;1549:/*
;1550:=================
;1551:TSS_PrintTacticalMeasure
;1552:=================
;1553:*/
;1554:static void TSS_PrintTacticalMeasure(tss_tacticalMagnitude_t magnitude, tss_tacticalMeasures_t* measures) {
line 1557
;1555:	char buf[32];
;1556:
;1557:	CG_TSS_SPrintTacticalMeasure(buf, sizeof(buf), magnitude, measures);
ADDRLP4 0
ARGP4
CNSTI4 32
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_TSS_SPrintTacticalMeasure
CALLV
pop
line 1558
;1558:	TSS_Print(buf);
ADDRLP4 0
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1559
;1559:}
LABELV $973
endproc TSS_PrintTacticalMeasure 32 16
proc TSS_ReorganizeGroups 28 0
line 1566
;1560:
;1561:/*
;1562:=================
;1563:TSS_ReorganizeGroups
;1564:=================
;1565:*/
;1566:static int TSS_ReorganizeGroups(int* groupOrderController, unsigned char* groupOrganization) {
line 1570
;1567:	int i;
;1568:	int move;
;1569:
;1570:	move = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1571
;1571:	for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $975
line 1574
;1572:		int dist;
;1573:
;1574:		dist = groupOrderController[i];
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI4
ASGNI4
line 1575
;1575:		if (dist) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $979
line 1578
;1576:			int j, m;
;1577:
;1578:			dist = -dist;
ADDRLP4 8
ADDRLP4 8
INDIRI4
NEGI4
ASGNI4
line 1579
;1579:			if (dist < 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $981
line 1580
;1580:				if (i + dist < 0) dist = -i;
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
CNSTI4 0
GEI4 $983
ADDRLP4 8
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
LABELV $983
line 1582
;1581:
;1582:				m = groupOrganization[i];
ADDRLP4 16
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 1583
;1583:				for (j = i; j > i + dist; j--) {
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
ADDRGP4 $988
JUMPV
LABELV $985
line 1584
;1584:					groupOrganization[j] = groupOrganization[j - 1];
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRI4
ADDRLP4 24
INDIRP4
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 24
INDIRP4
ADDP4
INDIRU1
ASGNU1
line 1585
;1585:				}
LABELV $986
line 1583
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $988
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
GTI4 $985
line 1586
;1586:				groupOrganization[j] = m;
ADDRLP4 12
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 16
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1587
;1587:			}
ADDRGP4 $982
JUMPV
LABELV $981
line 1588
;1588:			else {
line 1589
;1589:				if (i + dist >= MAX_GROUPS) dist = MAX_GROUPS-1 - i;
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
CNSTI4 10
LTI4 $989
ADDRLP4 8
CNSTI4 9
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
LABELV $989
line 1591
;1590:
;1591:				m = groupOrganization[i];
ADDRLP4 16
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 1592
;1592:				for (j = i; j < i + dist; j++) {
ADDRLP4 12
ADDRLP4 0
INDIRI4
ASGNI4
ADDRGP4 $994
JUMPV
LABELV $991
line 1593
;1593:					groupOrganization[j] = groupOrganization[j + 1];
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRI4
ADDRLP4 24
INDIRP4
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 24
INDIRP4
ADDP4
INDIRU1
ASGNU1
line 1594
;1594:				}
LABELV $992
line 1592
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $994
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
LTI4 $991
line 1595
;1595:				groupOrganization[j] = m;
ADDRLP4 12
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 16
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1596
;1596:			}
LABELV $982
line 1597
;1597:			move += dist;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1598
;1598:			groupOrderController[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI4 0
ASGNI4
line 1599
;1599:		}
LABELV $979
line 1600
;1600:	}
LABELV $976
line 1571
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $975
line 1601
;1601:	return move;
ADDRLP4 4
INDIRI4
RETI4
LABELV $974
endproc TSS_ReorganizeGroups 28 0
proc TSS_CreateAbsoluteDivision 108 16
line 1609
;1602:}
;1603:
;1604:/*
;1605:=================
;1606:TSS_CreateAbsoluteDivision
;1607:=================
;1608:*/
;1609:static void TSS_CreateAbsoluteDivision(void) {
line 1617
;1610:	tss_division_t* relDiv;
;1611:	tss_division_t* absDiv;
;1612:	int group;
;1613:	int groupSizes[MAX_GROUPS];
;1614:	int assignments[MAX_GROUPS];
;1615:	int teamMatesLeft;
;1616:
;1617:	if (!cg.tssSelectedStrategy) return;
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $996
ADDRGP4 $995
JUMPV
LABELV $996
line 1619
;1618:
;1619:	relDiv = &cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive].instr.division;
ADDRLP4 4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148+780+16
ADDP4
ASGNP4
line 1620
;1620:	absDiv = &cg.tssAbsoluteDivision;
ADDRLP4 8
ADDRGP4 cg+132372
ASGNP4
line 1622
;1621:
;1622:	for (group = 0; group < MAX_GROUPS; group++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1005
line 1623
;1623:		groupSizes[group] = relDiv->group[group].minTotalMembers;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1624
;1624:	}
LABELV $1006
line 1622
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1005
line 1625
;1625:	BG_TSS_AssignPlayers(cg.tssNumTeamMates, &groupSizes, relDiv->unassignedPlayers, &assignments);
ADDRGP4 cg+128400
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_TSS_AssignPlayers
CALLV
pop
line 1627
;1626:
;1627:	teamMatesLeft = cg.tssNumTeamMates;
ADDRLP4 12
ADDRGP4 cg+128400
INDIRI4
ASGNI4
line 1628
;1628:	for (group = 0; group < MAX_GROUPS; group++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1011
line 1632
;1629:		int n;
;1630:
;1631:		//n = BG_TSS_TakeProportionAway(relDiv->group[group].minTotalMembers, &teamMatesPercentLeft, &teamMatesLeft);
;1632:		n = assignments[group];
ADDRLP4 96
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 56
ADDP4
INDIRI4
ASGNI4
line 1633
;1633:		teamMatesLeft -= n;
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 96
INDIRI4
SUBI4
ASGNI4
line 1634
;1634:		absDiv->group[group].minTotalMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 1635
;1635:		n = BG_TSS_Proportion(relDiv->group[group].minAliveMembers, 100, n);
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 96
ADDRLP4 100
INDIRI4
ASGNI4
line 1636
;1636:		absDiv->group[group].minAliveMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 1637
;1637:		n = BG_TSS_Proportion(relDiv->group[group].minReadyMembers, 100, n);
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 96
ADDRLP4 104
INDIRI4
ASGNI4
line 1638
;1638:		absDiv->group[group].minReadyMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 1639
;1639:	}
LABELV $1012
line 1628
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1011
line 1640
;1640:	absDiv->unassignedPlayers = teamMatesLeft;
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1641
;1641:}
LABELV $995
endproc TSS_CreateAbsoluteDivision 108 16
proc TSS_CreateRelativeDivision 52 12
line 1648
;1642:
;1643:/*
;1644:=================
;1645:TSS_CreateRelativeDivision
;1646:=================
;1647:*/
;1648:static void TSS_CreateRelativeDivision(void) {
line 1654
;1649:	tss_division_t* relDiv;
;1650:	tss_division_t* absDiv;
;1651:	int group;
;1652:	int teamMatesLeft, teamMatesPercentLeft;
;1653:
;1654:	if (!cg.tssSelectedStrategy) return;
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1016
ADDRGP4 $1015
JUMPV
LABELV $1016
line 1656
;1655:
;1656:	relDiv = &cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive].instr.division;
ADDRLP4 8
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148+780+16
ADDP4
ASGNP4
line 1657
;1657:	absDiv = &cg.tssAbsoluteDivision;
ADDRLP4 4
ADDRGP4 cg+132372
ASGNP4
line 1659
;1658:
;1659:	teamMatesLeft = absDiv->unassignedPlayers;
ADDRLP4 12
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
line 1660
;1660:	for (group = 0; group < MAX_GROUPS; group++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1025
line 1661
;1661:		teamMatesLeft += absDiv->group[group].minTotalMembers;
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1662
;1662:	}
LABELV $1026
line 1660
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1025
line 1663
;1663:	teamMatesPercentLeft = 100;
ADDRLP4 16
CNSTI4 100
ASGNI4
line 1665
;1664:
;1665:	for (group = 0; group < MAX_GROUPS; group++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1029
line 1668
;1666:		int n;
;1667:
;1668:		n = BG_TSS_TakeProportionAway(absDiv->group[group].minTotalMembers, &teamMatesLeft, &teamMatesPercentLeft);
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 24
ADDRGP4 BG_TSS_TakeProportionAway
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 1669
;1669:		relDiv->group[group].minTotalMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1670
;1670:		n = BG_TSS_Proportion(absDiv->group[group].minAliveMembers, absDiv->group[group].minTotalMembers, 100);
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 36
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 36
INDIRI4
ASGNI4
line 1671
;1671:		relDiv->group[group].minAliveMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1672
;1672:		n = BG_TSS_Proportion(absDiv->group[group].minReadyMembers, absDiv->group[group].minAliveMembers, 100);
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 48
ADDRGP4 BG_TSS_Proportion
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 48
INDIRI4
ASGNI4
line 1673
;1673:		relDiv->group[group].minReadyMembers = n;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1674
;1674:	}
LABELV $1030
line 1665
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1029
line 1675
;1675:	relDiv->unassignedPlayers = teamMatesPercentLeft;
ADDRLP4 8
INDIRP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1676
;1676:}
LABELV $1015
endproc TSS_CreateRelativeDivision 52 12
proc TSS_ComputeUnassignedPlayers 8 0
line 1683
;1677:
;1678:/*
;1679:=================
;1680:TSS_ComputeUnassignedPlayers
;1681:=================
;1682:*/
;1683:static void TSS_ComputeUnassignedPlayers(tss_division_t* division, int totalPlayers) {
line 1686
;1684:	int i, assignedPlayers;
;1685:
;1686:	assignedPlayers = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1687
;1687:	for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1034
line 1688
;1688:		assignedPlayers += division->group[i].minTotalMembers;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1689
;1689:	}
LABELV $1035
line 1687
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1034
line 1690
;1690:	totalPlayers -= assignedPlayers;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 1691
;1691:	if (totalPlayers < 0) totalPlayers = 0;
ADDRFP4 4
INDIRI4
CNSTI4 0
GEI4 $1038
ADDRFP4 4
CNSTI4 0
ASGNI4
LABELV $1038
line 1692
;1692:	division->unassignedPlayers = totalPlayers;
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRI4
ASGNI4
line 1693
;1693:}
LABELV $1033
endproc TSS_ComputeUnassignedPlayers 8 0
proc TSS_CheckModifications 28 8
line 1707
;1694:
;1695:static qboolean groupOrganizationChanged;
;1696:static qboolean divisionChanged;
;1697:static qboolean selectedStrategyScrollOffsetChanged;
;1698:static qboolean stockLineChanged[TSS_STOCK_WINDOW_SIZE];
;1699:static qboolean searchIDChanged;
;1700:static qboolean searchNameChanged;
;1701:
;1702:/*
;1703:=================
;1704:TSS_CheckModifications
;1705:=================
;1706:*/
;1707:static void TSS_CheckModifications(void) {
line 1711
;1708:	tss_directive_t* directive;
;1709:	int i;
;1710:
;1711:	if (selectedStrategyScrollOffsetChanged) {
ADDRGP4 selectedStrategyScrollOffsetChanged
INDIRI4
CNSTI4 0
EQI4 $1041
line 1714
;1712:		int index;
;1713:
;1714:		index = TSS_PaletteSlotIndex(cg.tssSelectedStrategy);
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
line 1715
;1715:		if (index >= 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $1044
line 1718
;1716:			int oldIndex;
;1717:			
;1718:			oldIndex = index;
ADDRLP4 16
ADDRLP4 8
INDIRI4
ASGNI4
line 1719
;1719:			index += selectedStrategyScrollOffset;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRGP4 selectedStrategyScrollOffset
INDIRI4
ADDI4
ASGNI4
line 1720
;1720:			if (index < 0) index = 0;
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $1046
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $1046
line 1721
;1721:			if (index >= cg.tssPalette.numEntries) index = cg.tssPalette.numEntries - 1;
ADDRLP4 8
INDIRI4
ADDRGP4 cg+131688
INDIRI4
LTI4 $1048
ADDRLP4 8
ADDRGP4 cg+131688
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $1048
line 1722
;1722:			if (index != oldIndex) TSS_SelectStrategy(&cg.tssPalette.slots[index]);
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1052
ADDRLP4 8
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg+131688+4
ADDP4
ARGP4
ADDRGP4 TSS_SelectStrategy
CALLV
pop
LABELV $1052
line 1723
;1723:		}
LABELV $1044
line 1724
;1724:		selectedStrategyScrollOffset = 0;
ADDRGP4 selectedStrategyScrollOffset
CNSTI4 0
ASGNI4
line 1725
;1725:		selectedStrategyScrollOffsetChanged = qfalse;
ADDRGP4 selectedStrategyScrollOffsetChanged
CNSTI4 0
ASGNI4
line 1726
;1726:	}
LABELV $1041
line 1728
;1727:
;1728:	for (i = 0; i < TSS_STOCK_WINDOW_SIZE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1056
line 1732
;1729:		int newIndex;
;1730:		int newPos;
;1731:
;1732:		if (!stockLineChanged[i]) continue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 stockLineChanged
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1060
ADDRGP4 $1057
JUMPV
LABELV $1060
line 1734
;1733:
;1734:		newIndex = CG_TSS_StrategyNameChanged(
ADDRLP4 0
INDIRI4
ADDRGP4 cg+132316
INDIRI4
SUBI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_TSS_StrategyNameChanged
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16
INDIRI4
ASGNI4
line 1738
;1735:			i - cg.tssStrategyStockScrollOffset,
;1736:			cg.tssStrategyStockSortOrder
;1737:		);
;1738:		newPos = TSS_SetStockWindow(i, newIndex);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 TSS_SetStockWindow
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 1739
;1739:		cg.tssCursorLine += newPos - i;
ADDRLP4 24
ADDRGP4 cg+128120
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1741
;1740:
;1741:		stockLineChanged[i] = qfalse;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 stockLineChanged
ADDP4
CNSTI4 0
ASGNI4
line 1742
;1742:	}
LABELV $1057
line 1728
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 13
LTI4 $1056
line 1744
;1743:
;1744:	if (searchIDChanged) {
ADDRGP4 searchIDChanged
INDIRI4
CNSTI4 0
EQI4 $1065
line 1747
;1745:		int sortIndex;
;1746:
;1747:		sortIndex = CG_TSS_GetSortIndexByID(atoi(searchIDBuf), cg.tssStrategyStockSortOrder);
ADDRGP4 searchIDBuf
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_TSS_GetSortIndexByID
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16
INDIRI4
ASGNI4
line 1748
;1748:		if (sortIndex >= 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $1068
line 1749
;1749:			TSS_SetStockWindow((TSS_STOCK_WINDOW_SIZE-1)/2, sortIndex);
CNSTI4 6
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 TSS_SetStockWindow
CALLI4
pop
line 1750
;1750:		}
LABELV $1068
line 1751
;1751:		searchIDChanged = qfalse;
ADDRGP4 searchIDChanged
CNSTI4 0
ASGNI4
line 1752
;1752:	}
LABELV $1065
line 1754
;1753:
;1754:	if (searchNameChanged) {
ADDRGP4 searchNameChanged
INDIRI4
CNSTI4 0
EQI4 $1070
line 1755
;1755:		CG_TSS_SetSearchPattern(searchNameBuf);
ADDRGP4 searchNameBuf
ARGP4
ADDRGP4 CG_TSS_SetSearchPattern
CALLV
pop
line 1756
;1756:		TSS_SetStockWindow(0, 0);
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 TSS_SetStockWindow
CALLI4
pop
line 1758
;1757:
;1758:		searchNameChanged = qfalse;
ADDRGP4 searchNameChanged
CNSTI4 0
ASGNI4
line 1759
;1759:	}
LABELV $1070
line 1765
;1760:
;1761:	//
;1762:	// following: solely checks that depend on a strategy to be selected
;1763:	//
;1764:
;1765:	if (!cg.tssSelectedStrategy) return;
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1072
ADDRGP4 $1040
JUMPV
LABELV $1072
line 1766
;1766:	directive = &cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive];
ADDRLP4 4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148
ADDP4
ASGNP4
line 1768
;1767:
;1768:	if (groupOrganizationChanged) {
ADDRGP4 groupOrganizationChanged
INDIRI4
CNSTI4 0
EQI4 $1078
line 1769
;1769:		cg.tssCursorLine += TSS_ReorganizeGroups(cg.tssGroupOrderController, directive->instr.groupOrganization);
ADDRGP4 cg+132328
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 780
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_ReorganizeGroups
CALLI4
ASGNI4
ADDRLP4 12
ADDRGP4 cg+128120
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1770
;1770:		groupOrganizationChanged = qfalse;
ADDRGP4 groupOrganizationChanged
CNSTI4 0
ASGNI4
line 1771
;1771:	}
LABELV $1078
line 1773
;1772:
;1773:	if (divisionChanged) {
ADDRGP4 divisionChanged
INDIRI4
CNSTI4 0
EQI4 $1082
line 1774
;1774:		switch (cg.tssDivisionMode) {
ADDRLP4 8
ADDRGP4 cg+132368
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 1
EQI4 $1088
ADDRLP4 8
INDIRI4
CNSTI4 2
EQI4 $1091
ADDRGP4 $1084
JUMPV
LABELV $1088
line 1776
;1775:		case DM_quantity:
;1776:			TSS_ComputeUnassignedPlayers(&cg.tssAbsoluteDivision, cg.tssNumTeamMates);
ADDRGP4 cg+132372
ARGP4
ADDRGP4 cg+128400
INDIRI4
ARGI4
ADDRGP4 TSS_ComputeUnassignedPlayers
CALLV
pop
line 1777
;1777:			TSS_CreateRelativeDivision();
ADDRGP4 TSS_CreateRelativeDivision
CALLV
pop
line 1778
;1778:			break;
ADDRGP4 $1085
JUMPV
LABELV $1091
line 1780
;1779:		case DM_percentage:
;1780:			TSS_ComputeUnassignedPlayers(&directive->instr.division, 100);
ADDRLP4 4
INDIRP4
CNSTI4 796
ADDP4
ARGP4
CNSTI4 100
ARGI4
ADDRGP4 TSS_ComputeUnassignedPlayers
CALLV
pop
line 1781
;1781:			break;
LABELV $1084
LABELV $1085
line 1783
;1782:		}
;1783:		divisionChanged = qfalse;
ADDRGP4 divisionChanged
CNSTI4 0
ASGNI4
line 1784
;1784:	}
LABELV $1082
line 1785
;1785:}
LABELV $1040
endproc TSS_CheckModifications 28 8
data
align 4
LABELV $1093
byte 4 1
align 4
LABELV $1094
address $1095
address $1096
address $1097
address $1098
address $1099
align 4
LABELV $1100
address $496
align 4
LABELV $1101
byte 4 1
align 4
LABELV $1102
address $1103
address $1104
align 4
LABELV $1105
byte 4 1
align 4
LABELV $1106
address $1107
address $1108
address $1109
align 4
LABELV $1110
address $1111
address $1112
align 4
LABELV $1113
address $1114
address $1115
address $1116
address $1117
address $1118
address $1119
address $1120
address $1121
address $1122
address $1123
address $1124
address $1125
address $1126
address $1127
address $1128
address $1129
address $1130
address $1131
address $1132
address $1133
address $1134
address $1135
address $1136
address $1137
address $1138
address $1139
address $1140
align 4
LABELV $1141
byte 4 1
align 4
LABELV $1142
address $1143
address $1144
address $1145
align 4
LABELV $1146
address $1147
address $1148
align 4
LABELV $1149
address $496
address $1150
address $1151
address $1152
address $1153
address $1154
address $1155
align 4
LABELV $1220
address $1221
address $1222
align 4
LABELV $1479
address $1480
address $1481
address $1482
address $1483
address $1484
align 4
LABELV $1485
address $1486
address $1487
address $1488
address $1489
address $1490
align 4
LABELV $1628
address $1629
address $1630
align 4
LABELV $1713
address $1714
address $1715
align 4
LABELV $1749
address $705
address $1750
address $1751
address $1752
address $1753
address $1754
address $1755
address $1756
address $1757
address $1758
address $1759
address $1760
address $1761
address $1762
address $1763
address $1764
address $1765
address $1766
address $1767
address $1768
address $1769
address $1770
address $1771
address $1772
address $1773
address $1774
address $1775
address $1776
address $1777
address $1778
address $1779
address $1780
address $1781
address $1782
address $1783
address $1784
address $1785
address $1786
address $1787
address $1788
align 4
LABELV $1804
address $1805
address $1415
export CG_TSS_DrawInterface
code
proc CG_TSS_DrawInterface 248 36
line 1792
;1786:
;1787:/*
;1788:=================
;1789:CG_TSS_DrawInterface
;1790:=================
;1791:*/
;1792:void CG_TSS_DrawInterface(void) {
line 1794
;1793:	static int page = 1;
;1794:	const int numPages = 5;
ADDRLP4 148
CNSTI4 5
ASGNI4
line 1806
;1795:	static const char* const pageNames[/*numPages*/] = {
;1796:		"Personal Services",
;1797:		"Groups",
;1798:		"Strategy",
;1799:		"Tactics",
;1800:		"Measures"
;1801:	};
;1802:	static const char* const groupLeaderNames[] = {
;1803:		"---"
;1804:	};
;1805:	static int leaderPage = 1;
;1806:	const int numLeaderPages = 2;
ADDRLP4 152
CNSTI4 2
ASGNI4
line 1811
;1807:	static const char* const leaderPageNames[/*numLeaderPages*/] = {
;1808:		"Designated Leaders", "Statistics"
;1809:	};
;1810:	static int strategyPage = 1;
;1811:	const int numStrategyPages = 3;
ADDRLP4 156
CNSTI4 3
ASGNI4
line 1825
;1812:	static const char* const strategyPageNames[/*numStrategyPages*/] = {
;1813:		"Stock",
;1814:		"Administration",
;1815:		"Global Adjustments of the Selected Strategy"
;1816:	};
;1817:	static const char* const conditionControlNames[2] = {
;1818:		"Manual", "Auto"
;1819:	};
;1820:	static const char* const directiveShortNames[] = {
;1821:		"?", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
;1822:		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
;1823:	};
;1824:	static int tacticsPage = 1;
;1825:	const int numTacticsPages = 3;
ADDRLP4 160
CNSTI4 3
ASGNI4
line 1846
;1826:	static const char* const tacticsPageNames[/*numTacticsPages*/] = {
;1827:		"Division", "Orders", "Occasion"
;1828:	};
;1829:	static const char* const divisionModeNames[2] = {
;1830:		"Quantity", "Percentage"
;1831:	};
;1832:	static const char* const missionNames[TSSMISSION_num_missions] = {
;1833:		"---",
;1834:		"Seek Enemy", "Seek Items",
;1835:		"Capture Enemy Flag", "Defend Our Flag", "Defend Our Base", "Occupy Enemy Base"
;1836:	};
;1837:
;1838:	vec4_t color;
;1839:	int i;
;1840:	tss_directive_t* directive;
;1841:	tss_division_t* division;
;1842:	const char* quantitySuffix;
;1843:	char buf[128];
;1844:
;1845:	if (
;1846:		!(trap_Key_GetCatcher() & TSS_KEYCATCHER) ||
ADDRLP4 176
ADDRGP4 trap_Key_GetCatcher
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1164
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
EQI4 $1164
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
GEI4 $1164
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $1156
LABELV $1164
line 1852
;1847:		cg.predictedPlayerState.pm_type == PM_INTERMISSION ||
;1848:#if MONSTER_MODE	// JUHOX: no TSS with STU
;1849:		cgs.gametype >= GT_STU ||
;1850:#endif
;1851:		cgs.gametype < GT_TEAM
;1852:	) {
line 1853
;1853:		CG_TSS_CloseInterface();
ADDRGP4 CG_TSS_CloseInterface
CALLV
pop
line 1854
;1854:		return;
ADDRGP4 $1092
JUMPV
LABELV $1156
line 1857
;1855:	}
;1856:
;1857:	CG_TSS_UpdateInterface();
ADDRGP4 CG_TSS_UpdateInterface
CALLV
pop
line 1860
;1858:
;1859:	// draw background
;1860:	color[0] = 0.05;
ADDRLP4 4
CNSTF4 1028443341
ASGNF4
line 1861
;1861:	color[1] = 0.25;
ADDRLP4 4+4
CNSTF4 1048576000
ASGNF4
line 1862
;1862:	color[2] = 0.1;
ADDRLP4 4+8
CNSTF4 1036831949
ASGNF4
line 1863
;1863:	color[3] = 0.8;
ADDRLP4 4+12
CNSTF4 1061997773
ASGNF4
line 1864
;1864:	CG_FillRect(TSS_X-1, TSS_Y-1, TSS_W+2, TSS_H+2, color);
CNSTF4 1111228416
ARGF4
CNSTF4 1112276992
ARGF4
CNSTF4 1141407744
ARGF4
CNSTF4 1135673344
ARGF4
ADDRLP4 4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1867
;1865:
;1866:	// draw cursor
;1867:	i = cg.time % 500;
ADDRLP4 0
ADDRGP4 cg+107656
INDIRI4
CNSTI4 500
MODI4
ASGNI4
line 1868
;1868:	if (i >= 300) cursorC = 0;
ADDRLP4 0
INDIRI4
CNSTI4 300
LTI4 $1169
ADDRGP4 cursorC
CNSTF4 0
ASGNF4
ADDRGP4 $1170
JUMPV
LABELV $1169
line 1869
;1869:	else if (i < 50) cursorC = i / 50.0;
ADDRLP4 0
INDIRI4
CNSTI4 50
GEI4 $1171
ADDRGP4 cursorC
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1017370378
MULF4
ASGNF4
ADDRGP4 $1172
JUMPV
LABELV $1171
line 1870
;1870:	else cursorC = (300 - i) / 250.0;
ADDRGP4 cursorC
CNSTI4 300
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 998445679
MULF4
ASGNF4
LABELV $1172
LABELV $1170
line 1871
;1871:	color[0] = cursorC;
ADDRLP4 4
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1872
;1872:	color[1] = cursorC;
ADDRLP4 4+4
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1873
;1873:	color[2] = cursorC;
ADDRLP4 4+8
ADDRGP4 cursorC
INDIRF4
ASGNF4
line 1874
;1874:	color[3] = 1;
ADDRLP4 4+12
CNSTF4 1065353216
ASGNF4
line 1875
;1875:	CG_FillRect(
ADDRGP4 cg+128116
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 48
ADDI4
CVIF4 4
ARGF4
ADDRGP4 cg+128120
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
CVIF4 4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1883
;1876:		TSS_X + SMALLCHAR_WIDTH * cg.tssCursorCol,
;1877:		TSS_Y + SMALLCHAR_HEIGHT * cg.tssCursorLine,
;1878:		SMALLCHAR_WIDTH,
;1879:		SMALLCHAR_HEIGHT,
;1880:		color
;1881:	);
;1882:
;1883:	cg.tssPrintCol = 0;
ADDRGP4 cg+128108
CNSTI4 0
ASGNI4
line 1884
;1884:	cg.tssPrintLine = 0;
ADDRGP4 cg+128112
CNSTI4 0
ASGNI4
line 1885
;1885:	cg.tssCursorLineEnd = 0;
ADDRGP4 cg+128124
CNSTI4 0
ASGNI4
line 1886
;1886:	cg.tssCurrentValue = NULL;
ADDRGP4 cg+128132
CNSTP4 0
ASGNP4
line 1887
;1887:	cg.tssCurrentTextField = NULL;
ADDRGP4 cg+128128
CNSTP4 0
ASGNP4
line 1888
;1888:	cg.tssCurrentValueChanged = NULL;
ADDRGP4 cg+128136
CNSTP4 0
ASGNP4
line 1889
;1889:	cg.tssNextValueCol = -1;
ADDRGP4 cg+128168
CNSTI4 -1
ASGNI4
line 1890
;1890:	cg.tssNextValueLine = -1;
ADDRGP4 cg+128172
CNSTI4 -1
ASGNI4
line 1891
;1891:	cg.tssPrevValueCol = -1;
ADDRGP4 cg+128176
CNSTI4 -1
ASGNI4
line 1892
;1892:	cg.tssPrevValueLine = -1;
ADDRGP4 cg+128180
CNSTI4 -1
ASGNI4
line 1893
;1893:	parameterInUse = qtrue;
ADDRGP4 parameterInUse
CNSTI4 1
ASGNI4
line 1894
;1894:	parameterChangeNotifier = NULL;
ADDRGP4 parameterChangeNotifier
CNSTP4 0
ASGNP4
line 1896
;1895:
;1896:	if (page != 4 || tacticsPage != 3) cg.tssCurrentMagnitude = 0;
ADDRGP4 $1093
INDIRI4
CNSTI4 4
NEI4 $1190
ADDRGP4 $1141
INDIRI4
CNSTI4 3
EQI4 $1188
LABELV $1190
ADDRGP4 cg+132324
CNSTI4 0
ASGNI4
LABELV $1188
line 1900
;1897:
;1898:
;1899:
;1900:	TSS_Print("Tactical Support System");
ADDRGP4 $1192
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1901
;1901:	if (cg.tssStrategyWorkCopyChanged) {
ADDRGP4 cg+162884
INDIRI4
CNSTI4 0
EQI4 $1193
line 1902
;1902:		TSS_Print("       changes: ");
ADDRGP4 $1196
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1903
;1903:		TSS_Button(TSSBID_APPLY, "use");
CNSTI4 16
ARGI4
ADDRGP4 $1197
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 1904
;1904:		TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1905
;1905:		TSS_Button(TSSBID_CANCEL, "cancel");
CNSTI4 15
ARGI4
ADDRGP4 $1198
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 1906
;1906:	}
LABELV $1193
line 1907
;1907:	cg.tssPrintCol = TSS_W / SMALLCHAR_WIDTH - 11;
ADDRGP4 cg+128108
CNSTI4 57
ASGNI4
line 1908
;1908:	TSS_Button(TSSBID_RESUMEGAME, "resume game");
CNSTI4 0
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 1909
;1909:	TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1911
;1910:
;1911:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1201
line 1912
;1912:		TSS_Print("\n\nYou're spectating. No support available.\n\n");
ADDRGP4 $1204
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1913
;1913:		TSS_Print("     ");
ADDRGP4 $1205
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1914
;1914:		TSS_Button(TSSBID_JOIN_RED, "   Join Red Team    ");
CNSTI4 23
ARGI4
ADDRGP4 $1206
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 1915
;1915:		TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1916
;1916:		TSS_Button(TSSBID_JOIN_BLUE, "   Join Blue Team   ");
CNSTI4 24
ARGI4
ADDRGP4 $1208
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 1917
;1917:		TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1918
;1918:		goto Exit;
ADDRGP4 $1092
JUMPV
LABELV $1201
line 1921
;1919:	}
;1920:
;1921:	TSS_Print("Page #");
ADDRGP4 $1210
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1922
;1922:	TSS_NumPar(&page, 1, numPages);
ADDRGP4 $1093
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 1923
;1923:	Com_sprintf(buf, sizeof(buf), "/%d: ", numPages);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1211
ARGP4
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1924
;1924:	TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1925
;1925:	TSS_ListPar(&page, 1, numPages, pageNames);
ADDRGP4 $1093
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 $1094
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 1926
;1926:	TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1928
;1927:
;1928:	switch (page) {
ADDRLP4 180
ADDRGP4 $1093
INDIRI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 1
LTI4 $1092
ADDRLP4 180
INDIRI4
CNSTI4 5
GTI4 $1092
ADDRLP4 180
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1826-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1826
address $1214
address $1388
address $1437
address $1564
address $1748
code
LABELV $1214
line 1930
;1929:	case 1:	// team state
;1930:	{
line 1933
;1931:		int cs_offset;
;1932:
;1933:		TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1934
;1934:		if (cgs.clientinfo[cg.clientNum].teamLeader) {
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1215
line 1939
;1935:			static const char* const missionControlStatusNames[2] = {
;1936:				"off-line", "on-line"
;1937:			};
;1938:
;1939:			TSS_Print("You are the mission leader.\n");
ADDRGP4 $1223
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1940
;1940:			TSS_Print("Mission control is ");
ADDRGP4 $1224
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1944
;1941:#if !TSSINCVAR
;1942:			if (cgs.tss && !cg.tssPureServer) {
;1943:#else
;1944:			if (cgs.tss) {
ADDRGP4 cgs+31836
INDIRI4
CNSTI4 0
EQI4 $1225
line 1946
;1945:#endif
;1946:				TSS_ListParTight((int*)&cg.tssOnline, 0, 1, missionControlStatusNames);
ADDRGP4 cg+128220
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1220
ARGP4
ADDRGP4 TSS_ListParTight
CALLI4
pop
line 1947
;1947:				TSS_Print(".\n");
ADDRGP4 $1229
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1948
;1948:			}
ADDRGP4 $1216
JUMPV
LABELV $1225
line 1949
;1949:			else {
line 1959
;1950:#if !TSSINCVAR
;1951:				TSS_Print("off-line.");
;1952:				if (cg.tssPureServer) {
;1953:					TSS_Print(" (pure server)");
;1954:				}
;1955:				else if (!cgs.tss) {
;1956:					TSS_Print(" (disabled on this server)");
;1957:				}
;1958:#else
;1959:				TSS_Print("off-line. (disabled on this server)");
ADDRGP4 $1230
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1961
;1960:#endif
;1961:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1962
;1962:			}
line 1963
;1963:		}
ADDRGP4 $1216
JUMPV
LABELV $1215
line 1964
;1964:		else {
line 1965
;1965:			TSS_Print("Your mission leader is ");
ADDRGP4 $1231
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1966
;1966:			TSS_Print(cg.tssTeamLeaderName);
ADDRGP4 cg+128204
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1967
;1967:			TSS_Print(".\n");
ADDRGP4 $1229
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1968
;1968:		}
LABELV $1216
line 1970
;1969:
;1970:		switch (cgs.clientinfo[cg.clientNum].team) {
ADDRLP4 188
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+68
ADDP4
INDIRI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 1
EQI4 $1239
ADDRLP4 188
INDIRI4
CNSTI4 2
EQI4 $1240
ADDRGP4 $1092
JUMPV
LABELV $1239
line 1972
;1971:		case TEAM_RED:
;1972:			cs_offset = 0;
ADDRLP4 184
CNSTI4 0
ASGNI4
line 1973
;1973:			break;
ADDRGP4 $1234
JUMPV
LABELV $1240
line 1975
;1974:		case TEAM_BLUE:
;1975:			cs_offset = 1;
ADDRLP4 184
CNSTI4 1
ASGNI4
line 1976
;1976:			break;
line 1978
;1977:		default:
;1978:			goto Exit;
LABELV $1234
line 1980
;1979:		}
;1980:		if (cgs.teamVoteTime[cs_offset]) {
ADDRLP4 184
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33040
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1241
line 1983
;1981:			int sec;
;1982:
;1983:			TSS_Print("\nVote for ");
ADDRGP4 $1244
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1984
;1984:			if (!Q_strncmp("leader", cgs.teamVoteString[cs_offset], 6)) {
ADDRGP4 $1247
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+33072
ADDP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 200
ADDRGP4 Q_strncmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $1245
line 1985
;1985:				TSS_Print("mission leader ");
ADDRGP4 $1249
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1986
;1986:				Q_strncpyz(buf, cgs.clientinfo[atoi(cgs.teamVoteString[cs_offset] + 7)].name, sizeof(buf));
ADDRLP4 184
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+33072+7
ADDP4
ARGP4
ADDRLP4 204
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 20
ARGP4
ADDRLP4 204
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+4
ADDP4
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1987
;1987:			}
ADDRGP4 $1246
JUMPV
LABELV $1245
line 1988
;1988:			else if (!Q_strncmp("surrender", cgs.teamVoteString[cs_offset], 9)) {
ADDRGP4 $1256
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+33072
ADDP4
ARGP4
CNSTI4 9
ARGI4
ADDRLP4 204
ADDRGP4 Q_strncmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $1254
line 1989
;1989:				TSS_Print("surrendering this round");
ADDRGP4 $1258
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1990
;1990:				buf[0] = 0;
ADDRLP4 20
CNSTI1 0
ASGNI1
line 1991
;1991:			}
ADDRGP4 $1255
JUMPV
LABELV $1254
line 1992
;1992:			else {
line 1993
;1993:				Q_strncpyz(buf, cgs.teamVoteString[cs_offset], sizeof(buf));
ADDRLP4 20
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+33072
ADDP4
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1994
;1994:			}
LABELV $1255
LABELV $1246
line 1995
;1995:			Q_CleanStr(buf);
ADDRLP4 20
ARGP4
ADDRGP4 Q_CleanStr
CALLP4
pop
line 1996
;1996:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1997
;1997:			TSS_Print(".\n");
ADDRGP4 $1229
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 1999
;1998:
;1999:			if (!(cg.predictedPlayerState.eFlags & EF_TEAMVOTED)) {
ADDRGP4 cg+107688+104
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1260
line 2000
;2000:				TSS_Button(TSSBID_VOTE_YES, "YES");
CNSTI4 3
ARGI4
ADDRGP4 $1264
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2001
;2001:				Com_sprintf(buf, sizeof(buf), "   %3d\n", cgs.teamVoteYes[cs_offset]);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1265
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33048
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2002
;2002:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2003
;2003:				TSS_Button(TSSBID_VOTE_NO, "NO ");
CNSTI4 4
ARGI4
ADDRGP4 $1267
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2004
;2004:				Com_sprintf(buf, sizeof(buf), "   %3d\n", cgs.teamVoteNo[cs_offset]);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1265
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33056
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2005
;2005:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2006
;2006:			}
ADDRGP4 $1261
JUMPV
LABELV $1260
line 2007
;2007:			else {
line 2008
;2008:				Com_sprintf(
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1269
ARGP4
ADDRLP4 208
ADDRLP4 184
INDIRI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33048
ADDP4
INDIRI4
ARGI4
ADDRLP4 208
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33056
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2015
;2009:					buf, sizeof(buf),
;2010:					"YES   %3d\n"
;2011:					"NO    %3d\n",
;2012:					cgs.teamVoteYes[cs_offset],
;2013:					cgs.teamVoteNo[cs_offset]
;2014:				);
;2015:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2016
;2016:			}
LABELV $1261
line 2018
;2017:
;2018:			sec = (VOTE_TIME - (cg.time - cgs.teamVoteTime[cs_offset])) / 1000;
ADDRLP4 196
CNSTI4 30000
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 184
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+33040
ADDP4
INDIRI4
SUBI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 2019
;2019:			if (sec < 0) sec = 0;
ADDRLP4 196
INDIRI4
CNSTI4 0
GEI4 $1274
ADDRLP4 196
CNSTI4 0
ASGNI4
LABELV $1274
line 2020
;2020:			Com_sprintf(buf, sizeof(buf), "time left: %d sec\n", sec);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1276
ARGP4
ADDRLP4 196
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2021
;2021:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2022
;2022:		}
ADDRGP4 $1242
JUMPV
LABELV $1241
line 2023
;2023:		else {
line 2024
;2024:			TSS_Button(TSSBID_CALLLEADERVOTE, "Call a vote");
CNSTI4 1
ARGI4
ADDRGP4 $1277
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2025
;2025:			TSS_Print(" for mission leader ");
ADDRGP4 $1278
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2026
;2026:			TSS_TeamListParTight(&cg.tssCallVoteLeader, 0, NULL);
ADDRGP4 cg+128200
ARGP4
CNSTI4 0
ARGI4
CNSTP4 0
ARGP4
ADDRGP4 TSS_TeamListParTight
CALLI4
pop
line 2027
;2027:			TSS_Print(".\n\n");
ADDRGP4 $1280
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2029
;2028:
;2029:			TSS_Button(TSSBID_CALLSURRENDERVOTE, "Call a vote");
CNSTI4 2
ARGI4
ADDRGP4 $1277
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2030
;2030:			TSS_Print(" for surrendering this round.\n");
ADDRGP4 $1281
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2031
;2031:		}
LABELV $1242
line 2034
;2032:
;2033:		if (
;2034:			(cg.tssActivated || cg.tssOnline) &&
ADDRGP4 cg+128224
INDIRI4
CNSTI4 0
NEI4 $1288
ADDRGP4 cg+128220
INDIRI4
CNSTI4 0
EQI4 $1282
LABELV $1288
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1289
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1282
LABELV $1289
line 2036
;2035:			(cg.snap->ps.pm_type != PM_SPECTATOR || cg.snap->ps.stats[STAT_HEALTH] <= 0)
;2036:		) {
line 2039
;2037:			const char* groupCommand;
;2038:
;2039:			Com_sprintf(
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 204
ADDRGP4 BG_TSS_GetPlayerInfo
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
EQI4 $1295
ADDRLP4 200
ADDRGP4 $1292
ASGNP4
ADDRGP4 $1296
JUMPV
LABELV $1295
ADDRLP4 200
ADDRGP4 $1293
ASGNP4
LABELV $1296
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1290
ARGP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2043
;2040:				buf, sizeof(buf), "\nYour navigation aid is %s.   ", 
;2041:				BG_TSS_GetPlayerInfo(&cg.snap->ps, TSSPI_navAid)? "active" : "inactive"
;2042:			);
;2043:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2044
;2044:			TSS_Button(TSSBID_NAVAID_ON, " ON  ");
CNSTI4 5
ARGI4
ADDRGP4 $1297
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2045
;2045:			TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2046
;2046:			TSS_Button(TSSBID_NAVAID_OFF, " OFF ");
CNSTI4 6
ARGI4
ADDRGP4 $1298
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2047
;2047:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2049
;2048:
;2049:			if (cg.snap->ps.stats[STAT_HEALTH] > 0) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1299
line 2050
;2050:				switch (cg.tssGroupFormation) {
ADDRLP4 208
ADDRGP4 cg+128236
INDIRI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $1306
ADDRLP4 208
INDIRI4
CNSTI4 1
EQI4 $1312
ADDRLP4 208
INDIRI4
CNSTI4 2
EQI4 $1318
ADDRGP4 $1302
JUMPV
LABELV $1306
line 2052
;2051:				case TSSGF_tight:
;2052:					if (cg.tssGroupLeaderAuthorization) {
ADDRGP4 cg+128232
INDIRI4
CNSTI4 0
EQI4 $1307
line 2053
;2053:						groupCommand = "Stick to me!";
ADDRLP4 196
ADDRGP4 $1310
ASGNP4
line 2054
;2054:					}
ADDRGP4 $1303
JUMPV
LABELV $1307
line 2055
;2055:					else {
line 2056
;2056:						groupCommand = "Stick to group leader!";
ADDRLP4 196
ADDRGP4 $1311
ASGNP4
line 2057
;2057:					}
line 2058
;2058:					break;
ADDRGP4 $1303
JUMPV
LABELV $1312
line 2060
;2059:				case TSSGF_loose:
;2060:					if (cg.tssGroupLeaderAuthorization) {
ADDRGP4 cg+128232
INDIRI4
CNSTI4 0
EQI4 $1313
line 2061
;2061:						groupCommand = "Support me!";
ADDRLP4 196
ADDRGP4 $1316
ASGNP4
line 2062
;2062:					}
ADDRGP4 $1303
JUMPV
LABELV $1313
line 2063
;2063:					else {
line 2064
;2064:						groupCommand = "Support group leader!";
ADDRLP4 196
ADDRGP4 $1317
ASGNP4
line 2065
;2065:					}
line 2066
;2066:					break;
ADDRGP4 $1303
JUMPV
LABELV $1318
line 2068
;2067:				case TSSGF_free:
;2068:					groupCommand = "Go! Go! Go!";
ADDRLP4 196
ADDRGP4 $1319
ASGNP4
line 2069
;2069:					break;
ADDRGP4 $1303
JUMPV
LABELV $1302
line 2071
;2070:				default:
;2071:					groupCommand = NULL;
ADDRLP4 196
CNSTP4 0
ASGNP4
line 2072
;2072:					break;
LABELV $1303
line 2074
;2073:				}
;2074:				if (groupCommand) {
ADDRLP4 196
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1320
line 2075
;2075:					Com_sprintf(buf, sizeof(buf), "\nCurrent group command is \"%s\"\n", groupCommand);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1322
ARGP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2076
;2076:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2078
;2077:
;2078:					Com_sprintf(
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1323
ARGP4
ADDRGP4 cg+128232
INDIRI4
CNSTI4 0
EQI4 $1331
ADDRLP4 216
ADDRGP4 $1121
ASGNP4
ADDRGP4 $1332
JUMPV
LABELV $1331
ADDRLP4 216
ADDRGP4 $1325
ASGNP4
LABELV $1332
ADDRLP4 216
INDIRP4
ARGP4
ADDRGP4 cg_autoGLC+12
INDIRI4
CNSTI4 0
EQI4 $1333
ADDRLP4 220
ADDRGP4 $1328
ASGNP4
ADDRGP4 $1334
JUMPV
LABELV $1333
ADDRLP4 220
ADDRGP4 $1329
ASGNP4
LABELV $1334
ADDRLP4 220
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2083
;2079:						buf, sizeof(buf), "%sroup command is choosen %s.\n",
;2080:						cg.tssGroupLeaderAuthorization? "G" : "When you're leader, g",
;2081:						cg_autoGLC.integer? "automatically" : "manually"
;2082:					);
;2083:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2084
;2084:					TSS_Print("Automatic group commands:   ");
ADDRGP4 $1335
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2085
;2085:					TSS_Button(TSSBID_AUTOGLC_ON, " ON  ");
CNSTI4 25
ARGI4
ADDRGP4 $1297
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2086
;2086:					TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2087
;2087:					TSS_Button(TSSBID_AUTOGLC_OFF, " OFF ");
CNSTI4 26
ARGI4
ADDRGP4 $1298
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2088
;2088:					TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2089
;2089:				}
LABELV $1320
line 2090
;2090:				if (cg.tssGroupLeaderAuthorization && !cg_autoGLC.integer) {
ADDRGP4 cg+128232
INDIRI4
CNSTI4 0
EQI4 $1336
ADDRGP4 cg_autoGLC+12
INDIRI4
CNSTI4 0
NEI4 $1336
line 2091
;2091:					TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2092
;2092:					TSS_Button(TSSBID_GROUPFORMATION_TIGHT, "Stick to me!");
CNSTI4 7
ARGI4
ADDRGP4 $1310
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2093
;2093:					TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2094
;2094:					TSS_Button(TSSBID_GROUPFORMATION_LOOSE, "Support me!");
CNSTI4 8
ARGI4
ADDRGP4 $1316
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2095
;2095:					TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2096
;2096:					TSS_Button(TSSBID_GROUPFORMATION_FREE, "Go! Go! Go!");
CNSTI4 9
ARGI4
ADDRGP4 $1319
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2097
;2097:					TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2098
;2098:				}
LABELV $1336
line 2099
;2099:			}
LABELV $1299
line 2100
;2100:		}
LABELV $1282
line 2102
;2101:
;2102:		if (cgs.clientinfo[cg.clientNum].teamLeader && cg.tssOnline) {
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1340
ADDRGP4 cg+128220
INDIRI4
CNSTI4 0
EQI4 $1340
line 2103
;2103:			Com_sprintf(
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1346
ARGP4
ADDRGP4 cg+129944
INDIRI4
ARGI4
ADDRGP4 cg+128400
INDIRI4
ARGI4
ADDRGP4 cg+128400
INDIRI4
CNSTI4 1
EQI4 $1356
ADDRLP4 196
ADDRGP4 $1350
ASGNP4
ADDRGP4 $1357
JUMPV
LABELV $1356
ADDRLP4 196
ADDRGP4 $705
ASGNP4
LABELV $1357
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 cg+129948
INDIRI4
ARGI4
ADDRGP4 cg+129940
INDIRI4
ARGI4
ADDRGP4 cg+129940
INDIRI4
CNSTI4 1
EQI4 $1358
ADDRLP4 200
ADDRGP4 $1350
ASGNP4
ADDRGP4 $1359
JUMPV
LABELV $1358
ADDRLP4 200
ADDRGP4 $705
ASGNP4
LABELV $1359
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2111
;2104:				buf, sizeof(buf),
;2105:				"\n"
;2106:				"    your team: %d of %d player%s alive\n"
;2107:				"opposing team: %d of %d player%s alive\n",
;2108:				cg.tssNumTeamMatesAlive, cg.tssNumTeamMates, cg.tssNumTeamMates != 1? "s" : "",
;2109:				cg.tssNumEnemiesAlive, cg.tssNumEnemies, cg.tssNumEnemies != 1? "s" : ""
;2110:			);
;2111:		}
ADDRGP4 $1341
JUMPV
LABELV $1340
line 2112
;2112:		else {
line 2113
;2113:			Com_sprintf(
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1360
ARGP4
ADDRGP4 cg+128400
INDIRI4
ARGI4
ADDRGP4 cg+128400
INDIRI4
CNSTI4 1
EQI4 $1367
ADDRLP4 196
ADDRGP4 $1350
ASGNP4
ADDRGP4 $1368
JUMPV
LABELV $1367
ADDRLP4 196
ADDRGP4 $705
ASGNP4
LABELV $1368
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 cg+129940
INDIRI4
ARGI4
ADDRGP4 cg+129940
INDIRI4
CNSTI4 1
EQI4 $1369
ADDRLP4 200
ADDRGP4 $1350
ASGNP4
ADDRGP4 $1370
JUMPV
LABELV $1369
ADDRLP4 200
ADDRGP4 $705
ASGNP4
LABELV $1370
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2121
;2114:				buf, sizeof(buf),
;2115:				"\n"
;2116:				"    your team: %d player%s\n"
;2117:				"opposing team: %d player%s\n",
;2118:				cg.tssNumTeamMates, cg.tssNumTeamMates != 1? "s" : "",
;2119:				cg.tssNumEnemies, cg.tssNumEnemies != 1? "s" : ""
;2120:			);
;2121:		}
LABELV $1341
line 2122
;2122:		TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2125
;2123:
;2124:		if (
;2125:			cgs.tssSafetyMode &&
ADDRGP4 cgs+31840
INDIRI4
CNSTI4 0
EQI4 $1092
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1092
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LTI4 $1092
ADDRGP4 cg+36
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1092
ADDRGP4 cg+129944
INDIRI4
CNSTI4 1
GTI4 $1382
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1092
LABELV $1382
line 2130
;2126:			cgs.clientinfo[cg.clientNum].teamLeader &&
;2127:			cg.snap->ps.stats[STAT_HEALTH] >= cg.snap->ps.stats[STAT_MAX_HEALTH] &&
;2128:			cg.snap->ps.weaponstate == WEAPON_READY &&
;2129:			(cg.tssNumTeamMatesAlive > 1 || cg.snap->ps.pm_type == PM_SPECTATOR)
;2130:		) {
line 2131
;2131:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2132
;2132:			if (cg.snap->ps.pm_type == PM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1383
line 2133
;2133:				TSS_Button(TSSBID_SAFETYMODE, "leave safety mode");
CNSTI4 10
ARGI4
ADDRGP4 $1386
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2134
;2134:			}
ADDRGP4 $1384
JUMPV
LABELV $1383
line 2135
;2135:			else {
line 2136
;2136:				TSS_Button(TSSBID_SAFETYMODE, "enter safety mode");
CNSTI4 10
ARGI4
ADDRGP4 $1387
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2137
;2137:			}
LABELV $1384
line 2138
;2138:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2139
;2139:		}
line 2140
;2140:		break;
ADDRGP4 $1092
JUMPV
LABELV $1388
line 2143
;2141:	}
;2142:	case 2:	// group state
;2143:	{
line 2146
;2144:		qboolean multiMandate;
;2145:
;2146:		if (!cgs.clientinfo[cg.clientNum].teamLeader) {
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1389
LABELV $1394
line 2148
;2147:			AccessDenied:
;2148:			TSS_Print(
ADDRGP4 $1395
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2155
;2149:				"\n"
;2150:				"ACCESS DENIED: NO AUTHORIZATION\n"
;2151:				"You do not have mission leader authorization.\n"
;2152:				"\n"
;2153:				"Ask your administrator for more information.\n"
;2154:			);
;2155:			goto Exit;
ADDRGP4 $1092
JUMPV
LABELV $1389
line 2172
;2156:		}
;2157:
;2158:#if !TSSINCVAR
;2159:		if (cg.tssPureServer) {
;2160:			PureServer:
;2161:			TSS_Print(
;2162:				"\n"
;2163:				"ACCESS DENIED: PURE SERVER\n"
;2164:				"Mission control not available.\n"
;2165:				"\n"
;2166:				"Ask your administrator for more information.\n"
;2167:			);
;2168:			goto Exit;
;2169:		}
;2170:#endif
;2171:
;2172:		TSS_Print("Section #");
ADDRGP4 $1396
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2173
;2173:		TSS_NumPar(&leaderPage, 1, numLeaderPages);
ADDRGP4 $1101
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 2174
;2174:		TSS_Print(va("/%d: ", numLeaderPages));
ADDRGP4 $1211
ARGP4
ADDRLP4 152
INDIRI4
ARGI4
ADDRLP4 188
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2175
;2175:		TSS_ListPar(&leaderPage, 1, numLeaderPages, leaderPageNames);
ADDRGP4 $1101
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 $1102
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2176
;2176:		TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2178
;2177:
;2178:		switch (leaderPage) {
ADDRLP4 192
ADDRGP4 $1101
INDIRI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 1
EQI4 $1400
ADDRLP4 192
INDIRI4
CNSTI4 2
EQI4 $1420
ADDRGP4 $1092
JUMPV
LABELV $1400
line 2180
;2179:		case 1:
;2180:			TSS_Print("     1st leader          2nd leader          3rd leader\n");
ADDRGP4 $1401
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2181
;2181:			multiMandate = qfalse;
ADDRLP4 184
CNSTI4 0
ASGNI4
line 2182
;2182:			for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1402
line 2185
;2183:				int j;
;2184:
;2185:				Com_sprintf(buf, sizeof(buf), "[%c] ", i + 'A');
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1406
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 65
ADDI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2186
;2186:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2188
;2187:
;2188:				for (j = 0; j < 3; j++) {
ADDRLP4 196
CNSTI4 0
ASGNI4
LABELV $1407
line 2189
;2189:					cg.tssPrintCol = 3 + j * 20;
ADDRGP4 cg+128108
ADDRLP4 196
INDIRI4
CNSTI4 20
MULI4
CNSTI4 3
ADDI4
ASGNI4
line 2190
;2190:					TSS_Print(" ");	// to remove the last character of a long name
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2191
;2191:					if (cg.tssMultiMandate[j][i]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 196
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 cg+130072
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1412
line 2192
;2192:						TSS_Print("*");
ADDRGP4 $1415
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2193
;2193:						multiMandate = qtrue;
ADDRLP4 184
CNSTI4 1
ASGNI4
line 2194
;2194:					}
ADDRGP4 $1413
JUMPV
LABELV $1412
line 2195
;2195:					else {
line 2196
;2196:						TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2197
;2197:					}
LABELV $1413
line 2198
;2198:					TSS_TeamListPar(&cg.tssGroupLeader[j][i], -1, groupLeaderNames);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 196
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 cg+129952
ADDP4
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 $1100
ARGP4
ADDRGP4 TSS_TeamListPar
CALLI4
pop
line 2199
;2199:				}
LABELV $1408
line 2188
ADDRLP4 196
ADDRLP4 196
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 3
LTI4 $1407
line 2200
;2200:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2201
;2201:			}
LABELV $1403
line 2182
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1402
line 2202
;2202:			if (multiMandate) {
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $1092
line 2203
;2203:				TSS_Print("\n    * multiple mandates\n");
ADDRGP4 $1419
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2204
;2204:			}
line 2205
;2205:			break;
ADDRGP4 $1092
JUMPV
LABELV $1420
line 2207
;2206:		case 2:
;2207:			TSS_Print("     ready alive total   current leader\n");
ADDRGP4 $1421
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2208
;2208:			for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1422
line 2211
;2209:				char name[32];
;2210:
;2211:				if (cg.tssCurrentLeader[i] >= 0 && cg.tssCurrentLeader[i] < MAX_CLIENTS) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130240
ADDP4
INDIRI4
CNSTI4 0
LTI4 $1426
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130240
ADDP4
INDIRI4
CNSTI4 64
GEI4 $1426
line 2212
;2212:					Q_strncpyz(name, cgs.clientinfo[cg.tssCurrentLeader[i]].name, sizeof(name));
ADDRLP4 196
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130240
ADDP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+4
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 2213
;2213:					Q_CleanStr(name);
ADDRLP4 196
ARGP4
ADDRGP4 Q_CleanStr
CALLP4
pop
line 2214
;2214:				}
ADDRGP4 $1427
JUMPV
LABELV $1426
line 2215
;2215:				else {
line 2216
;2216:					strcpy(name, "---");
ADDRLP4 196
ARGP4
ADDRGP4 $496
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 2217
;2217:				}
LABELV $1427
line 2218
;2218:				Com_sprintf(
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1433
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 65
ADDI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130360
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130320
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+130280
ADDP4
INDIRI4
ARGI4
ADDRLP4 196
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2222
;2219:					buf, sizeof(buf), "[%c]  %5d %5d %5d   %s\n",
;2220:					i + 'A', cg.tssCurrentReady[i], cg.tssCurrentAlive[i], cg.tssCurrentTotal[i], name
;2221:				);
;2222:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2223
;2223:			}
LABELV $1423
line 2208
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1422
line 2224
;2224:			break;
line 2226
;2225:		}
;2226:		break;
ADDRGP4 $1092
JUMPV
LABELV $1437
line 2229
;2227:	}
;2228:	case 3:	// strategy
;2229:		if (!cgs.clientinfo[cg.clientNum].teamLeader) goto AccessDenied;
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1438
ADDRGP4 $1394
JUMPV
LABELV $1438
line 2234
;2230:#if !TSSINCVAR
;2231:		if (cg.tssPureServer) goto PureServer;
;2232:#endif
;2233:
;2234:		TSS_Print("===== Palette [");
ADDRGP4 $1443
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2235
;2235:		if (cg.tssPalette.numEntries) {
ADDRGP4 cg+131688
INDIRI4
CNSTI4 0
EQI4 $1444
line 2236
;2236:			Com_sprintf(buf, sizeof(buf), "a-%c", 'a' + cg.tssPalette.numEntries - 1);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1447
ARGP4
ADDRGP4 cg+131688
INDIRI4
CNSTI4 97
ADDI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2237
;2237:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2238
;2238:		}
LABELV $1444
line 2239
;2239:		TSS_Print("] ");
ADDRGP4 $1449
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2240
;2240:		TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2241
;2241:		TSS_Print("applied  ");
ADDRGP4 $1450
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2242
;2242:		if (cg.tssUtilizedStrategy) {
ADDRGP4 cg+131680
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1451
line 2243
;2243:			Com_sprintf(
ADDRGP4 cg+131680
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1454
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 97
ADDI4
ARGI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2249
;2244:				buf, sizeof(buf), "(%c) #%03d %s\n",
;2245:				'a' + TSS_PaletteSlotIndex(cg.tssUtilizedStrategy),
;2246:				cg.tssUtilizedStrategy->slot->id,
;2247:				cg.tssUtilizedStrategy->slot->tssname
;2248:			);
;2249:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2250
;2250:		}
ADDRGP4 $1452
JUMPV
LABELV $1451
line 2251
;2251:		else {
line 2252
;2252:			TSS_Print("(-) #--- ---------\n");
ADDRGP4 $1458
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2253
;2253:		}
LABELV $1452
line 2254
;2254:		TSS_Print("selected ");
ADDRGP4 $1459
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2255
;2255:		if (cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1460
line 2256
;2256:			Com_sprintf(
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1463
ARGP4
ADDRLP4 184
INDIRI4
CNSTI4 97
ADDI4
ARGI4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2262
;2257:				buf, sizeof(buf), "(%c) #%03d %31s ",
;2258:				'a' + TSS_PaletteSlotIndex(cg.tssSelectedStrategy),
;2259:				cg.tssSelectedStrategy->slot->id,
;2260:				cg.tssSelectedStrategy->slot->tssname
;2261:			);
;2262:			parameterChangeNotifier = &selectedStrategyScrollOffsetChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 selectedStrategyScrollOffsetChanged
ASGNP4
line 2263
;2263:			TSS_StringWithNumberPar(&selectedStrategyScrollOffset, -100, 100, buf);
ADDRGP4 selectedStrategyScrollOffset
ARGP4
CNSTI4 -100
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2264
;2264:			if (cg.tssSelectedStrategy != cg.tssUtilizedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
ADDRGP4 cg+131680
INDIRP4
CVPU4 4
EQU4 $1467
line 2265
;2265:				TSS_Button(TSSBID_UTILIZE_STRATEGY, "apply");
CNSTI4 13
ARGI4
ADDRGP4 $1471
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2266
;2266:			}
ADDRGP4 $1468
JUMPV
LABELV $1467
line 2267
;2267:			else {
line 2268
;2268:				TSS_Print("     ");
ADDRGP4 $1205
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2269
;2269:			}
LABELV $1468
line 2270
;2270:			TSS_Print("    ");
ADDRGP4 $1472
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2271
;2271:			TSS_Button(TSSBID_REMOVE_STRATEGY, "remove");
CNSTI4 14
ARGI4
ADDRGP4 $1473
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2272
;2272:		}
ADDRGP4 $1461
JUMPV
LABELV $1460
line 2273
;2273:		else {
line 2274
;2274:			TSS_Print("(-) #--- ---------");
ADDRGP4 $1474
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2275
;2275:		}
LABELV $1461
line 2276
;2276:		TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2278
;2277:
;2278:		TSS_Print("===== Section #");
ADDRGP4 $1475
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2279
;2279:		TSS_NumPar(&strategyPage, 1, numStrategyPages);
ADDRGP4 $1105
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 156
INDIRI4
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 2280
;2280:		Com_sprintf(buf, sizeof(buf), "/%d: ", numStrategyPages);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1211
ARGP4
ADDRLP4 156
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2281
;2281:		TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2282
;2282:		TSS_ListParTight(&strategyPage, 1, numStrategyPages, strategyPageNames);
ADDRGP4 $1105
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 156
INDIRI4
ARGI4
ADDRGP4 $1106
ARGP4
ADDRGP4 TSS_ListParTight
CALLI4
pop
line 2284
;2283:
;2284:		switch (strategyPage) {
ADDRLP4 184
ADDRGP4 $1105
INDIRI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 1
EQI4 $1478
ADDRLP4 184
INDIRI4
CNSTI4 2
EQI4 $1528
ADDRLP4 184
INDIRI4
CNSTI4 3
EQI4 $1534
ADDRGP4 $1092
JUMPV
LABELV $1478
line 2286
;2285:		case 1:	// stock
;2286:			{
line 2297
;2287:				static const char* const sortOrderNames[SSO_num_orders] = {
;2288:					"creation date",
;2289:					"access date",
;2290:					"name / creation date",
;2291:					"name / access date",
;2292:					"pattern similariy"
;2293:				};
;2294:				static const char* const sortOrderNumbers[SSO_num_orders] = {"1", "2", "3", "4", "5"};
;2295:				int minScrollOffset;
;2296:
;2297:				TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2298
;2298:				TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2299
;2299:				minScrollOffset = CG_TSS_NumStrategiesInStock(cg.tssStrategyStockSortOrder) - TSS_STOCK_WINDOW_SIZE;
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 192
ADDRGP4 CG_TSS_NumStrategiesInStock
CALLI4
ASGNI4
ADDRLP4 188
ADDRLP4 192
INDIRI4
CNSTI4 13
SUBI4
ASGNI4
line 2300
;2300:				if (minScrollOffset < 0) minScrollOffset = 0;
ADDRLP4 188
INDIRI4
CNSTI4 0
GEI4 $1492
ADDRLP4 188
CNSTI4 0
ASGNI4
LABELV $1492
line 2301
;2301:				minScrollOffset = -minScrollOffset;
ADDRLP4 188
ADDRLP4 188
INDIRI4
NEGI4
ASGNI4
line 2302
;2302:				TSS_Print("    ID# Name            sort by ");
ADDRGP4 $1494
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2303
;2303:				TSS_ListParTight((int*)&cg.tssStrategyStockSortOrder, 0, SSO_num_orders-1, sortOrderNames);
ADDRGP4 cg+132320
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 $1479
ARGP4
ADDRGP4 TSS_ListParTight
CALLI4
pop
line 2304
;2304:				TSS_Print(" (#");
ADDRGP4 $1496
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2305
;2305:				TSS_ListPar((int*)&cg.tssStrategyStockSortOrder, 0, SSO_num_orders-1, sortOrderNumbers);
ADDRGP4 cg+132320
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 $1485
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2306
;2306:				TSS_Print(va("/%d)\n", SSO_num_orders));
ADDRGP4 $1498
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 196
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2307
;2307:				for (i = 0; i < TSS_STOCK_WINDOW_SIZE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1499
line 2310
;2308:					tss_strategySlot_t* slot;
;2309:
;2310:					slot = TSS_GetSlotAtStockPos(i);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 204
ADDRGP4 TSS_GetSlotAtStockPos
CALLP4
ASGNP4
ADDRLP4 200
ADDRLP4 204
INDIRP4
ASGNP4
line 2311
;2311:					if (slot) {
ADDRLP4 200
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1503
line 2314
;2312:						int c;
;2313:
;2314:						c = 32;
ADDRLP4 208
CNSTI4 32
ASGNI4
line 2315
;2315:						if (searchIDBuf[0] && slot->id == atoi(searchIDBuf)) c = '=';
ADDRLP4 212
ADDRGP4 searchIDBuf
ASGNP4
ADDRLP4 212
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $1505
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 216
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 200
INDIRP4
INDIRI4
ADDRLP4 216
INDIRI4
NEI4 $1505
ADDRLP4 208
CNSTI4 61
ASGNI4
LABELV $1505
line 2316
;2316:						if (i == 0 && cg.tssStrategyStockScrollOffset != 0) c = 1;
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1507
ADDRGP4 cg+132316
INDIRI4
CNSTI4 0
EQI4 $1507
ADDRLP4 208
CNSTI4 1
ASGNI4
LABELV $1507
line 2317
;2317:						if (i == TSS_STOCK_WINDOW_SIZE-1 && TSS_GetSlotAtStockPos(i+1)) c= 2;
ADDRLP4 0
INDIRI4
CNSTI4 12
NEI4 $1510
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 224
ADDRGP4 TSS_GetSlotAtStockPos
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1510
ADDRLP4 208
CNSTI4 2
ASGNI4
LABELV $1510
line 2319
;2318:
;2319:						TSS_Button(TSSBID_ADD_STRATEGY + i, " + ");
ADDRLP4 0
INDIRI4
CNSTI4 10000
ADDI4
ARGI4
ADDRGP4 $1512
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2320
;2320:						Com_sprintf(buf, sizeof(buf), "%c%03d%c", c, slot->id, c);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1513
ARGP4
ADDRLP4 228
ADDRLP4 208
INDIRI4
ASGNI4
ADDRLP4 228
INDIRI4
ARGI4
ADDRLP4 200
INDIRP4
INDIRI4
ARGI4
ADDRLP4 228
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2321
;2321:						TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2322
;2322:						textParameterChangeNotifier = &stockLineChanged[i];
ADDRGP4 textParameterChangeNotifier
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 stockLineChanged
ADDP4
ASGNP4
line 2323
;2323:						parameterReversedHome = qtrue;
ADDRGP4 parameterReversedHome
CNSTI4 1
ASGNI4
line 2324
;2324:						TSS_TextWithNumberPar(
ADDRLP4 200
INDIRP4
CNSTI4 48
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 cg+132316
ARGP4
ADDRLP4 188
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 TSS_TextWithNumberPar
CALLI4
pop
line 2328
;2325:							slot->tssname, sizeof(slot->tssname),
;2326:							&cg.tssStrategyStockScrollOffset, minScrollOffset, 0
;2327:						);
;2328:						TSS_Print(va("%c", c));
ADDRGP4 $1515
ARGP4
ADDRLP4 208
INDIRI4
ARGI4
ADDRLP4 232
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2329
;2329:						TSS_Print(slot->filename);
ADDRLP4 200
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2330
;2330:						TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2331
;2331:					}
ADDRGP4 $1504
JUMPV
LABELV $1503
line 2332
;2332:					else {
line 2333
;2333:						TSS_Print("    --- --------\n");
ADDRGP4 $1516
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2334
;2334:					}
LABELV $1504
line 2335
;2335:				}
LABELV $1500
line 2307
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 13
LTI4 $1499
line 2337
;2336:
;2337:				TSS_Print("Search ID#");
ADDRGP4 $1517
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2338
;2338:				textParameterChangeNotifier = &searchIDChanged;
ADDRGP4 textParameterChangeNotifier
ADDRGP4 searchIDChanged
ASGNP4
line 2339
;2339:				TSS_TextPar(searchIDBuf, sizeof(searchIDBuf));
ADDRGP4 searchIDBuf
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 TSS_TextPar
CALLI4
pop
line 2340
;2340:				TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2341
;2341:				if (cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1518
line 2342
;2342:					TSS_Button(TSSBID_SEARCH_SELECTED, va("search #%03d", cg.tssSelectedStrategy->slot->id));
ADDRGP4 $1521
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 200
ADDRGP4 va
CALLP4
ASGNP4
CNSTI4 22
ARGI4
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2343
;2343:				}
ADDRGP4 $1519
JUMPV
LABELV $1518
line 2344
;2344:				else {
line 2345
;2345:					TSS_Print("           ");
ADDRGP4 $1523
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2346
;2346:				}
LABELV $1519
line 2347
;2347:				if (cg.tssStrategyStockSortOrder == SSO_searchResult) {
ADDRGP4 cg+132320
INDIRI4
CNSTI4 4
NEI4 $1524
line 2348
;2348:					TSS_Print("  Pattern ");
ADDRGP4 $1527
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2349
;2349:					textParameterChangeNotifier = &searchNameChanged;
ADDRGP4 textParameterChangeNotifier
ADDRGP4 searchNameChanged
ASGNP4
line 2350
;2350:					TSS_TextPar(searchNameBuf, sizeof(searchNameBuf));
ADDRGP4 searchNameBuf
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 TSS_TextPar
CALLI4
pop
line 2351
;2351:				}
LABELV $1524
line 2352
;2352:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2353
;2353:			}
line 2354
;2354:			break;
ADDRGP4 $1092
JUMPV
LABELV $1528
line 2356
;2355:		case 2:	// administration
;2356:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2357
;2357:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2358
;2358:			TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2359
;2359:			TSS_Button(TSSBID_CREATE_STRATEGY, "create new strategy");
CNSTI4 11
ARGI4
ADDRGP4 $1529
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2360
;2360:			TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2361
;2361:			if (cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1092
line 2362
;2362:				TSS_Button(TSSBID_DUPLICATE_STRATEGY, "duplicate selected strategy");
CNSTI4 12
ARGI4
ADDRGP4 $1533
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2363
;2363:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2364
;2364:			}
line 2365
;2365:			break;
ADDRGP4 $1092
JUMPV
LABELV $1534
line 2367
;2366:		case 3:	// contents
;2367:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2368
;2368:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2369
;2369:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2371
;2370:
;2371:			if (!cg.tssSelectedStrategy) goto Exit;
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1535
ADDRGP4 $1092
JUMPV
LABELV $1535
line 2373
;2372:
;2373:			TSS_Print("RFA danger limit: ");
ADDRGP4 $1538
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2374
;2374:			CG_TSS_Parameter(
ADDRGP4 cg+132496+128
ARGP4
CNSTI4 -100
ARGI4
ADDRGP4 cg+132496+132
INDIRI4
ARGI4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_Parameter
CALLI4
pop
line 2378
;2375:				&cg.tssStrategyWorkCopy.rfa_dangerLimit, -100, cg.tssStrategyWorkCopy.rfd_dangerLimit,
;2376:				NULL, NULL, 4
;2377:			);
;2378:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2380
;2379:
;2380:			TSS_Print("RFD danger limit: ");
ADDRGP4 $1543
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2381
;2381:			CG_TSS_Parameter(
ADDRGP4 cg+132496+132
ARGP4
ADDRGP4 cg+132496+128
INDIRI4
ARGI4
CNSTI4 100
ARGI4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_Parameter
CALLI4
pop
line 2385
;2382:				&cg.tssStrategyWorkCopy.rfd_dangerLimit, cg.tssStrategyWorkCopy.rfa_dangerLimit, 100,
;2383:				NULL, NULL, 4
;2384:			);
;2385:			TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2387
;2386:
;2387:			TSS_Print("definition of \"medium term\": " TSS_GREATER_OR_EQUAL_STR);
ADDRGP4 $1548
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2388
;2388:			TSS_BigNumPar(&cg.tssStrategyWorkCopy.medium_term, 1, cg.tssStrategyWorkCopy.long_term - 1);
ADDRGP4 cg+132496+140
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cg+132496+144
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 TSS_BigNumPar
CALLI4
pop
line 2389
;2389:			TSS_Print("% of respawn delay\n");
ADDRGP4 $1553
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2391
;2390:
;2391:			TSS_Print("definition of \"long term\":   " TSS_GREATER_OR_EQUAL_STR);
ADDRGP4 $1554
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2392
;2392:			TSS_BigNumPar(&cg.tssStrategyWorkCopy.long_term, cg.tssStrategyWorkCopy.medium_term + 1, 100);
ADDRGP4 cg+132496+144
ARGP4
ADDRGP4 cg+132496+140
INDIRI4
CNSTI4 1
ADDI4
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 TSS_BigNumPar
CALLI4
pop
line 2393
;2393:			TSS_Print("% of respawn delay\n");
ADDRGP4 $1553
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2395
;2394:
;2395:			TSS_Print("\nComment\n");
ADDRGP4 $1559
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2396
;2396:			TSS_TextPar(cg.tssStrategyWorkCopy.comment, sizeof(cg.tssStrategyWorkCopy.comment));
ADDRGP4 cg+132496+60
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 TSS_TextPar
CALLI4
pop
line 2397
;2397:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2398
;2398:			break;
line 2400
;2399:		}
;2400:		break;
ADDRGP4 $1092
JUMPV
LABELV $1564
line 2402
;2401:	case 4:	// tactics
;2402:		if (!cgs.clientinfo[cg.clientNum].teamLeader) goto AccessDenied;
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1565
ADDRGP4 $1394
JUMPV
LABELV $1565
line 2407
;2403:#if !TSSINCVAR
;2404:		if (cg.tssPureServer) goto PureServer;
;2405:#endif
;2406:
;2407:		TSS_Print("===== Applied Strategy ");
ADDRGP4 $1570
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2408
;2408:		if (cg.tssUtilizedStrategy) {
ADDRGP4 cg+131680
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1571
line 2411
;2409:			const char* conditionName;
;2410:
;2411:			Com_sprintf(
ADDRGP4 cg+131680
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1574
ARGP4
ADDRLP4 192
INDIRI4
CNSTI4 97
ADDI4
ARGI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2417
;2412:				buf, sizeof(buf), "(%c) #%03d %s ",
;2413:				'a' + TSS_PaletteSlotIndex(cg.tssUtilizedStrategy),
;2414:				cg.tssUtilizedStrategy->slot->id,
;2415:				cg.tssUtilizedStrategy->slot->tssname
;2416:			);
;2417:			TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2418
;2418:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2420
;2419:
;2420:			TSS_Print("===== [");
ADDRGP4 $1578
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2421
;2421:			parameterInUse = qfalse;
ADDRGP4 parameterInUse
CNSTI4 0
ASGNI4
line 2422
;2422:			TSS_ListParTight(&cg.tssUtilizedStrategy->strategy->autoCondition, 0, 1, conditionControlNames);
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 124
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1110
ARGP4
ADDRGP4 TSS_ListParTight
CALLI4
pop
line 2423
;2423:			TSS_Print("] Condition ");
ADDRGP4 $1580
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2424
;2424:			parameterInUse = !cg.tssUtilizedStrategy->strategy->autoCondition;
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1583
ADDRLP4 196
CNSTI4 1
ASGNI4
ADDRGP4 $1584
JUMPV
LABELV $1583
ADDRLP4 196
CNSTI4 0
ASGNI4
LABELV $1584
ADDRGP4 parameterInUse
ADDRLP4 196
INDIRI4
ASGNI4
line 2425
;2425:			TSS_ListPar(&cg.tssUtilizedStrategy->condition, 0, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY, directiveShortNames);
ADDRGP4 cg+131680
INDIRP4
CNSTI4 16
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 26
ARGI4
ADDRGP4 $1113
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2426
;2426:			conditionName = cg.tssUtilizedStrategy->strategy->directives[cg.tssUtilizedStrategy->condition].name;
ADDRLP4 188
ADDRGP4 cg+131680
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
line 2427
;2427:			TSS_Print(" - ");
ADDRGP4 $1588
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2428
;2428:			parameterInUse = !cg.tssUtilizedStrategy->strategy->autoCondition;
ADDRGP4 cg+131680
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1591
ADDRLP4 200
CNSTI4 1
ASGNI4
ADDRGP4 $1592
JUMPV
LABELV $1591
ADDRLP4 200
CNSTI4 0
ASGNI4
LABELV $1592
ADDRGP4 parameterInUse
ADDRLP4 200
INDIRI4
ASGNI4
line 2429
;2429:			TSS_StringWithNumberPar(
ADDRGP4 cg+131680
INDIRP4
CNSTI4 16
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 26
ARGI4
ADDRLP4 188
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $1596
ADDRLP4 204
ADDRLP4 188
INDIRP4
ASGNP4
ADDRGP4 $1597
JUMPV
LABELV $1596
ADDRLP4 204
ADDRGP4 $1594
ASGNP4
LABELV $1597
ADDRLP4 204
INDIRP4
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2433
;2430:				&cg.tssUtilizedStrategy->condition, 0, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY,
;2431:				conditionName[0]? conditionName : "---------"
;2432:			);
;2433:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2434
;2434:		}
ADDRGP4 $1572
JUMPV
LABELV $1571
line 2435
;2435:		else {
line 2436
;2436:			TSS_Print("(-) #--- --------- ");
ADDRGP4 $1598
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2437
;2437:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2438
;2438:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2439
;2439:		}
LABELV $1572
line 2440
;2440:		TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2442
;2441:		
;2442:		TSS_Print("===== Edit ");
ADDRGP4 $1599
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2443
;2443:		if (cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1600
line 2444
;2444:			Com_sprintf(
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 TSS_PaletteSlotIndex
CALLI4
ASGNI4
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1603
ARGP4
ADDRLP4 188
INDIRI4
CNSTI4 97
ADDI4
ARGI4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2450
;2445:				buf, sizeof(buf), "(%c) #%03d %s",
;2446:				'a' + TSS_PaletteSlotIndex(cg.tssSelectedStrategy),
;2447:				cg.tssSelectedStrategy->slot->id,
;2448:				cg.tssSelectedStrategy->slot->tssname
;2449:			);
;2450:			parameterChangeNotifier = &selectedStrategyScrollOffsetChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 selectedStrategyScrollOffsetChanged
ASGNP4
line 2451
;2451:			TSS_StringWithNumberPar(&selectedStrategyScrollOffset, -100, 100, buf);
ADDRGP4 selectedStrategyScrollOffset
ARGP4
CNSTI4 -100
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 20
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2452
;2452:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2453
;2453:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2454
;2454:		}
ADDRGP4 $1601
JUMPV
LABELV $1600
line 2455
;2455:		else {
line 2456
;2456:			TSS_Print("(-) #--- --------- ");
ADDRGP4 $1598
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2457
;2457:			TSS_FillLine('=');
CNSTI4 61
ARGI4
ADDRGP4 TSS_FillLine
CALLV
pop
line 2458
;2458:			goto Exit;
ADDRGP4 $1092
JUMPV
LABELV $1601
line 2461
;2459:		}
;2460:
;2461:		directive = &cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive];
ADDRLP4 164
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148
ADDP4
ASGNP4
line 2463
;2462:
;2463:		TSS_ListParTight(&cg.tssStrategyWorkCopy.autoCondition, 0, 1, conditionControlNames);
ADDRGP4 cg+132496+124
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1110
ARGP4
ADDRGP4 TSS_ListParTight
CALLI4
pop
line 2464
;2464:		TSS_Print(" Tactics         ");
ADDRGP4 $1612
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2466
;2465:
;2466:		if (cg.tssSelectedStrategy->directive > 0) {
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1613
line 2467
;2467:			TSS_Button(TSSBID_INSERT_DIRECTIVE, "insert");
CNSTI4 17
ARGI4
ADDRGP4 $1616
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2468
;2468:			TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2469
;2469:			TSS_Button(TSSBID_DELETE_DIRECTIVE, "delete");
CNSTI4 18
ARGI4
ADDRGP4 $1617
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2470
;2470:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2471
;2471:			TSS_Button(TSSBID_CLEAR_DIRECTIVE, "clear");
CNSTI4 19
ARGI4
ADDRGP4 $1618
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2472
;2472:			TSS_Print("        ");
ADDRGP4 $1619
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2473
;2473:			TSS_Button(TSSBID_COPY_DIRECTIVE, "copy");
CNSTI4 20
ARGI4
ADDRGP4 $1620
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2474
;2474:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2475
;2475:			TSS_Button(TSSBID_PASTE_DIRECTIVE, "paste");
CNSTI4 21
ARGI4
ADDRGP4 $1621
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2476
;2476:		}
ADDRGP4 $1614
JUMPV
LABELV $1613
line 2477
;2477:		else {
line 2478
;2478:			TSS_Print("                ");
ADDRGP4 $1622
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2479
;2479:			TSS_Button(TSSBID_CLEAR_DIRECTIVE, "clear");
CNSTI4 19
ARGI4
ADDRGP4 $1618
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2480
;2480:			TSS_Print("        ");
ADDRGP4 $1619
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2481
;2481:			TSS_Button(TSSBID_COPY_DIRECTIVE, "copy");
CNSTI4 20
ARGI4
ADDRGP4 $1620
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2482
;2482:			TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2483
;2483:			TSS_Button(TSSBID_PASTE_DIRECTIVE, "paste");
CNSTI4 21
ARGI4
ADDRGP4 $1621
ARGP4
ADDRGP4 TSS_Button
CALLI4
pop
line 2484
;2484:		}
LABELV $1614
line 2485
;2485:		TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2487
;2486:
;2487:		TSS_Print("Edit Condition ");
ADDRGP4 $1623
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2488
;2488:		TSS_ListPar(&cg.tssSelectedStrategy->directive, 0, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY, directiveShortNames);
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 26
ARGI4
ADDRGP4 $1113
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2489
;2489:		TSS_Print(" - ");
ADDRGP4 $1588
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2490
;2490:		if (cg.tssSelectedStrategy->directive > 0) {
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1625
line 2495
;2491:			static const char* const directiveInUseNames[2] = {
;2492:				"[ ] off", "[X] on"
;2493:			};
;2494:
;2495:			TSS_TextWithNumberPar(
ADDRLP4 164
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 26
ARGI4
ADDRGP4 TSS_TextWithNumberPar
CALLI4
pop
line 2499
;2496:				directive->name, sizeof(directive->name),
;2497:				&cg.tssSelectedStrategy->directive, 0, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY
;2498:			);
;2499:			TSS_Print("   ");
ADDRGP4 $1207
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2500
;2500:			TSS_ListPar((int*)&directive->inUse, 0, 1, directiveInUseNames);
ADDRLP4 164
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1628
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2501
;2501:		}
ADDRGP4 $1626
JUMPV
LABELV $1625
line 2502
;2502:		else {
line 2503
;2503:			TSS_StringWithNumberPar(
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 26
ARGI4
ADDRGP4 $1633
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2507
;2504:				&cg.tssSelectedStrategy->directive, 0, TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY,
;2505:				"default                         "
;2506:			);
;2507:		}
LABELV $1626
line 2508
;2508:		TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2510
;2509:
;2510:		TSS_Print("Section #");
ADDRGP4 $1396
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2511
;2511:		TSS_NumPar(&tacticsPage, 1, numTacticsPages);
ADDRGP4 $1141
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 160
INDIRI4
ARGI4
ADDRGP4 TSS_NumPar
CALLI4
pop
line 2512
;2512:		Com_sprintf(buf, sizeof(buf), "/%d: ", numTacticsPages);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1211
ARGP4
ADDRLP4 160
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2513
;2513:		TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2514
;2514:		TSS_ListPar(&tacticsPage, 1, numTacticsPages, tacticsPageNames);
ADDRGP4 $1141
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 160
INDIRI4
ARGI4
ADDRGP4 $1142
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2516
;2515:
;2516:		switch (tacticsPage) {
ADDRLP4 188
ADDRGP4 $1141
INDIRI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 1
EQI4 $1636
ADDRLP4 188
INDIRI4
CNSTI4 2
EQI4 $1673
ADDRLP4 188
INDIRI4
CNSTI4 3
EQI4 $1699
ADDRGP4 $1092
JUMPV
LABELV $1636
line 2518
;2517:		case 1:	// division
;2518:			{
line 2521
;2519:				qboolean total, alive, ready;
;2520:
;2521:				TSS_Print("     Mode: ");
ADDRGP4 $1637
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2522
;2522:				TSS_ListPar((int*)&cg.tssDivisionMode, 1, 2, divisionModeNames);
ADDRGP4 cg+132368
ARGP4
CNSTI4 1
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 $1146
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2523
;2523:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2524
;2524:				switch (cg.tssDivisionMode) {
ADDRLP4 204
ADDRGP4 cg+132368
INDIRI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 1
EQI4 $1643
ADDRLP4 204
INDIRI4
CNSTI4 2
EQI4 $1645
ADDRGP4 $1092
JUMPV
LABELV $1643
line 2526
;2525:				case DM_quantity:
;2526:					quantitySuffix = "";
ADDRLP4 172
ADDRGP4 $705
ASGNP4
line 2527
;2527:					division = &cg.tssAbsoluteDivision;
ADDRLP4 168
ADDRGP4 cg+132372
ASGNP4
line 2528
;2528:					TSS_CreateAbsoluteDivision();
ADDRGP4 TSS_CreateAbsoluteDivision
CALLV
pop
line 2529
;2529:					break;
ADDRGP4 $1640
JUMPV
LABELV $1645
line 2531
;2530:				case DM_percentage:
;2531:					quantitySuffix = "%";
ADDRLP4 172
ADDRGP4 $938
ASGNP4
line 2532
;2532:					division = &directive->instr.division;
ADDRLP4 168
ADDRLP4 164
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
line 2533
;2533:					break;
line 2535
;2534:				default:
;2535:					goto Exit;
LABELV $1640
line 2537
;2536:				}
;2537:				Com_sprintf(buf, sizeof(buf), "remaining players: %d%s\n", division->unassignedPlayers, quantitySuffix);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1646
ARGP4
ADDRLP4 168
INDIRP4
INDIRI4
ARGI4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2538
;2538:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2540
;2539:
;2540:				total = alive = ready = qfalse;
ADDRLP4 212
CNSTI4 0
ASGNI4
ADDRLP4 200
ADDRLP4 212
INDIRI4
ASGNI4
ADDRLP4 196
ADDRLP4 212
INDIRI4
ASGNI4
ADDRLP4 192
ADDRLP4 212
INDIRI4
ASGNI4
line 2541
;2541:				for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1647
line 2545
;2542:					int group;
;2543:					int limit;
;2544:
;2545:					group = directive->instr.groupOrganization[i];
ADDRLP4 216
ADDRLP4 0
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 780
ADDP4
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 2546
;2546:					parameterChangeNotifier = &groupOrganizationChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 groupOrganizationChanged
ASGNP4
line 2547
;2547:					parameterReversedHome = qtrue;
ADDRGP4 parameterReversedHome
CNSTI4 1
ASGNI4
line 2548
;2548:					TSS_StringWithNumberPar(&cg.tssGroupOrderController[i], -10, 10, "=");
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+132328
ADDP4
ARGP4
CNSTI4 -10
ARGI4
CNSTI4 10
ARGI4
ADDRGP4 $676
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2549
;2549:					Com_sprintf(buf, sizeof(buf), "[%c] total "TSS_GREATER_OR_EQUAL_STR, group + 'A');
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1652
ARGP4
ADDRLP4 216
INDIRI4
CNSTI4 65
ADDI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2550
;2550:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2551
;2551:					limit = division->group[group].minTotalMembers + division->unassignedPlayers;
ADDRLP4 224
ADDRLP4 168
INDIRP4
ASGNP4
ADDRLP4 220
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 224
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ADDRLP4 224
INDIRP4
INDIRI4
ADDI4
ASGNI4
line 2552
;2552:					parameterChangeNotifier = &divisionChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 divisionChanged
ASGNP4
line 2553
;2553:					total |= TSS_BigNumPar(&division->group[group].minTotalMembers, 0, limit);
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
INDIRI4
ARGI4
ADDRLP4 228
ADDRGP4 TSS_BigNumPar
CALLI4
ASGNI4
ADDRLP4 192
ADDRLP4 192
INDIRI4
ADDRLP4 228
INDIRI4
BORI4
ASGNI4
line 2554
;2554:					Com_sprintf(buf, sizeof(buf), "%s      alive "TSS_GREATER_OR_EQUAL_STR, quantitySuffix);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1653
ARGP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2555
;2555:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2556
;2556:					limit = cg.tssDivisionMode == DM_quantity? division->group[group].minTotalMembers : 100;
ADDRGP4 cg+132368
INDIRI4
CNSTI4 1
NEI4 $1656
ADDRLP4 232
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $1657
JUMPV
LABELV $1656
ADDRLP4 232
CNSTI4 100
ASGNI4
LABELV $1657
ADDRLP4 220
ADDRLP4 232
INDIRI4
ASGNI4
line 2557
;2557:					parameterChangeNotifier = &divisionChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 divisionChanged
ASGNP4
line 2558
;2558:					alive |= TSS_BigNumPar(&division->group[group].minAliveMembers, 0, limit);
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
INDIRI4
ARGI4
ADDRLP4 236
ADDRGP4 TSS_BigNumPar
CALLI4
ASGNI4
ADDRLP4 196
ADDRLP4 196
INDIRI4
ADDRLP4 236
INDIRI4
BORI4
ASGNI4
line 2559
;2559:					Com_sprintf(buf, sizeof(buf), "%s      ready "TSS_GREATER_OR_EQUAL_STR, quantitySuffix);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1658
ARGP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2560
;2560:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2561
;2561:					limit = cg.tssDivisionMode == DM_quantity? division->group[group].minAliveMembers : 100;
ADDRGP4 cg+132368
INDIRI4
CNSTI4 1
NEI4 $1661
ADDRLP4 240
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $1662
JUMPV
LABELV $1661
ADDRLP4 240
CNSTI4 100
ASGNI4
LABELV $1662
ADDRLP4 220
ADDRLP4 240
INDIRI4
ASGNI4
line 2562
;2562:					parameterChangeNotifier = &divisionChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 divisionChanged
ASGNP4
line 2563
;2563:					ready |= TSS_BigNumPar(&division->group[group].minReadyMembers, 0, limit);
ADDRLP4 216
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
INDIRI4
ARGI4
ADDRLP4 244
ADDRGP4 TSS_BigNumPar
CALLI4
ASGNI4
ADDRLP4 200
ADDRLP4 200
INDIRI4
ADDRLP4 244
INDIRI4
BORI4
ASGNI4
line 2564
;2564:					Com_sprintf(buf, sizeof(buf), "%s\n", quantitySuffix);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1663
ARGP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2565
;2565:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2566
;2566:				}
LABELV $1648
line 2541
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1647
line 2569
;2567:				//	we've this much space:
;2568:				//	          "********************************************************************",
;2569:				if (total) {
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $1664
line 2570
;2570:					TSS_Print("part of the team that should be dedicated to this group\n");
ADDRGP4 $1666
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2571
;2571:				}
LABELV $1664
line 2572
;2572:				if (alive) {
ADDRLP4 196
INDIRI4
CNSTI4 0
EQI4 $1667
line 2573
;2573:					TSS_Print("part of this group that should be alive\n");
ADDRGP4 $1669
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2574
;2574:				}
LABELV $1667
line 2575
;2575:				if (ready) {
ADDRLP4 200
INDIRI4
CNSTI4 0
EQI4 $1092
line 2576
;2576:					TSS_Print("part of the living group members that should be ready for action\n");
ADDRGP4 $1672
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2577
;2577:				}
line 2578
;2578:			}
line 2579
;2579:			break;
ADDRGP4 $1092
JUMPV
LABELV $1673
line 2581
;2580:		case 2:	// orders
;2581:			{
line 2584
;2582:				qboolean di, r, s, g;
;2583:
;2584:				TSS_Print("\n\n");
ADDRGP4 $1397
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2585
;2585:				di = r = s = g = qfalse;
ADDRLP4 208
CNSTI4 0
ASGNI4
ADDRLP4 204
ADDRLP4 208
INDIRI4
ASGNI4
ADDRLP4 200
ADDRLP4 208
INDIRI4
ASGNI4
ADDRLP4 196
ADDRLP4 208
INDIRI4
ASGNI4
ADDRLP4 192
ADDRLP4 208
INDIRI4
ASGNI4
line 2586
;2586:				for (i = 0; i < MAX_GROUPS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1674
line 2589
;2587:					int group;
;2588:	
;2589:					group = directive->instr.groupOrganization[i];
ADDRLP4 212
ADDRLP4 0
INDIRI4
ADDRLP4 164
INDIRP4
CNSTI4 780
ADDP4
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 2590
;2590:					parameterChangeNotifier = &groupOrganizationChanged;
ADDRGP4 parameterChangeNotifier
ADDRGP4 groupOrganizationChanged
ASGNP4
line 2591
;2591:					parameterReversedHome = qtrue;
ADDRGP4 parameterReversedHome
CNSTI4 1
ASGNI4
line 2592
;2592:					TSS_StringWithNumberPar(&cg.tssGroupOrderController[i], -10, 10, "=");
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+132328
ADDP4
ARGP4
CNSTI4 -10
ARGI4
CNSTI4 10
ARGI4
ADDRGP4 $676
ARGP4
ADDRGP4 TSS_StringWithNumberPar
CALLI4
pop
line 2593
;2593:					Com_sprintf(buf, sizeof(buf), "[%c] ", group + 'A');
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1406
ARGP4
ADDRLP4 212
INDIRI4
CNSTI4 65
ADDI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2594
;2594:					TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2595
;2595:					TSS_ListPar(
ADDRLP4 212
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 920
ADDP4
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cg+128096
INDIRI4
CNSTI4 4
NEI4 $1681
ADDRLP4 216
CNSTI4 6
ASGNI4
ADDRGP4 $1682
JUMPV
LABELV $1681
ADDRLP4 216
CNSTI4 2
ASGNI4
LABELV $1682
ADDRLP4 216
INDIRI4
ARGI4
ADDRGP4 $1149
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2600
;2596:						(int*)&directive->instr.orders.order[group].mission,
;2597:						0, cg.tssGametype == GT_CTF? TSSMISSION_num_missions-1 : TSSMISSION_num_tdm_missions-1,
;2598:						missionNames
;2599:					);
;2600:					TSS_Print("   DI" TSS_LOWER_OR_EQUAL_STR);
ADDRGP4 $1683
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2601
;2601:					di |= TSS_NumPar(&directive->instr.orders.order[group].maxDanger, -100, 100);
ADDRLP4 212
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 -100
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 220
ADDRGP4 TSS_NumPar
CALLI4
ASGNI4
ADDRLP4 192
ADDRLP4 192
INDIRI4
ADDRLP4 220
INDIRI4
BORI4
ASGNI4
line 2602
;2602:					TSS_Print("    RP" TSS_GREATER_OR_EQUAL_STR);
ADDRGP4 $1684
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2603
;2603:					r |= TSS_NumPar(&directive->instr.orders.order[group].minReady, 0, 100);
ADDRLP4 212
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 224
ADDRGP4 TSS_NumPar
CALLI4
ASGNI4
ADDRLP4 196
ADDRLP4 196
INDIRI4
ADDRLP4 224
INDIRI4
BORI4
ASGNI4
line 2604
;2604:					TSS_Print("%    GS" TSS_GREATER_OR_EQUAL_STR);
ADDRGP4 $1685
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2605
;2605:					s |= TSS_NumPar(&directive->instr.orders.order[group].minGroupSize, 0, 100);
ADDRLP4 212
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 100
ARGI4
ADDRLP4 228
ADDRGP4 TSS_NumPar
CALLI4
ASGNI4
ADDRLP4 200
ADDRLP4 200
INDIRI4
ADDRLP4 228
INDIRI4
BORI4
ASGNI4
line 2606
;2606:					TSS_Print("%    BG" TSS_LOWER_OR_EQUAL_STR);
ADDRGP4 $1686
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2607
;2607:					g |= TSS_NumPar(&directive->instr.orders.order[group].maxGuards, 0, 9);
ADDRLP4 212
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 16
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 9
ARGI4
ADDRLP4 232
ADDRGP4 TSS_NumPar
CALLI4
ASGNI4
ADDRLP4 204
ADDRLP4 204
INDIRI4
ADDRLP4 232
INDIRI4
BORI4
ASGNI4
line 2608
;2608:					TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2609
;2609:				}
LABELV $1675
line 2586
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $1674
line 2612
;2610:				//	we've this much space:
;2611:				//	          "********************************************************************",
;2612:				if (di) {
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $1687
line 2613
;2613:					TSS_Print("Danger Index: specify upper limit for player status \"ready\"\n");
ADDRGP4 $1689
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2614
;2614:				}
LABELV $1687
line 2615
;2615:				if (r) {
ADDRLP4 196
INDIRI4
CNSTI4 0
EQI4 $1690
line 2616
;2616:					TSS_Print("Ready Players: specify lower limit for mission status \"ready\"\n");
ADDRGP4 $1692
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2617
;2617:				}
LABELV $1690
line 2618
;2618:				if (s) {
ADDRLP4 200
INDIRI4
CNSTI4 0
EQI4 $1693
line 2619
;2619:					TSS_Print("Group Size: specify lower limit for mission status \"ready\"\n");
ADDRGP4 $1695
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2620
;2620:				}
LABELV $1693
line 2621
;2621:				if (g) {
ADDRLP4 204
INDIRI4
CNSTI4 0
EQI4 $1092
line 2622
;2622:					TSS_Print("Bodyguards: max. # assigned to non-ready players\n");
ADDRGP4 $1698
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2623
;2623:				}
line 2624
;2624:			}
line 2625
;2625:			break;
ADDRGP4 $1092
JUMPV
LABELV $1699
line 2627
;2626:		case 3:	// occasion
;2627:			if (cg.tssCurrentMagnitude > 0) {
ADDRGP4 cg+132324
INDIRI4
CNSTI4 0
LEI4 $1700
line 2628
;2628:				TSS_Print("      ");
ADDRGP4 $1703
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2629
;2629:				Com_sprintf(buf, sizeof(buf), "#%2d/%d: ", cg.tssCurrentMagnitude, TSSTM_num_magnitudes-1);
ADDRLP4 20
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1704
ARGP4
ADDRGP4 cg+132324
INDIRI4
ARGI4
CNSTI4 39
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2630
;2630:				TSS_Print(buf);
ADDRLP4 20
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2631
;2631:				TSS_PrintTacticalMeasure(cg.tssCurrentMagnitude, &cg.tssMeasures);
ADDRGP4 cg+132324
INDIRI4
ARGI4
ADDRGP4 cg+130400
ARGP4
ADDRGP4 TSS_PrintTacticalMeasure
CALLV
pop
line 2632
;2632:			}
LABELV $1700
line 2633
;2633:			TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2635
;2634:
;2635:			if (cg.tssSelectedStrategy->directive <= 0) {
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1708
line 2636
;2636:				TSS_Print("\n   no other directive fits\n");
ADDRGP4 $1711
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2637
;2637:				cg.tssCurrentMagnitude = 0;
ADDRGP4 cg+132324
CNSTI4 0
ASGNI4
line 2638
;2638:			}
ADDRGP4 $1092
JUMPV
LABELV $1708
line 2639
;2639:			else {
line 2645
;2640:				static const char* const usageNames[] = {
;2641:					"[ ]", "[X]"
;2642:				};
;2643:				int i;
;2644:
;2645:				if (cg.tssCursorLine < cg.tssPrintLine) cg.tssCurrentMagnitude = 0;
ADDRGP4 cg+128120
INDIRI4
ADDRGP4 cg+128112
INDIRI4
GEI4 $1716
ADDRGP4 cg+132324
CNSTI4 0
ASGNI4
LABELV $1716
line 2647
;2646:
;2647:				for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 192
CNSTI4 0
ASGNI4
LABELV $1721
line 2651
;2648:					tss_clause_t* clause;
;2649:					int j;
;2650:
;2651:					clause = &directive->occasion.clause[i];
ADDRLP4 200
ADDRLP4 192
INDIRI4
CNSTI4 124
MULI4
ADDRLP4 164
INDIRP4
CNSTI4 36
ADDP4
ADDP4
ASGNP4
line 2653
;2652:
;2653:					if (i & 1) {
ADDRLP4 192
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1725
line 2654
;2654:						color[0] = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 2655
;2655:						color[1] = 0;
ADDRLP4 4+4
CNSTF4 0
ASGNF4
line 2656
;2656:						color[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 2657
;2657:						color[3] = 0.04;
ADDRLP4 4+12
CNSTF4 1025758986
ASGNF4
line 2658
;2658:					}
ADDRGP4 $1726
JUMPV
LABELV $1725
line 2659
;2659:					else {
line 2660
;2660:						color[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 2661
;2661:						color[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 2662
;2662:						color[2] = 1;
ADDRLP4 4+8
CNSTF4 1065353216
ASGNF4
line 2663
;2663:						color[3] = 0.04;
ADDRLP4 4+12
CNSTF4 1025758986
ASGNF4
line 2664
;2664:					}
LABELV $1726
line 2665
;2665:					CG_FillRect(TSS_X, TSS_Y + cg.tssPrintLine*SMALLCHAR_HEIGHT, TSS_W, SMALLCHAR_HEIGHT*2, color);
CNSTF4 1111490560
ARGF4
ADDRGP4 cg+128112
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 52
ADDI4
CVIF4 4
ARGF4
CNSTF4 1141374976
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 4
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 2667
;2666:
;2667:					TSS_ListPar((int*)&clause->inUse, 0, 1, usageNames);
ADDRLP4 200
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1713
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2669
;2668:
;2669:					for (j = 0; j < TSS_PREDICATES_PER_CLAUSE; j++) {
ADDRLP4 196
CNSTI4 0
ASGNI4
LABELV $1734
line 2670
;2670:						if (j == TSS_PREDICATES_PER_CLAUSE/2) {
ADDRLP4 196
INDIRI4
CNSTI4 5
NEI4 $1738
line 2671
;2671:							TSS_Print("\n ");
ADDRGP4 $1740
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2672
;2672:							TSS_Print(TSS_EvalClause(clause, &cg.tssMeasures)? "*" : " ");
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 cg+130400
ARGP4
ADDRLP4 208
ADDRGP4 TSS_EvalClause
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $1743
ADDRLP4 204
ADDRGP4 $1415
ASGNP4
ADDRGP4 $1744
JUMPV
LABELV $1743
ADDRLP4 204
ADDRGP4 $934
ASGNP4
LABELV $1744
ADDRLP4 204
INDIRP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2673
;2673:							TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2674
;2674:						}
LABELV $1738
line 2675
;2675:						TSS_Print("  ");
ADDRGP4 $932
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2676
;2676:						if (clause->inUse && TSS_EvalPredicate(&clause->predicate[j], &cg.tssMeasures)) {
ADDRLP4 204
ADDRLP4 200
INDIRP4
ASGNP4
ADDRLP4 204
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $1745
ADDRLP4 196
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ARGP4
ADDRGP4 cg+130400
ARGP4
ADDRLP4 208
ADDRGP4 TSS_EvalPredicate
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
EQI4 $1745
line 2677
;2677:							TSS_Print("*");
ADDRGP4 $1415
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2678
;2678:						}
ADDRGP4 $1746
JUMPV
LABELV $1745
line 2679
;2679:						else {
line 2680
;2680:							TSS_Print(" ");
ADDRGP4 $934
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2681
;2681:						}
LABELV $1746
line 2682
;2682:						parameterInUse = clause->inUse;
ADDRGP4 parameterInUse
ADDRLP4 200
INDIRP4
INDIRI4
ASGNI4
line 2683
;2683:						TSS_TacticalPredicatePar(&clause->predicate[j]);
ADDRLP4 196
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 200
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ARGP4
ADDRGP4 TSS_TacticalPredicatePar
CALLV
pop
line 2684
;2684:					}
LABELV $1735
line 2669
ADDRLP4 196
ADDRLP4 196
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 10
LTI4 $1734
line 2686
;2685:					
;2686:					TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2687
;2687:				}
LABELV $1722
line 2647
ADDRLP4 192
ADDRLP4 192
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 6
LTI4 $1721
line 2688
;2688:			}
line 2689
;2689:			break;
line 2691
;2690:		}
;2691:		break;
ADDRGP4 $1092
JUMPV
LABELV $1748
line 2693
;2692:	case 5:	// measures
;2693:		{
line 2819
;2694:			int startLine, lastLine;
;2695:			int col;
;2696:			tss_tacticalMagnitude_t selectedMagnitude;
;2697:			static const char* const helpLine[TSSTM_num_magnitudes] = {
;2698:				"",
;2699:			//	we've this much space:
;2700:			//	"********************************************************************",
;2701:				"(#1)  Your Team's Size\n"
;2702:				"number of players in your team",
;2703:
;2704:				"(#2)  Opposing Team's Size\n"
;2705:				"number of opponents",
;2706:
;2707:				"(#3)  Balance of Team Sizes\n"
;2708:				"YTS - OTS",
;2709:
;2710:				"(#4)  ReSPawn Delay\n"
;2711:				"respawn delay in seconds",
;2712:
;2713:				"(#5)  Your team: number of players Alive, Percentage\n"
;2714:				"100% \xb7 (YAQ / YTS)",
;2715:
;2716:				"(#6)  Your team: number of players Alive, Quantity\n"
;2717:				"number of players alive in your team",
;2718:
;2719:				"(#7)  Opposing team: number of players Alive, Percentage\n"
;2720:				"100% \xb7 (OAQ / OTS)",
;2721:
;2722:				"(#8)  Opposing team: number of players Alive, Quantity\n"
;2723:				"number of opponents alive",
;2724:
;2725:				"(#9)  Balance of players Alive, Percentage\n"
;2726:				"YAP - OAP",
;2727:
;2728:				"(#10) Balance of players Alive, Quantity\n"
;2729:				"YAQ - OAQ",
;2730:
;2731:				"(#11) Your team: players Alive, Medium-term prediction, Percentage\n"
;2732:				"100% \xb7 (YAMQ / YTS)",
;2733:
;2734:				"(#12) Your team: players Alive, Medium-term prediction, Quantity\n"
;2735:				"YAQ + dead players of your team who respawn in the medium term",
;2736:
;2737:				"(#13) Opp. team: players Alive, Medium-term prediction, Percentage\n"
;2738:				"100% \xb7 (OAMQ / OTS)",
;2739:
;2740:				"(#14) Opp. team: players Alive, Medium-term prediction, Quantity\n"
;2741:				"OAQ + dead players of the opp. team who respawn in the medium term",
;2742:
;2743:				"(#15) Balance of players Alive, Medium-term prediction, Percentage\n"
;2744:				"YAMP - OAMP",
;2745:
;2746:				"(#16) Balance of players Alive, Medium-term prediction, Quantity\n"
;2747:				"YAMQ - OAMQ",
;2748:
;2749:				"(#17) Your team: players Alive, Long-term prediction, Percentage\n"
;2750:				"100% \xb7 (YALQ / YTS)",
;2751:
;2752:				"(#18) Your team: players Alive, Long-term prediction, Quantity\n"
;2753:				"YAQ + dead players of your team who respawn in the long term",
;2754:
;2755:				"(#19) Opposing team: players Alive, Long-term prediction, Percentage\n"
;2756:				"100% \xb7 (OALQ / OTS)",
;2757:
;2758:				"(#20) Opposing team: players Alive, Long-term prediction, Quantity\n"
;2759:				"OAQ + dead players of the opp. team who respawn in the long term",
;2760:
;2761:				"(#21) Balance of players Alive, Long-term prediction, Percentage\n"
;2762:				"YALP - OALP",
;2763:
;2764:				"(#22) Balance of players Alive, Long-term prediction, Quantity\n"
;2765:				"YALQ - OALQ",
;2766:
;2767:				"(#23) Balance of players Alive, Medium-term Tendency\n"
;2768:				"100% \xb7 [(BAMQ - BAQ) / (YTS + OTS)]",
;2769:
;2770:				"(#24) Balance of players Alive, Long-term Tendency\n"
;2771:				"100% \xb7 [(BALQ - BAQ) / (YTS + OTS)]",
;2772:
;2773:				"(#25) Readiness For Attack, Percentage\n"
;2774:				"100% \xb7 (RFAQ / YTS)",
;2775:
;2776:				"(#26) Readiness For Attack, Quantity\n"
;2777:				"number of players in your team who are ready for attack",
;2778:
;2779:				"(#27) Readiness For Defence, Percentage\n"
;2780:				"100% \xb7 (RFDQ / YTS)",
;2781:
;2782:				"(#28) Readiness For Defence, Quantity\n"
;2783:				"number of players in your team who are ready for defence",
;2784:
;2785:				"(#29) Fight INtensity\n"
;2786:				"100% \xb7 [(number of fighting players in your team) / YAQ]",
;2787:
;2788:				"(#30) tidiness\n"
;2789:				"100% \xb7 [(number of co-operating players in your team) / YAQ]",
;2790:
;2791:				"(#31) AVerage STamina\n"
;2792:				"100% \xb7 [(total stamina of players alive in your team) / YAQ]",
;2793:
;2794:				"(#32) time left\n"
;2795:				"number of minutes (max. 100), or 999 if there's no time limit",
;2796:
;2797:				"(#33) Your team's Remaining Score\n"
;2798:				"max. 100, or 999 if there's no score limit",
;2799:
;2800:				"(#34) Opposing team's Remaining Score\n"
;2801:				"max. 100, or 999 if there's no score limit",
;2802:
;2803:				"(#35) SCore Balance\n"
;2804:				"your team's score - opposing team's score",
;2805:
;2806:				"(#36) Your team's Flag: Status\n"
;2807:				"at base = 1-bas, dropped = 2-dro, taken = 3-tak",
;2808:
;2809:				"(#37) Opposing team's Flag: Status\n"
;2810:				"at base = 1-bas, dropped = 2-dro, taken = 3-tak",
;2811:
;2812:				"(#38) Your team's Flag: Position\n"
;2813:				"at opponent's base = -100 ... at home base = +100",
;2814:
;2815:				"(#39) Opposing team's Flag: Position\n"
;2816:				"at opponent's base = -100 ... at home base = +100"
;2817:			};
;2818:
;2819:			if (!cgs.clientinfo[cg.clientNum].teamLeader) goto AccessDenied;
ADDRGP4 cg+4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+156
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1789
ADDRGP4 $1394
JUMPV
LABELV $1789
line 2824
;2820:#if !TSSINCVAR
;2821:			if (cg.tssPureServer) goto PureServer;
;2822:#endif
;2823:
;2824:			if (cg.tssOnline) {
ADDRGP4 cg+128220
INDIRI4
CNSTI4 0
EQI4 $1794
line 2825
;2825:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2826
;2826:			}
ADDRGP4 $1795
JUMPV
LABELV $1794
line 2827
;2827:			else {
line 2828
;2828:				TSS_Print("(Mission control is off-line, so only a few measures are valid.)\n");
ADDRGP4 $1797
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2829
;2829:			}
LABELV $1795
line 2830
;2830:			TSS_Print("\n\n\n");
ADDRGP4 $1798
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2831
;2831:			selectedMagnitude = TSSTM_no;
ADDRLP4 200
CNSTI4 0
ASGNI4
line 2832
;2832:			col = 0;
ADDRLP4 192
CNSTI4 0
ASGNI4
line 2833
;2833:			startLine = cg.tssPrintLine;
ADDRLP4 204
ADDRGP4 cg+128112
INDIRI4
ASGNI4
line 2834
;2834:			lastLine = TSS_H / SMALLCHAR_HEIGHT - 1;
ADDRLP4 196
CNSTI4 21
ASGNI4
line 2835
;2835:			for (i = 1; i < TSSTM_num_magnitudes; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1800
line 2840
;2836:				static const char* const inspectorControllerNames[2] = {
;2837:					"-", "*"
;2838:				};
;2839:
;2840:				if (!TSS_IsTacticalMagnitudeAllowed(i)) continue;
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 208
ADDRGP4 TSS_IsTacticalMagnitudeAllowed
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $1806
ADDRGP4 $1801
JUMPV
LABELV $1806
line 2842
;2841:
;2842:				cg.tssPrintCol = col;
ADDRGP4 cg+128108
ADDRLP4 192
INDIRI4
ASGNI4
line 2843
;2843:				TSS_ListPar((int*)&cg.tssInspectMagnitude[i], 0, 1, inspectorControllerNames);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+128240
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 $1804
ARGP4
ADDRGP4 TSS_ListPar
CALLI4
pop
line 2844
;2844:				TSS_PrintTacticalMeasure(i, &cg.tssMeasures);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+130400
ARGP4
ADDRGP4 TSS_PrintTacticalMeasure
CALLV
pop
line 2847
;2845:
;2846:				if (
;2847:					cg.tssPrintLine == cg.tssCursorLine &&
ADDRGP4 cg+128112
INDIRI4
ADDRGP4 cg+128120
INDIRI4
NEI4 $1811
ADDRLP4 192
INDIRI4
ADDRGP4 cg+128116
INDIRI4
GTI4 $1811
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128108
INDIRI4
GEI4 $1811
line 2850
;2848:					col <= cg.tssCursorCol &&
;2849:					cg.tssCursorCol < cg.tssPrintCol
;2850:				) {
line 2851
;2851:					selectedMagnitude = i;
ADDRLP4 200
ADDRLP4 0
INDIRI4
ASGNI4
line 2852
;2852:				}
LABELV $1811
line 2854
;2853:
;2854:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2855
;2855:				if (cg.tssPrintLine > lastLine) {
ADDRGP4 cg+128112
INDIRI4
ADDRLP4 196
INDIRI4
LEI4 $1818
line 2856
;2856:					cg.tssPrintLine = startLine;
ADDRGP4 cg+128112
ADDRLP4 204
INDIRI4
ASGNI4
line 2857
;2857:					col += 14;
ADDRLP4 192
ADDRLP4 192
INDIRI4
CNSTI4 14
ADDI4
ASGNI4
line 2858
;2858:				}
LABELV $1818
line 2859
;2859:			}
LABELV $1801
line 2835
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 40
LTI4 $1800
line 2861
;2860:
;2861:			if (selectedMagnitude > TSSTM_no) {
ADDRLP4 200
INDIRI4
CNSTI4 0
LEI4 $1092
line 2862
;2862:				cg.tssPrintLine = startLine - 3;
ADDRGP4 cg+128112
ADDRLP4 204
INDIRI4
CNSTI4 3
SUBI4
ASGNI4
line 2863
;2863:				cg.tssPrintCol = 0;
ADDRGP4 cg+128108
CNSTI4 0
ASGNI4
line 2864
;2864:				TSS_Print(helpLine[selectedMagnitude]);
ADDRLP4 200
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1749
ADDP4
INDIRP4
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2865
;2865:				TSS_Print("\n");
ADDRGP4 $694
ARGP4
ADDRGP4 TSS_Print
CALLV
pop
line 2866
;2866:			}
line 2867
;2867:		}
line 2868
;2868:		break;
line 2872
;2869:	}
;2870:
;2871:	Exit:
;2872:	return;
LABELV $1092
endproc CG_TSS_DrawInterface 248 36
proc CG_TSS_PressButton 140 16
line 2880
;2873:}
;2874:
;2875:/*
;2876:=================
;2877:CG_TSS_PressButton
;2878:=================
;2879:*/
;2880:static void CG_TSS_PressButton(void) {
line 2883
;2881:	char buf[128];
;2882:
;2883:	if (!cg.tssCurrentValue) return;
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1829
ADDRGP4 $1828
JUMPV
LABELV $1829
line 2885
;2884:
;2885:	trap_S_StartSound(NULL, cg.clientNum, CHAN_BODY, cgs.media.useNothingSound);
CNSTP4 0
ARGP4
ADDRGP4 cg+4
INDIRI4
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 cgs+751220+844
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 2887
;2886:
;2887:	switch (cg.tssButtonID) {
ADDRLP4 128
ADDRGP4 cg+128144
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
LTI4 $1835
ADDRLP4 128
INDIRI4
CNSTI4 26
GTI4 $1835
ADDRLP4 128
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1926
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1926
address $1838
address $1839
address $1843
address $1845
address $1847
address $1849
address $1851
address $1853
address $1855
address $1857
address $1859
address $1861
address $1862
address $1863
address $1866
address $1868
address $1869
address $1870
address $1873
address $1876
address $1879
address $1884
address $1903
address $1913
address $1915
address $1917
address $1919
code
LABELV $1838
line 2889
;2888:	case TSSBID_RESUMEGAME:
;2889:		CG_TSS_CloseInterface();
ADDRGP4 CG_TSS_CloseInterface
CALLV
pop
line 2890
;2890:		break;
ADDRGP4 $1836
JUMPV
LABELV $1839
line 2892
;2891:	case TSSBID_CALLLEADERVOTE:
;2892:		Com_sprintf(buf, sizeof(buf), "callteamvote leader \"%s\"", cg.tssTeamMateList[cg.tssCallVoteLeader]);
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $1840
ARGP4
ADDRGP4 cg+128200
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+129428
ADDP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 2893
;2893:		trap_SendClientCommand(buf);
ADDRLP4 0
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2894
;2894:		break;
ADDRGP4 $1836
JUMPV
LABELV $1843
line 2896
;2895:	case TSSBID_CALLSURRENDERVOTE:
;2896:		trap_SendClientCommand("callteamvote surrender");
ADDRGP4 $1844
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2897
;2897:		break;
ADDRGP4 $1836
JUMPV
LABELV $1845
line 2899
;2898:	case TSSBID_VOTE_YES:
;2899:		trap_SendClientCommand("teamvote y");
ADDRGP4 $1846
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2900
;2900:		break;
ADDRGP4 $1836
JUMPV
LABELV $1847
line 2902
;2901:	case TSSBID_VOTE_NO:
;2902:		trap_SendClientCommand("teamvote n");
ADDRGP4 $1848
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2903
;2903:		break;
ADDRGP4 $1836
JUMPV
LABELV $1849
line 2905
;2904:	case TSSBID_NAVAID_ON:
;2905:		trap_SendClientCommand("navaid 1");
ADDRGP4 $1850
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2906
;2906:		break;
ADDRGP4 $1836
JUMPV
LABELV $1851
line 2908
;2907:	case TSSBID_NAVAID_OFF:
;2908:		trap_SendClientCommand("navaid 0");
ADDRGP4 $1852
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2909
;2909:		break;
ADDRGP4 $1836
JUMPV
LABELV $1853
line 2911
;2910:	case TSSBID_GROUPFORMATION_TIGHT:
;2911:		trap_SendClientCommand("groupformation tight");
ADDRGP4 $1854
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2912
;2912:		break;
ADDRGP4 $1836
JUMPV
LABELV $1855
line 2914
;2913:	case TSSBID_GROUPFORMATION_LOOSE:
;2914:		trap_SendClientCommand("groupformation loose");
ADDRGP4 $1856
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2915
;2915:		break;
ADDRGP4 $1836
JUMPV
LABELV $1857
line 2917
;2916:	case TSSBID_GROUPFORMATION_FREE:
;2917:		trap_SendClientCommand("groupformation free");
ADDRGP4 $1858
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2918
;2918:		break;
ADDRGP4 $1836
JUMPV
LABELV $1859
line 2920
;2919:	case TSSBID_SAFETYMODE:
;2920:		trap_SendClientCommand("tssSafetyMode");	// toggles safety mode
ADDRGP4 $1860
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2921
;2921:		break;
ADDRGP4 $1836
JUMPV
LABELV $1861
line 2923
;2922:	case TSSBID_CREATE_STRATEGY:
;2923:		TSS_CreateStrategy();
ADDRGP4 TSS_CreateStrategy
CALLV
pop
line 2924
;2924:		break;
ADDRGP4 $1836
JUMPV
LABELV $1862
line 2926
;2925:	case TSSBID_DUPLICATE_STRATEGY:
;2926:		TSS_DuplicateStrategy();
ADDRGP4 TSS_DuplicateStrategy
CALLV
pop
line 2927
;2927:		break;
ADDRGP4 $1836
JUMPV
LABELV $1863
line 2929
;2928:	case TSSBID_UTILIZE_STRATEGY:
;2929:		cg.tssUtilizedStrategy = cg.tssSelectedStrategy;
ADDRGP4 cg+131680
ADDRGP4 cg+131684
INDIRP4
ASGNP4
line 2930
;2930:		break;
ADDRGP4 $1836
JUMPV
LABELV $1866
line 2932
;2931:	case TSSBID_REMOVE_STRATEGY:
;2932:		TSS_RemoveFromPalette(cg.tssSelectedStrategy);
ADDRGP4 cg+131684
INDIRP4
ARGP4
ADDRGP4 TSS_RemoveFromPalette
CALLV
pop
line 2933
;2933:		break;
ADDRGP4 $1836
JUMPV
LABELV $1868
line 2935
;2934:	case TSSBID_CANCEL:
;2935:		TSS_CancelChanges();
ADDRGP4 TSS_CancelChanges
CALLV
pop
line 2936
;2936:		break;
ADDRGP4 $1836
JUMPV
LABELV $1869
line 2938
;2937:	case TSSBID_APPLY:
;2938:		TSS_ApplyChanges();
ADDRGP4 TSS_ApplyChanges
CALLV
pop
line 2939
;2939:		break;
ADDRGP4 $1836
JUMPV
LABELV $1870
line 2941
;2940:	case TSSBID_INSERT_DIRECTIVE:
;2941:		TSS_InsertDirective(&cg.tssStrategyWorkCopy, cg.tssSelectedStrategy->directive);
ADDRGP4 cg+132496
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ARGI4
ADDRGP4 TSS_InsertDirective
CALLV
pop
line 2942
;2942:		break;
ADDRGP4 $1836
JUMPV
LABELV $1873
line 2944
;2943:	case TSSBID_DELETE_DIRECTIVE:
;2944:		TSS_DeleteDirective(&cg.tssStrategyWorkCopy, cg.tssSelectedStrategy->directive);
ADDRGP4 cg+132496
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ARGI4
ADDRGP4 TSS_DeleteDirective
CALLV
pop
line 2945
;2945:		break;
ADDRGP4 $1836
JUMPV
LABELV $1876
line 2947
;2946:	case TSSBID_CLEAR_DIRECTIVE:
;2947:		TSS_ClearDirective(&cg.tssStrategyWorkCopy, cg.tssSelectedStrategy->directive);
ADDRGP4 cg+132496
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ARGI4
ADDRGP4 TSS_ClearDirective
CALLV
pop
line 2948
;2948:		break;
ADDRGP4 $1836
JUMPV
LABELV $1879
line 2950
;2949:	case TSSBID_COPY_DIRECTIVE:
;2950:		memcpy(
ADDRGP4 cg+130560
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148
ADDP4
ARGP4
CNSTI4 1120
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 2955
;2951:			&cg.tssDirectiveClipboard,
;2952:			&cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive],
;2953:			sizeof(tss_directive_t)
;2954:		);
;2955:		break;
ADDRGP4 $1836
JUMPV
LABELV $1884
line 2957
;2956:	case TSSBID_PASTE_DIRECTIVE:
;2957:		memcpy(
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1120
MULI4
ADDRGP4 cg+132496+148
ADDP4
ARGP4
ADDRGP4 cg+130560
ARGP4
CNSTI4 1120
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 2962
;2958:			&cg.tssStrategyWorkCopy.directives[cg.tssSelectedStrategy->directive],
;2959:			&cg.tssDirectiveClipboard,
;2960:			sizeof(tss_directive_t)
;2961:		);
;2962:		if (cg.tssSelectedStrategy->directive == 0) {
ADDRGP4 cg+131684
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1836
line 2963
;2963:			memset(cg.tssStrategyWorkCopy.directives[0].name, 0, TSS_NAME_SIZE);
ADDRGP4 cg+132496+148+4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2964
;2964:			strcpy(cg.tssStrategyWorkCopy.directives[0].name, "default");
ADDRGP4 cg+132496+148+4
ARGP4
ADDRGP4 $145
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 2965
;2965:			memset(&cg.tssStrategyWorkCopy.directives[0].occasion, 0, sizeof(tss_occasion_t));
ADDRGP4 cg+132496+148+36
ARGP4
CNSTI4 0
ARGI4
CNSTI4 744
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2966
;2966:			cg.tssStrategyWorkCopy.directives[0].inUse = qtrue;
ADDRGP4 cg+132496+148
CNSTI4 1
ASGNI4
line 2967
;2967:		}
line 2968
;2968:		break;
ADDRGP4 $1836
JUMPV
LABELV $1903
line 2970
;2969:	case TSSBID_SEARCH_SELECTED:
;2970:		if (cg.tssSelectedStrategy) {
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1836
line 2973
;2971:			int sortIndex;
;2972:
;2973:			sortIndex = CG_TSS_GetSortIndexByID(cg.tssSelectedStrategy->slot->id, cg.tssStrategyStockSortOrder);
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 cg+132320
INDIRI4
ARGI4
ADDRLP4 136
ADDRGP4 CG_TSS_GetSortIndexByID
CALLI4
ASGNI4
ADDRLP4 132
ADDRLP4 136
INDIRI4
ASGNI4
line 2974
;2974:			if (sortIndex >= 0) {
ADDRLP4 132
INDIRI4
CNSTI4 0
LTI4 $1836
line 2975
;2975:				TSS_SetStockWindow((TSS_STOCK_WINDOW_SIZE-1)/2, sortIndex);
CNSTI4 6
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRGP4 TSS_SetStockWindow
CALLI4
pop
line 2976
;2976:				Com_sprintf(searchIDBuf, sizeof(searchIDBuf), "%03d", cg.tssSelectedStrategy->slot->id);
ADDRGP4 searchIDBuf
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 $1911
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 2977
;2977:			}
line 2978
;2978:		}
line 2979
;2979:		break;
ADDRGP4 $1836
JUMPV
LABELV $1913
line 2981
;2980:	case TSSBID_JOIN_RED:
;2981:		trap_SendClientCommand("team red");
ADDRGP4 $1914
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2982
;2982:		break;
ADDRGP4 $1836
JUMPV
LABELV $1915
line 2984
;2983:	case TSSBID_JOIN_BLUE:
;2984:		trap_SendClientCommand("team blue");
ADDRGP4 $1916
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2985
;2985:		break;
ADDRGP4 $1836
JUMPV
LABELV $1917
line 2987
;2986:	case TSSBID_AUTOGLC_ON:
;2987:		trap_Cvar_Set("cg_autoGLC", "1");
ADDRGP4 $1918
ARGP4
ADDRGP4 $1486
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2988
;2988:		break;
ADDRGP4 $1836
JUMPV
LABELV $1919
line 2990
;2989:	case TSSBID_AUTOGLC_OFF:
;2990:		trap_Cvar_Set("cg_autoGLC", "0");
ADDRGP4 $1918
ARGP4
ADDRGP4 $1920
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2991
;2991:		break;
ADDRGP4 $1836
JUMPV
LABELV $1835
line 2994
;2992:	default:
;2993:		if (
;2994:			cg.tssButtonID >= TSSBID_ADD_STRATEGY &&
ADDRGP4 cg+128144
INDIRI4
CNSTI4 10000
LTI4 $1836
ADDRGP4 cg+128144
INDIRI4
CNSTI4 10013
GEI4 $1836
line 2996
;2995:			cg.tssButtonID < TSSBID_ADD_STRATEGY + TSS_STOCK_WINDOW_SIZE
;2996:		) {
line 2997
;2997:			TSS_AddToPalette(TSS_GetSlotAtStockPos(cg.tssButtonID - TSSBID_ADD_STRATEGY));
ADDRGP4 cg+128144
INDIRI4
CNSTI4 10000
SUBI4
ARGI4
ADDRLP4 132
ADDRGP4 TSS_GetSlotAtStockPos
CALLP4
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRGP4 TSS_AddToPalette
CALLI4
pop
line 2998
;2998:		}
line 2999
;2999:		break;
LABELV $1836
line 3001
;3000:	}
;3001:}
LABELV $1828
endproc CG_TSS_PressButton 140 16
export CG_TSS_OpenInterface
proc CG_TSS_OpenInterface 4 4
line 3008
;3002:
;3003:/*
;3004:=================
;3005:CG_TSS_OpenInterface
;3006:=================
;3007:*/
;3008:void CG_TSS_OpenInterface(void) {
line 3010
;3009:	if (
;3010:		cgs.gametype < GT_TEAM ||
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $1935
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $1935
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $1928
LABELV $1935
line 3013
;3011:		cg.showScores ||
;3012:		cg.predictedPlayerState.pm_type == PM_INTERMISSION
;3013:	) return;
ADDRGP4 $1927
JUMPV
LABELV $1928
line 3015
;3014:
;3015:	groupOrganizationChanged = qfalse;
ADDRGP4 groupOrganizationChanged
CNSTI4 0
ASGNI4
line 3017
;3016:
;3017:	cg.tssInterfaceOn = qtrue;
ADDRGP4 cg+128100
CNSTI4 1
ASGNI4
line 3018
;3018:	cg.tssLastUpdate = 0;
ADDRGP4 cg+128104
CNSTI4 0
ASGNI4
line 3019
;3019:	cg.tssKeyEventSeq = -1;
ADDRGP4 cg+128192
CNSTI4 -1
ASGNI4
line 3020
;3020:	cg.tssMouseEventSeq = -1;
ADDRGP4 cg+128196
CNSTI4 -1
ASGNI4
line 3021
;3021:	cg.tssCurrentValue = NULL;
ADDRGP4 cg+128132
CNSTP4 0
ASGNP4
line 3022
;3022:	cg.tssMouseX = TSS_MOUSE_FACTOR * (TSS_X + SMALLCHAR_WIDTH * (cg.tssCursorCol + 0.5));
ADDRGP4 cg+128184
ADDRGP4 cg+128116
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDF4
CNSTF4 1090519040
MULF4
CNSTF4 1111490560
ADDF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 3023
;3023:	cg.tssMouseY = TSS_MOUSE_FACTOR * (TSS_Y + SMALLCHAR_HEIGHT * (cg.tssCursorLine + 0.5));
ADDRGP4 cg+128188
ADDRGP4 cg+128120
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDF4
CNSTF4 1098907648
MULF4
CNSTF4 1112539136
ADDF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 3024
;3024:	CG_TSS_UpdateInterface();
ADDRGP4 CG_TSS_UpdateInterface
CALLV
pop
line 3025
;3025:	trap_Key_SetCatcher(trap_Key_GetCatcher() | TSS_KEYCATCHER);
ADDRLP4 0
ADDRGP4 trap_Key_GetCatcher
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 3026
;3026:	trap_SendConsoleCommand("tssiopen\n");
ADDRGP4 $1945
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 3027
;3027:	lastKey = -1;
ADDRGP4 lastKey
CNSTI4 -1
ASGNI4
line 3028
;3028:	altKey = 0;
ADDRGP4 altKey
CNSTI4 0
ASGNI4
line 3029
;3029:}
LABELV $1927
endproc CG_TSS_OpenInterface 4 4
export CG_TSS_CloseInterface
proc CG_TSS_CloseInterface 0 4
line 3036
;3030:
;3031:/*
;3032:=================
;3033:CG_TSS_CloseInterface
;3034:=================
;3035:*/
;3036:void CG_TSS_CloseInterface(void) {
line 3037
;3037:	TSS_ApplyChanges();
ADDRGP4 TSS_ApplyChanges
CALLV
pop
line 3038
;3038:	cg.tssInterfaceOn = qfalse;
ADDRGP4 cg+128100
CNSTI4 0
ASGNI4
line 3039
;3039:	trap_SendConsoleCommand("tssiclose\n");
ADDRGP4 $1948
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 3040
;3040:	lastKey = -1;
ADDRGP4 lastKey
CNSTI4 -1
ASGNI4
line 3041
;3041:	altKey = 0;
ADDRGP4 altKey
CNSTI4 0
ASGNI4
line 3043
;3042:	#if TSSINCVAR
;3043:		TSS_SaveInterfaceIfNeeded();
ADDRGP4 TSS_SaveInterfaceIfNeeded
CALLV
pop
line 3045
;3044:	#endif
;3045:}
LABELV $1946
endproc CG_TSS_CloseInterface 0 4
export CG_TSS_KeyEvent
proc CG_TSS_KeyEvent 168 16
line 3052
;3046:
;3047:/*
;3048:=================
;3049:CG_TSS_KeyEvent
;3050:=================
;3051:*/
;3052:void CG_TSS_KeyEvent(int key, qboolean down) {
line 3058
;3053:	int oldCol, oldLine;
;3054:	int oldValue;
;3055:	qboolean keyRepeated;
;3056:	qboolean changesMade;
;3057:
;3058:	if (!cg.tssInterfaceOn) return;
ADDRGP4 cg+128100
INDIRI4
CNSTI4 0
NEI4 $1950
ADDRGP4 $1949
JUMPV
LABELV $1950
line 3060
;3059:
;3060:	oldCol = cg.tssCursorCol;
ADDRLP4 12
ADDRGP4 cg+128116
INDIRI4
ASGNI4
line 3061
;3061:	oldLine = cg.tssCursorLine;
ADDRLP4 4
ADDRGP4 cg+128120
INDIRI4
ASGNI4
line 3062
;3062:	oldValue = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 3063
;3063:	changesMade = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3064
;3064:	if (cg.tssCurrentValue) oldValue = *cg.tssCurrentValue;
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1955
ADDRLP4 8
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ASGNI4
LABELV $1955
line 3066
;3065:
;3066:	if (!down) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1959
line 3067
;3067:		lastKey = -1;
ADDRGP4 lastKey
CNSTI4 -1
ASGNI4
line 3068
;3068:		if (key == K_ALT && altKey) {
ADDRFP4 0
INDIRI4
CNSTI4 136
NEI4 $1949
ADDRGP4 altKey
INDIRI4
CNSTI4 0
EQI4 $1949
line 3069
;3069:			key = altKey & 255;
ADDRFP4 0
ADDRGP4 altKey
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 3070
;3070:			altKey = 0;
ADDRGP4 altKey
CNSTI4 0
ASGNI4
line 3071
;3071:			goto InsertKeyIntoTextField;
ADDRGP4 $1963
JUMPV
line 3073
;3072:		}
;3073:		return;
LABELV $1959
line 3075
;3074:	}
;3075:	if (key & K_CHAR_FLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $1964
line 3076
;3076:		keyRepeated = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 3077
;3077:	}
ADDRGP4 $1965
JUMPV
LABELV $1964
line 3078
;3078:	else {
line 3079
;3079:		keyRepeated = (key == lastKey);
ADDRFP4 0
INDIRI4
ADDRGP4 lastKey
INDIRI4
NEI4 $1967
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $1968
JUMPV
LABELV $1967
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $1968
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 3080
;3080:		lastKey = key;
ADDRGP4 lastKey
ADDRFP4 0
INDIRI4
ASGNI4
line 3081
;3081:	}
LABELV $1965
line 3083
;3082:
;3083:	switch (key) {
ADDRLP4 20
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 13
EQI4 $2058
ADDRLP4 20
INDIRI4
CNSTI4 13
GTI4 $2255
LABELV $2254
ADDRFP4 0
INDIRI4
CNSTI4 9
EQI4 $2083
ADDRGP4 $1969
JUMPV
LABELV $2255
ADDRLP4 24
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 32
EQI4 $2058
ADDRLP4 24
INDIRI4
CNSTI4 32
LTI4 $1969
LABELV $2256
ADDRLP4 28
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 127
LTI4 $1969
ADDRLP4 28
INDIRI4
CNSTI4 184
GTI4 $1969
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2257-508
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2257
address $2103
address $1969
address $1969
address $1969
address $1969
address $1994
address $2003
address $1974
address $1984
address $1969
address $1969
address $1969
address $1969
address $2103
address $2165
address $2145
address $2012
address $2034
address $1969
address $1969
address $1969
address $1969
address $1969
address $1969
address $1969
address $1969
address $1969
address $1969
address $1972
address $1971
address $1969
address $1969
address $1969
address $2206
address $2209
address $2212
address $2197
address $2200
address $2203
address $2188
address $2191
address $2194
address $2058
address $2185
address $1969
address $1969
address $2165
address $2145
address $1969
address $1969
address $1969
address $2058
address $2058
address $1969
address $1969
address $1969
address $2165
address $2145
code
LABELV $1971
line 3085
;3084:	case K_F12:
;3085:		CG_TSS_CloseInterface();
ADDRGP4 CG_TSS_CloseInterface
CALLV
pop
line 3086
;3086:		break;
ADDRGP4 $1970
JUMPV
LABELV $1972
line 3088
;3087:	case K_F11:
;3088:		trap_SendConsoleCommand("screenshot\n");
ADDRGP4 $1973
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 3089
;3089:		break;
ADDRGP4 $1970
JUMPV
LABELV $1974
line 3091
;3090:	case K_LEFTARROW:
;3091:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) goto DecreaseValue;
CNSTI4 138
ARGI4
ADDRLP4 32
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $1977
CNSTI4 137
ARGI4
ADDRLP4 36
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1975
LABELV $1977
ADDRGP4 $1978
JUMPV
LABELV $1975
line 3092
;3092:		cg.tssCursorCol--;
ADDRLP4 40
ADDRGP4 cg+128116
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3093
;3093:		if (cg.tssCursorCol < 0) cg.tssCursorCol = 0;
ADDRGP4 cg+128116
INDIRI4
CNSTI4 0
GEI4 $1970
ADDRGP4 cg+128116
CNSTI4 0
ASGNI4
line 3094
;3094:		break;
ADDRGP4 $1970
JUMPV
LABELV $1984
line 3096
;3095:	case K_RIGHTARROW:
;3096:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) goto IncreaseValue;
CNSTI4 138
ARGI4
ADDRLP4 44
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $1987
CNSTI4 137
ARGI4
ADDRLP4 48
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $1985
LABELV $1987
ADDRGP4 $1988
JUMPV
LABELV $1985
line 3097
;3097:		cg.tssCursorCol++;
ADDRLP4 52
ADDRGP4 cg+128116
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3098
;3098:		if (SMALLCHAR_WIDTH * cg.tssCursorCol >= TSS_W) cg.tssCursorCol--;
ADDRGP4 cg+128116
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 544
LTI4 $1970
ADDRLP4 56
ADDRGP4 cg+128116
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3099
;3099:		break;
ADDRGP4 $1970
JUMPV
LABELV $1994
line 3101
;3100:	case K_UPARROW:
;3101:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) goto IncreaseValue;
CNSTI4 138
ARGI4
ADDRLP4 60
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $1997
CNSTI4 137
ARGI4
ADDRLP4 64
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $1995
LABELV $1997
ADDRGP4 $1988
JUMPV
LABELV $1995
line 3102
;3102:		cg.tssCursorLine--;
ADDRLP4 68
ADDRGP4 cg+128120
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3103
;3103:		if (cg.tssCursorLine < 0) cg.tssCursorLine = 0;
ADDRGP4 cg+128120
INDIRI4
CNSTI4 0
GEI4 $1970
ADDRGP4 cg+128120
CNSTI4 0
ASGNI4
line 3104
;3104:		break;
ADDRGP4 $1970
JUMPV
LABELV $2003
line 3106
;3105:	case K_DOWNARROW:
;3106:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) goto DecreaseValue;
CNSTI4 138
ARGI4
ADDRLP4 72
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $2006
CNSTI4 137
ARGI4
ADDRLP4 76
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $2004
LABELV $2006
ADDRGP4 $1978
JUMPV
LABELV $2004
line 3107
;3107:		cg.tssCursorLine++;
ADDRLP4 80
ADDRGP4 cg+128120
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3108
;3108:		if (SMALLCHAR_HEIGHT * cg.tssCursorLine >= TSS_H) cg.tssCursorLine--;
ADDRGP4 cg+128120
INDIRI4
CNSTI4 4
LSHI4
CNSTI4 352
LTI4 $1970
ADDRLP4 84
ADDRGP4 cg+128120
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3109
;3109:		break;
ADDRGP4 $1970
JUMPV
LABELV $2012
line 3111
;3110:	case K_HOME:
;3111:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) {
CNSTI4 138
ARGI4
ADDRLP4 88
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $2015
CNSTI4 137
ARGI4
ADDRLP4 92
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $2013
LABELV $2015
line 3112
;3112:			if (cg.tssCurrentValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2016
line 3113
;3113:				*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3114
;3114:				if (cg.tssCurrentValueReversedHome) {
ADDRGP4 cg+128156
INDIRI4
CNSTI4 0
EQI4 $1970
line 3115
;3115:					*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3116
;3116:				}
line 3117
;3117:			}
ADDRGP4 $1970
JUMPV
LABELV $2016
line 3118
;3118:			else {
line 3119
;3119:				cg.tssCursorCol = 0;
ADDRGP4 cg+128116
CNSTI4 0
ASGNI4
line 3120
;3120:				cg.tssCursorLine = 0;
ADDRGP4 cg+128120
CNSTI4 0
ASGNI4
line 3121
;3121:			}
line 3122
;3122:		}
ADDRGP4 $1970
JUMPV
LABELV $2013
line 3123
;3123:		else if (cg.tssCurrentTextField) {
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2028
line 3124
;3124:			cg.tssCursorCol = cg.tssCurrentParStartCol;
ADDRGP4 cg+128116
ADDRGP4 cg+128160
INDIRI4
ASGNI4
line 3125
;3125:		}
ADDRGP4 $1970
JUMPV
LABELV $2028
line 3126
;3126:		else {
line 3127
;3127:			cg.tssCursorCol = 0;
ADDRGP4 cg+128116
CNSTI4 0
ASGNI4
line 3128
;3128:		}
line 3129
;3129:		break;
ADDRGP4 $1970
JUMPV
LABELV $2034
line 3131
;3130:	case K_END:
;3131:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) {
CNSTI4 138
ARGI4
ADDRLP4 96
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $2037
CNSTI4 137
ARGI4
ADDRLP4 100
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
EQI4 $2035
LABELV $2037
line 3132
;3132:			if (cg.tssCurrentValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2038
line 3133
;3133:				*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3134
;3134:				if (cg.tssCurrentValueReversedHome) {
ADDRGP4 cg+128156
INDIRI4
CNSTI4 0
EQI4 $1970
line 3135
;3135:					*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3136
;3136:				}
line 3137
;3137:			}
ADDRGP4 $1970
JUMPV
LABELV $2038
line 3138
;3138:			else {
line 3139
;3139:				cg.tssCursorCol = 0;
ADDRGP4 cg+128116
CNSTI4 0
ASGNI4
line 3140
;3140:				cg.tssCursorLine = TSS_H / SMALLCHAR_HEIGHT - 1;
ADDRGP4 cg+128120
CNSTI4 21
ASGNI4
line 3141
;3141:			}
line 3142
;3142:		}
ADDRGP4 $1970
JUMPV
LABELV $2035
line 3143
;3143:		else if (cg.tssCurrentTextField) {
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2050
line 3144
;3144:			cg.tssCursorCol = cg.tssCurrentParStartCol + strlen(cg.tssCurrentTextField);
ADDRGP4 cg+128128
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRGP4 cg+128116
ADDRGP4 cg+128160
INDIRI4
ADDRLP4 104
INDIRI4
ADDI4
ASGNI4
line 3145
;3145:		}
ADDRGP4 $1970
JUMPV
LABELV $2050
line 3146
;3146:		else {
line 3147
;3147:			cg.tssCursorCol = cg.tssCursorLineEnd;
ADDRGP4 cg+128116
ADDRGP4 cg+128124
INDIRI4
ASGNI4
line 3148
;3148:		}
line 3149
;3149:		break;
ADDRGP4 $1970
JUMPV
LABELV $2058
line 3155
;3150:	case K_ENTER:
;3151:	case K_KP_ENTER:
;3152:	case K_SPACE:
;3153:	case K_MOUSE1:
;3154:	case K_MOUSE2:
;3155:		if (cg.tssButtonID < 0) {
ADDRGP4 cg+128144
INDIRI4
CNSTI4 0
GEI4 $2059
line 3156
;3156:			if (cg.tssCurrentValue && !keyRepeated && !cg.tssCurrentTextField) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1970
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $1970
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1970
line 3157
;3157:				if (cg.tssCurrentValueMax - cg.tssCurrentValueMin == 1) {
ADDRGP4 cg+128152
INDIRI4
ADDRGP4 cg+128148
INDIRI4
SUBI4
CNSTI4 1
NEI4 $1970
line 3158
;3158:					trap_S_StartSound(NULL, cg.clientNum, CHAN_BODY, cgs.media.useNothingSound);
CNSTP4 0
ARGP4
ADDRGP4 cg+4
INDIRI4
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 cgs+751220+844
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3159
;3159:					if (*cg.tssCurrentValue == cg.tssCurrentValueMin) {
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRGP4 cg+128148
INDIRI4
NEI4 $2073
line 3160
;3160:						*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3161
;3161:					}
ADDRGP4 $1970
JUMPV
LABELV $2073
line 3162
;3162:					else {
line 3163
;3163:						*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3164
;3164:					}
line 3165
;3165:				}
line 3166
;3166:			}
line 3167
;3167:		}
ADDRGP4 $1970
JUMPV
LABELV $2059
line 3168
;3168:		else if (!keyRepeated) {
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $1970
line 3169
;3169:			CG_TSS_PressButton();
ADDRGP4 CG_TSS_PressButton
CALLV
pop
line 3170
;3170:			changesMade = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 3171
;3171:		}
line 3172
;3172:		break;
ADDRGP4 $1970
JUMPV
LABELV $2083
line 3174
;3173:	case K_TAB:
;3174:		if (trap_Key_IsDown(K_SHIFT) || trap_Key_IsDown(K_CTRL)) {
CNSTI4 138
ARGI4
ADDRLP4 104
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
NEI4 $2086
CNSTI4 137
ARGI4
ADDRLP4 108
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $2084
LABELV $2086
line 3175
;3175:			if (cg.tssPrevValueCol >= 0 && cg.tssPrevValueLine >= 0) {
ADDRGP4 cg+128176
INDIRI4
CNSTI4 0
LTI4 $1970
ADDRGP4 cg+128180
INDIRI4
CNSTI4 0
LTI4 $1970
line 3176
;3176:				cg.tssCursorCol = cg.tssPrevValueCol;
ADDRGP4 cg+128116
ADDRGP4 cg+128176
INDIRI4
ASGNI4
line 3177
;3177:				cg.tssCursorLine = cg.tssPrevValueLine;
ADDRGP4 cg+128120
ADDRGP4 cg+128180
INDIRI4
ASGNI4
line 3178
;3178:			}
line 3179
;3179:		}
ADDRGP4 $1970
JUMPV
LABELV $2084
line 3180
;3180:		else {
line 3181
;3181:			if (cg.tssNextValueCol >= 0 && cg.tssNextValueLine >= 0) {
ADDRGP4 cg+128168
INDIRI4
CNSTI4 0
LTI4 $1970
ADDRGP4 cg+128172
INDIRI4
CNSTI4 0
LTI4 $1970
line 3182
;3182:				cg.tssCursorCol = cg.tssNextValueCol;
ADDRGP4 cg+128116
ADDRGP4 cg+128168
INDIRI4
ASGNI4
line 3183
;3183:				cg.tssCursorLine = cg.tssNextValueLine;
ADDRGP4 cg+128120
ADDRGP4 cg+128172
INDIRI4
ASGNI4
line 3184
;3184:			}
line 3185
;3185:		}
line 3186
;3186:		break;
ADDRGP4 $1970
JUMPV
LABELV $2103
line 3189
;3187:	case K_BACKSPACE:
;3188:	case K_DEL:
;3189:		if (cg.tssCurrentTextField) {
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2104
line 3192
;3190:			int n, pos;
;3191:
;3192:			n = strlen(cg.tssCurrentTextField);
ADDRGP4 cg+128128
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 116
ADDRLP4 120
INDIRI4
ASGNI4
line 3193
;3193:			pos = cg.tssCursorCol - cg.tssCurrentParStartCol;
ADDRLP4 112
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128160
INDIRI4
SUBI4
ASGNI4
line 3194
;3194:			if (key == K_DEL || key == K_KP_DEL) pos++;
ADDRLP4 124
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 140
EQI4 $2112
ADDRLP4 124
INDIRI4
CNSTI4 171
NEI4 $2110
LABELV $2112
ADDRLP4 112
ADDRLP4 112
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2110
line 3196
;3195:
;3196:			if (pos > 0) {
ADDRLP4 112
INDIRI4
CNSTI4 0
LEI4 $1970
line 3197
;3197:				if (pos <= n) {
ADDRLP4 112
INDIRI4
ADDRLP4 116
INDIRI4
GTI4 $2115
line 3200
;3198:					int i;
;3199:
;3200:					for (i = pos-1; i < n; i++) {
ADDRLP4 128
ADDRLP4 112
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $2120
JUMPV
LABELV $2117
line 3201
;3201:						cg.tssCurrentTextField[i] = cg.tssCurrentTextField[i+1];
ADDRLP4 132
ADDRLP4 128
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 1
ADDI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 3202
;3202:					}
LABELV $2118
line 3200
ADDRLP4 128
ADDRLP4 128
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2120
ADDRLP4 128
INDIRI4
ADDRLP4 116
INDIRI4
LTI4 $2117
line 3204
;3203:
;3204:					changesMade = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 3205
;3205:					if (cg.tssCurrentTextFieldChanged) {
ADDRGP4 cg+128140
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2123
line 3206
;3206:						*cg.tssCurrentTextFieldChanged = qtrue;
ADDRGP4 cg+128140
INDIRP4
CNSTI4 1
ASGNI4
line 3207
;3207:					}
LABELV $2123
line 3208
;3208:				}
LABELV $2115
line 3209
;3209:				pos--;
ADDRLP4 112
ADDRLP4 112
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3210
;3210:				cg.tssCursorCol = cg.tssCurrentParStartCol + pos;
ADDRGP4 cg+128116
ADDRGP4 cg+128160
INDIRI4
ADDRLP4 112
INDIRI4
ADDI4
ASGNI4
line 3211
;3211:			}
line 3212
;3212:		}
ADDRGP4 $1970
JUMPV
LABELV $2104
line 3213
;3213:		else if (cg.tssCurrentValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1970
line 3214
;3214:			*cg.tssCurrentValue = 0;
ADDRGP4 cg+128132
INDIRP4
CNSTI4 0
ASGNI4
line 3215
;3215:			if (*cg.tssCurrentValue < cg.tssCurrentValueMin) {
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRGP4 cg+128148
INDIRI4
GEI4 $2133
line 3216
;3216:				*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3217
;3217:			}
LABELV $2133
line 3218
;3218:			if (*cg.tssCurrentValue > cg.tssCurrentValueMax) {
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRGP4 cg+128152
INDIRI4
LEI4 $1970
line 3219
;3219:				*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3220
;3220:			}
line 3221
;3221:		}
line 3222
;3222:		break;
ADDRGP4 $1970
JUMPV
LABELV $2145
LABELV $1988
line 3227
;3223:	case K_PGUP:
;3224:	case K_KP_PLUS:
;3225:	case K_MWHEELUP:
;3226:	IncreaseValue:
;3227:		if (cg.tssCurrentValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1970
line 3230
;3228:			int step;
;3229:			
;3230:			step = trap_Key_IsDown(K_CTRL)? 5 : 1;
CNSTI4 137
ARGI4
ADDRLP4 120
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
EQI4 $2150
ADDRLP4 116
CNSTI4 5
ASGNI4
ADDRGP4 $2151
JUMPV
LABELV $2150
ADDRLP4 116
CNSTI4 1
ASGNI4
LABELV $2151
ADDRLP4 112
ADDRLP4 116
INDIRI4
ASGNI4
line 3231
;3231:			*cg.tssCurrentValue += step;
ADDRLP4 124
ADDRGP4 cg+128132
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRI4
ADDRLP4 112
INDIRI4
ADDI4
ASGNI4
line 3232
;3232:			if (*cg.tssCurrentValue > cg.tssCurrentValueMax) {
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRGP4 cg+128152
INDIRI4
LEI4 $1970
line 3233
;3233:				*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3234
;3234:				if (cg.tssCurrentValueMax - cg.tssCurrentValueMin <= 1) {
ADDRGP4 cg+128152
INDIRI4
ADDRGP4 cg+128148
INDIRI4
SUBI4
CNSTI4 1
GTI4 $1970
line 3235
;3235:					*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3236
;3236:				}
line 3237
;3237:			}
line 3238
;3238:		}
line 3239
;3239:		break;
ADDRGP4 $1970
JUMPV
LABELV $2165
LABELV $1978
line 3244
;3240:	case K_PGDN:
;3241:	case K_KP_MINUS:
;3242:	case K_MWHEELDOWN:
;3243:	DecreaseValue:
;3244:		if (cg.tssCurrentValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1970
line 3247
;3245:			int step;
;3246:
;3247:			step = trap_Key_IsDown(K_CTRL)? 5 : 1;
CNSTI4 137
ARGI4
ADDRLP4 120
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
EQI4 $2170
ADDRLP4 116
CNSTI4 5
ASGNI4
ADDRGP4 $2171
JUMPV
LABELV $2170
ADDRLP4 116
CNSTI4 1
ASGNI4
LABELV $2171
ADDRLP4 112
ADDRLP4 116
INDIRI4
ASGNI4
line 3248
;3248:			*cg.tssCurrentValue -= step;
ADDRLP4 124
ADDRGP4 cg+128132
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRI4
ADDRLP4 112
INDIRI4
SUBI4
ASGNI4
line 3249
;3249:			if (*cg.tssCurrentValue < cg.tssCurrentValueMin) {
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRGP4 cg+128148
INDIRI4
GEI4 $1970
line 3250
;3250:				*cg.tssCurrentValue = cg.tssCurrentValueMin;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128148
INDIRI4
ASGNI4
line 3251
;3251:				if (cg.tssCurrentValueMax - cg.tssCurrentValueMin <= 1) {
ADDRGP4 cg+128152
INDIRI4
ADDRGP4 cg+128148
INDIRI4
SUBI4
CNSTI4 1
GTI4 $1970
line 3252
;3252:					*cg.tssCurrentValue = cg.tssCurrentValueMax;
ADDRGP4 cg+128132
INDIRP4
ADDRGP4 cg+128152
INDIRI4
ASGNI4
line 3253
;3253:				}
line 3254
;3254:			}
line 3255
;3255:		}
line 3256
;3256:		break;
ADDRGP4 $1970
JUMPV
LABELV $2185
line 3258
;3257:	case K_KP_INS:
;3258:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 112
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
EQI4 $1970
line 3259
;3259:			altKey = altKey * 10;
ADDRLP4 116
ADDRGP4 altKey
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTI4 10
MULI4
ASGNI4
line 3260
;3260:		}
line 3261
;3261:		break;
ADDRGP4 $1970
JUMPV
LABELV $2188
line 3263
;3262:	case K_KP_END:
;3263:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 116
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
EQI4 $1970
line 3264
;3264:			altKey = altKey * 10 + 1;
ADDRLP4 120
ADDRGP4 altKey
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 1
ADDI4
ASGNI4
line 3265
;3265:		}
line 3266
;3266:		break;
ADDRGP4 $1970
JUMPV
LABELV $2191
line 3268
;3267:	case K_KP_DOWNARROW:
;3268:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 120
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
EQI4 $1970
line 3269
;3269:			altKey = altKey * 10 + 2;
ADDRLP4 124
ADDRGP4 altKey
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 2
ADDI4
ASGNI4
line 3270
;3270:		}
line 3271
;3271:		break;
ADDRGP4 $1970
JUMPV
LABELV $2194
line 3273
;3272:	case K_KP_PGDN:
;3273:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 124
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 0
EQI4 $1970
line 3274
;3274:			altKey = altKey * 10 + 3;
ADDRLP4 128
ADDRGP4 altKey
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 3
ADDI4
ASGNI4
line 3275
;3275:		}
line 3276
;3276:		break;
ADDRGP4 $1970
JUMPV
LABELV $2197
line 3278
;3277:	case K_KP_LEFTARROW:
;3278:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 128
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
EQI4 $1970
line 3279
;3279:			altKey = altKey * 10 + 4;
ADDRLP4 132
ADDRGP4 altKey
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 4
ADDI4
ASGNI4
line 3280
;3280:		}
line 3281
;3281:		break;
ADDRGP4 $1970
JUMPV
LABELV $2200
line 3283
;3282:	case K_KP_5:
;3283:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 132
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
EQI4 $1970
line 3284
;3284:			altKey = altKey * 10 + 5;
ADDRLP4 136
ADDRGP4 altKey
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 5
ADDI4
ASGNI4
line 3285
;3285:		}
line 3286
;3286:		break;
ADDRGP4 $1970
JUMPV
LABELV $2203
line 3288
;3287:	case K_KP_RIGHTARROW:
;3288:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 136
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 0
EQI4 $1970
line 3289
;3289:			altKey = altKey * 10 + 6;
ADDRLP4 140
ADDRGP4 altKey
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 6
ADDI4
ASGNI4
line 3290
;3290:		}
line 3291
;3291:		break;
ADDRGP4 $1970
JUMPV
LABELV $2206
line 3293
;3292:	case K_KP_HOME:
;3293:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 140
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $1970
line 3294
;3294:			altKey = altKey * 10 + 7;
ADDRLP4 144
ADDRGP4 altKey
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 7
ADDI4
ASGNI4
line 3295
;3295:		}
line 3296
;3296:		break;
ADDRGP4 $1970
JUMPV
LABELV $2209
line 3298
;3297:	case K_KP_UPARROW:
;3298:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 144
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 0
EQI4 $1970
line 3299
;3299:			altKey = altKey * 10 + 8;
ADDRLP4 148
ADDRGP4 altKey
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 8
ADDI4
ASGNI4
line 3300
;3300:		}
line 3301
;3301:		break;
ADDRGP4 $1970
JUMPV
LABELV $2212
line 3303
;3302:	case K_KP_PGUP:
;3303:		if (trap_Key_IsDown(K_ALT)) {
CNSTI4 136
ARGI4
ADDRLP4 148
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 148
INDIRI4
CNSTI4 0
EQI4 $1970
line 3304
;3304:			altKey = altKey * 10 + 9;
ADDRLP4 152
ADDRGP4 altKey
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
CNSTI4 10
MULI4
CNSTI4 9
ADDI4
ASGNI4
line 3305
;3305:		}
line 3306
;3306:		break;
ADDRGP4 $1970
JUMPV
LABELV $1969
line 3358
;3307:	/*
;3308:	case '0':
;3309:	case '1':
;3310:	case '2':
;3311:	case '3':
;3312:	case '4':
;3313:	case '5':
;3314:	case '6':
;3315:	case '7':
;3316:	case '8':
;3317:	case '9':
;3318:	SetDigit:
;3319:		{
;3320:			int base;
;3321:			int i;
;3322:			int v;
;3323:			qboolean neg;
;3324:
;3325:			if (!cg.tssCurrentValue || cg.tssCurrentValueLastCol < 0) return;
;3326:
;3327:			base = 1;
;3328:			for (i = cg.tssCursorCol; i < cg.tssCurrentValueLastCol; i++) {
;3329:				base *= 10;
;3330:				if (base >= 10000) break;
;3331:			}
;3332:
;3333:			v = *cg.tssCurrentValue;
;3334:			if (v < 0) {
;3335:				neg = qtrue;
;3336:				v = -v;
;3337:			}
;3338:			else {
;3339:				neg = qfalse;
;3340:			}
;3341:			// set the choosen digit to zero
;3342:			v -= v % (10*base) - v % base;
;3343:			// add the new digit
;3344:			v += (key - '0') * base;
;3345:			// set the sign
;3346:			if (neg) v = -v;
;3347:
;3348:			if (v < cg.tssCurrentValueMin) v = cg.tssCurrentValueMin;
;3349:			else if (v > cg.tssCurrentValueMax) v = cg.tssCurrentValueMax;
;3350:			*cg.tssCurrentValue = v;
;3351:
;3352:			if (cg.tssCursorCol < cg.tssCurrentValueLastCol) cg.tssCursorCol++;
;3353:		}
;3354:		break;
;3355:	*/
;3356:	default:
;3357:		if (
;3358:			key & K_CHAR_FLAG
ADDRFP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $1970
line 3359
;3359:		) {
line 3362
;3360:			int i, pos;
;3361:
;3362:			key &= ~K_CHAR_FLAG;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 -1025
BANDI4
ASGNI4
line 3364
;3363:
;3364:			if (!cg.tssCurrentTextField) {
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2217
line 3365
;3365:				if (key == '+' && cg.tssCurrentValue) goto IncreaseValue;
ADDRFP4 0
INDIRI4
CNSTI4 43
NEI4 $2220
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2220
ADDRGP4 $1988
JUMPV
LABELV $2220
line 3366
;3366:				if (key == '-' && cg.tssCurrentValue) goto DecreaseValue;
ADDRFP4 0
INDIRI4
CNSTI4 45
NEI4 $2226
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2226
ADDRGP4 $1978
JUMPV
line 3367
;3367:				goto Exit;
LABELV $2217
LABELV $1963
line 3371
;3368:			}
;3369:
;3370:			InsertKeyIntoTextField:
;3371:			if (key < 32) goto Exit;
ADDRFP4 0
INDIRI4
CNSTI4 32
GEI4 $2227
ADDRGP4 $2226
JUMPV
LABELV $2227
line 3373
;3372:
;3373:			i = strlen(cg.tssCurrentTextField);
ADDRGP4 cg+128128
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 152
ADDRLP4 160
INDIRI4
ASGNI4
line 3374
;3374:			pos = cg.tssCursorCol - cg.tssCurrentParStartCol;
ADDRLP4 156
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128160
INDIRI4
SUBI4
ASGNI4
line 3375
;3375:			if (i < cg.tssCurrentParWidth-1 && pos < cg.tssCurrentParWidth-1) {
ADDRLP4 152
INDIRI4
ADDRGP4 cg+128164
INDIRI4
CNSTI4 1
SUBI4
GEI4 $1970
ADDRLP4 156
INDIRI4
ADDRGP4 cg+128164
INDIRI4
CNSTI4 1
SUBI4
GEI4 $1970
ADDRGP4 $2237
JUMPV
LABELV $2236
line 3376
;3376:				while (i < pos) {
line 3377
;3377:					cg.tssCurrentTextField[i] = 32;
ADDRLP4 152
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
CNSTI1 32
ASGNI1
line 3378
;3378:					i++;
ADDRLP4 152
ADDRLP4 152
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3379
;3379:				}
LABELV $2237
line 3376
ADDRLP4 152
INDIRI4
ADDRLP4 156
INDIRI4
LTI4 $2236
line 3380
;3380:				cg.tssCurrentTextField[i] = 0;
ADDRLP4 152
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 3381
;3381:				for (i++; i > pos; i--) {
ADDRLP4 152
ADDRLP4 152
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $2244
JUMPV
LABELV $2241
line 3382
;3382:					cg.tssCurrentTextField[i] = cg.tssCurrentTextField[i-1];
ADDRLP4 164
ADDRLP4 152
INDIRI4
ASGNI4
ADDRLP4 164
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
ADDRLP4 164
INDIRI4
CNSTI4 1
SUBI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 3383
;3383:				}
LABELV $2242
line 3381
ADDRLP4 152
ADDRLP4 152
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $2244
ADDRLP4 152
INDIRI4
ADDRLP4 156
INDIRI4
GTI4 $2241
line 3384
;3384:				cg.tssCurrentTextField[pos] = key;
ADDRLP4 156
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
ADDRFP4 0
INDIRI4
CVII1 4
ASGNI1
line 3385
;3385:				pos++;
ADDRLP4 156
ADDRLP4 156
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3386
;3386:				cg.tssCursorCol = cg.tssCurrentParStartCol + pos;
ADDRGP4 cg+128116
ADDRGP4 cg+128160
INDIRI4
ADDRLP4 156
INDIRI4
ADDI4
ASGNI4
line 3388
;3387:
;3388:				changesMade = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 3389
;3389:				if (cg.tssCurrentTextFieldChanged) {
ADDRGP4 cg+128140
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1970
line 3390
;3390:					*cg.tssCurrentTextFieldChanged = qtrue;
ADDRGP4 cg+128140
INDIRP4
CNSTI4 1
ASGNI4
line 3391
;3391:				}
line 3392
;3392:			}
line 3393
;3393:		}
line 3394
;3394:		break;
LABELV $1970
LABELV $2226
line 3398
;3395:	}
;3396:
;3397:	Exit:
;3398:	if (changesMade && cg.tssCurrentTextField) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $2259
ADDRGP4 cg+128128
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2259
line 3402
;3399:		// remove trailing spaces
;3400:		int i;
;3401:
;3402:		i = strlen(cg.tssCurrentTextField) - 1;
ADDRGP4 cg+128128
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 36
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $2264
JUMPV
LABELV $2263
line 3403
;3403:		while (i >= 0) {
line 3404
;3404:			if (cg.tssCurrentTextField[i] != 32) break;
ADDRLP4 32
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 32
EQI4 $2266
ADDRGP4 $2265
JUMPV
LABELV $2266
line 3406
;3405:
;3406:			cg.tssCurrentTextField[i] = 0;
ADDRLP4 32
INDIRI4
ADDRGP4 cg+128128
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 3407
;3407:			i--;
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3408
;3408:		}
LABELV $2264
line 3403
ADDRLP4 32
INDIRI4
CNSTI4 0
GEI4 $2263
LABELV $2265
line 3409
;3409:	}
LABELV $2259
line 3410
;3410:	if (cg.tssCurrentValue && *cg.tssCurrentValue != oldValue) {
ADDRGP4 cg+128132
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2270
ADDRGP4 cg+128132
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $2270
line 3411
;3411:		changesMade = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 3412
;3412:		if (cg.tssCurrentValueChanged) {
ADDRGP4 cg+128136
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2274
line 3413
;3413:			*cg.tssCurrentValueChanged = qtrue;
ADDRGP4 cg+128136
INDIRP4
CNSTI4 1
ASGNI4
line 3414
;3414:		}
LABELV $2274
line 3415
;3415:	}
LABELV $2270
line 3416
;3416:	TSS_CheckModifications();
ADDRGP4 TSS_CheckModifications
CALLV
pop
line 3417
;3417:	if (changesMade && cg.tssSelectedStrategy) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $2278
ADDRGP4 cg+131684
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2278
line 3418
;3418:		cg.tssStrategyWorkCopyChanged = TSS_MemCmp(
ADDRGP4 cg+132496
ARGP4
ADDRGP4 cg+131684
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 30388
ARGI4
ADDRLP4 32
ADDRGP4 TSS_MemCmp
CALLI4
ASGNI4
ADDRGP4 cg+162884
ADDRLP4 32
INDIRI4
ASGNI4
line 3421
;3419:			&cg.tssStrategyWorkCopy, cg.tssSelectedStrategy->strategy, sizeof(tss_strategy_t)
;3420:		);
;3421:	}
LABELV $2278
line 3423
;3422:
;3423:	if (cg.tssCursorCol != oldCol || cg.tssCursorLine != oldLine) {
ADDRGP4 cg+128116
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $2288
ADDRGP4 cg+128120
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $2284
LABELV $2288
line 3424
;3424:		cg.tssMouseX = TSS_MOUSE_FACTOR * (SMALLCHAR_WIDTH * (cg.tssCursorCol + 0.5) + TSS_X);
ADDRGP4 cg+128184
ADDRGP4 cg+128116
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDF4
CNSTF4 1090519040
MULF4
CNSTF4 1111490560
ADDF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 3425
;3425:		cg.tssMouseY = TSS_MOUSE_FACTOR * (SMALLCHAR_HEIGHT * (cg.tssCursorLine + 0.5) + TSS_Y);
ADDRGP4 cg+128188
ADDRGP4 cg+128120
INDIRI4
CVIF4 4
CNSTF4 1056964608
ADDF4
CNSTF4 1098907648
MULF4
CNSTF4 1112539136
ADDF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 3427
;3426:		if (
;3427:			cg.tssCursorLine != oldLine ||
ADDRGP4 cg+128120
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $2302
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128160
INDIRI4
LTI4 $2302
ADDRGP4 cg+128116
INDIRI4
ADDRGP4 cg+128160
INDIRI4
ADDRGP4 cg+128164
INDIRI4
ADDI4
LTI4 $2293
LABELV $2302
line 3430
;3428:			cg.tssCursorCol < cg.tssCurrentParStartCol ||
;3429:			cg.tssCursorCol >= cg.tssCurrentParStartCol + cg.tssCurrentParWidth
;3430:		) {
line 3431
;3431:			cg.tssCurrentValue = NULL;
ADDRGP4 cg+128132
CNSTP4 0
ASGNP4
line 3432
;3432:			cg.tssCurrentTextField = NULL;
ADDRGP4 cg+128128
CNSTP4 0
ASGNP4
line 3433
;3433:			cg.tssCurrentValueChanged = NULL;
ADDRGP4 cg+128136
CNSTP4 0
ASGNP4
line 3434
;3434:			cg.tssNextValueCol = -1;
ADDRGP4 cg+128168
CNSTI4 -1
ASGNI4
line 3435
;3435:			cg.tssNextValueLine = -1;
ADDRGP4 cg+128172
CNSTI4 -1
ASGNI4
line 3436
;3436:			cg.tssPrevValueCol = -1;
ADDRGP4 cg+128176
CNSTI4 -1
ASGNI4
line 3437
;3437:			cg.tssPrevValueLine = -1;
ADDRGP4 cg+128180
CNSTI4 -1
ASGNI4
line 3438
;3438:		}
LABELV $2293
line 3439
;3439:	}
LABELV $2284
line 3440
;3440:}
LABELV $1949
endproc CG_TSS_KeyEvent 168 16
export CG_TSS_MouseEvent
proc CG_TSS_MouseEvent 8 0
line 3447
;3441:
;3442:/*
;3443:=================
;3444:CG_TSS_MouseEvent
;3445:=================
;3446:*/
;3447:void CG_TSS_MouseEvent(int dx, int dy) {
line 3448
;3448:	if (!cg.tssInterfaceOn) return;
ADDRGP4 cg+128100
INDIRI4
CNSTI4 0
NEI4 $2311
ADDRGP4 $2310
JUMPV
LABELV $2311
line 3450
;3449:
;3450:	cg.tssMouseX += dx;
ADDRLP4 0
ADDRGP4 cg+128184
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 0
INDIRI4
ADDI4
ASGNI4
line 3451
;3451:	cg.tssMouseY += dy;
ADDRLP4 4
ADDRGP4 cg+128188
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 3452
;3452:	if (cg.tssMouseX < TSS_MOUSE_FACTOR * TSS_X) cg.tssMouseX = TSS_MOUSE_FACTOR * TSS_X;
ADDRGP4 cg+128184
INDIRI4
CNSTI4 96
GEI4 $2316
ADDRGP4 cg+128184
CNSTI4 96
ASGNI4
LABELV $2316
line 3453
;3453:	if (cg.tssMouseX >= TSS_MOUSE_FACTOR * (TSS_X + TSS_W)) cg.tssMouseX = TSS_MOUSE_FACTOR * (TSS_X + TSS_W) - 1;
ADDRGP4 cg+128184
INDIRI4
CNSTI4 1184
LTI4 $2320
ADDRGP4 cg+128184
CNSTI4 1183
ASGNI4
LABELV $2320
line 3454
;3454:	if (cg.tssMouseY < TSS_MOUSE_FACTOR * TSS_Y) cg.tssMouseY = TSS_MOUSE_FACTOR * TSS_Y;
ADDRGP4 cg+128188
INDIRI4
CNSTI4 104
GEI4 $2324
ADDRGP4 cg+128188
CNSTI4 104
ASGNI4
LABELV $2324
line 3455
;3455:	if (cg.tssMouseY >= TSS_MOUSE_FACTOR * (TSS_Y + TSS_H)) cg.tssMouseY = TSS_MOUSE_FACTOR * (TSS_Y + TSS_H) - 1;
ADDRGP4 cg+128188
INDIRI4
CNSTI4 808
LTI4 $2328
ADDRGP4 cg+128188
CNSTI4 807
ASGNI4
LABELV $2328
line 3457
;3456:
;3457:	cg.tssCursorCol = (cg.tssMouseX / TSS_MOUSE_FACTOR - TSS_X) / SMALLCHAR_WIDTH;
ADDRGP4 cg+128116
ADDRGP4 cg+128184
INDIRI4
CNSTI4 2
DIVI4
CNSTI4 48
SUBI4
CNSTI4 8
DIVI4
ASGNI4
line 3458
;3458:	cg.tssCursorLine = (cg.tssMouseY / TSS_MOUSE_FACTOR - TSS_Y) / SMALLCHAR_HEIGHT;
ADDRGP4 cg+128120
ADDRGP4 cg+128188
INDIRI4
CNSTI4 2
DIVI4
CNSTI4 52
SUBI4
CNSTI4 16
DIVI4
ASGNI4
line 3459
;3459:}
LABELV $2310
endproc CG_TSS_MouseEvent 8 0
proc TSS_ParseNumber 12 4
line 3477
;3460:
;3461:typedef struct {
;3462:	int sequence;
;3463:	int data1;
;3464:	int data2;
;3465:} cg_tssiEvent_t;
;3466:#define TSSI_EVENTBUFFER_SIZE 10
;3467:typedef struct {
;3468:	vmCvar_t* cvar;
;3469:	cg_tssiEvent_t events[TSSI_EVENTBUFFER_SIZE];
;3470:} cg_tssiEventBuffer_t;
;3471:
;3472:/*
;3473:=================
;3474:TSS_ParseNumber
;3475:=================
;3476:*/
;3477:static const char* TSS_ParseNumber(const char* buf, int* number) {
line 3478
;3478:	*number = -1;
ADDRFP4 4
INDIRP4
CNSTI4 -1
ASGNI4
line 3480
;3479:
;3480:	if (!buf) return NULL;
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2339
CNSTP4 0
RETP4
ADDRGP4 $2338
JUMPV
LABELV $2339
line 3481
;3481:	if ((*buf < '0' || *buf > '9') && *buf != '-') return NULL;
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 48
LTI4 $2343
ADDRLP4 0
INDIRI4
CNSTI4 57
LEI4 $2341
LABELV $2343
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 45
EQI4 $2341
CNSTP4 0
RETP4
ADDRGP4 $2338
JUMPV
LABELV $2341
line 3483
;3482:
;3483:	*number = atoi(buf);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $2345
JUMPV
LABELV $2344
line 3485
;3484:	
;3485:	while (*buf == '-' || (*buf >= '0' && *buf <= '9')) {
line 3486
;3486:		buf++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 3487
;3487:	}
LABELV $2345
line 3485
ADDRLP4 8
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 45
EQI4 $2344
ADDRLP4 8
INDIRI4
CNSTI4 48
LTI4 $2347
ADDRLP4 8
INDIRI4
CNSTI4 57
LEI4 $2344
LABELV $2347
ADDRGP4 $2349
JUMPV
LABELV $2348
line 3488
;3488:	while (*buf == '/') buf++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $2349
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 47
EQI4 $2348
line 3489
;3489:	return buf;
ADDRFP4 0
INDIRP4
RETP4
LABELV $2338
endproc TSS_ParseNumber 12 4
proc TSS_ParseEvent 12 8
line 3497
;3490:}
;3491:
;3492:/*
;3493:=================
;3494:TSS_ParseEvent
;3495:=================
;3496:*/
;3497:static const char* TSS_ParseEvent(const char* buf, cg_tssiEvent_t* event) {
line 3498
;3498:	buf = TSS_ParseNumber(buf, &event->sequence);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 TSS_ParseNumber
CALLP4
ASGNP4
ADDRFP4 0
ADDRLP4 0
INDIRP4
ASGNP4
line 3499
;3499:	buf = TSS_ParseNumber(buf, &event->data1);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 TSS_ParseNumber
CALLP4
ASGNP4
ADDRFP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 3500
;3500:	buf = TSS_ParseNumber(buf, &event->data2);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_ParseNumber
CALLP4
ASGNP4
ADDRFP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 3501
;3501:	return buf;
ADDRFP4 0
INDIRP4
RETP4
LABELV $2351
endproc TSS_ParseEvent 12 8
proc TSS_ParseEvents 20 8
line 3509
;3502:}
;3503:
;3504:/*
;3505:=================
;3506:TSS_ParseEvents
;3507:=================
;3508:*/
;3509:static int TSS_ParseEvents(cg_tssiEventBuffer_t* buffer) {
line 3514
;3510:	int i;
;3511:	const char* s;
;3512:	int maxSeq;
;3513:
;3514:	if (!buffer->cvar) return -1;
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2353
CNSTI4 -1
RETI4
ADDRGP4 $2352
JUMPV
LABELV $2353
line 3516
;3515:
;3516:	s = TSS_ParseNumber(buffer->cvar->string, &maxSeq);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 12
ADDRGP4 TSS_ParseNumber
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ASGNP4
line 3517
;3517:	for (i = 0; i < TSSI_EVENTBUFFER_SIZE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2355
line 3518
;3518:		s = TSS_ParseEvent(s, &buffer->events[i]);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 TSS_ParseEvent
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 3519
;3519:	}
LABELV $2356
line 3517
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $2355
line 3520
;3520:	return maxSeq;
ADDRLP4 8
INDIRI4
RETI4
LABELV $2352
endproc TSS_ParseEvents 20 8
export CG_TSS_CheckKeyEvents
proc CG_TSS_CheckKeyEvents 144 8
line 3528
;3521:}
;3522:
;3523:/*
;3524:=================
;3525:CG_TSS_CheckKeyEvents
;3526:=================
;3527:*/
;3528:void CG_TSS_CheckKeyEvents(void) {
line 3533
;3529:	cg_tssiEventBuffer_t buffer;
;3530:	int newSeq;
;3531:	int i;
;3532:
;3533:	if (cg_tssiKey.string[0] == '*') {
ADDRGP4 cg_tssiKey+16
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $2360
line 3534
;3534:		CG_TSS_CloseInterface();
ADDRGP4 CG_TSS_CloseInterface
CALLV
pop
line 3535
;3535:		return;
ADDRGP4 $2359
JUMPV
LABELV $2360
line 3538
;3536:	}
;3537:
;3538:	buffer.cvar = &cg_tssiKey;
ADDRLP4 4
ADDRGP4 cg_tssiKey
ASGNP4
line 3539
;3539:	newSeq = TSS_ParseEvents(&buffer);
ADDRLP4 4
ARGP4
ADDRLP4 132
ADDRGP4 TSS_ParseEvents
CALLI4
ASGNI4
ADDRLP4 128
ADDRLP4 132
INDIRI4
ASGNI4
line 3540
;3540:	if (newSeq < 0) return;
ADDRLP4 128
INDIRI4
CNSTI4 0
GEI4 $2363
ADDRGP4 $2359
JUMPV
LABELV $2363
line 3542
;3541:
;3542:	for (i = 0; i < TSSI_EVENTBUFFER_SIZE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2365
line 3545
;3543:		cg_tssiEvent_t* event;
;3544:
;3545:		event = &buffer.events[i];
ADDRLP4 136
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+4
ADDP4
ASGNP4
line 3546
;3546:		if (event->sequence <= cg.tssKeyEventSeq) continue;
ADDRLP4 136
INDIRP4
INDIRI4
ADDRGP4 cg+128192
INDIRI4
GTI4 $2370
ADDRGP4 $2366
JUMPV
LABELV $2370
line 3548
;3547:
;3548:		CG_TSS_KeyEvent(event->data1, event->data2);
ADDRLP4 136
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 136
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_TSS_KeyEvent
CALLV
pop
line 3549
;3549:	}
LABELV $2366
line 3542
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $2365
line 3551
;3550:
;3551:	cg.tssKeyEventSeq = newSeq;
ADDRGP4 cg+128192
ADDRLP4 128
INDIRI4
ASGNI4
line 3552
;3552:}
LABELV $2359
endproc CG_TSS_CheckKeyEvents 144 8
export CG_TSS_CheckMouseEvents
proc CG_TSS_CheckMouseEvents 144 8
line 3559
;3553:
;3554:/*
;3555:=================
;3556:CG_TSS_CheckMouseEvents
;3557:=================
;3558:*/
;3559:void CG_TSS_CheckMouseEvents(void) {
line 3564
;3560:	cg_tssiEventBuffer_t buffer;
;3561:	int newSeq;
;3562:	int i;
;3563:
;3564:	if (cg_tssiMouse.string[0] == '*') {
ADDRGP4 cg_tssiMouse+16
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $2375
line 3565
;3565:		CG_TSS_CloseInterface();
ADDRGP4 CG_TSS_CloseInterface
CALLV
pop
line 3566
;3566:		return;
ADDRGP4 $2374
JUMPV
LABELV $2375
line 3569
;3567:	}
;3568:
;3569:	buffer.cvar = &cg_tssiMouse;
ADDRLP4 4
ADDRGP4 cg_tssiMouse
ASGNP4
line 3570
;3570:	newSeq = TSS_ParseEvents(&buffer);
ADDRLP4 4
ARGP4
ADDRLP4 132
ADDRGP4 TSS_ParseEvents
CALLI4
ASGNI4
ADDRLP4 128
ADDRLP4 132
INDIRI4
ASGNI4
line 3571
;3571:	if (newSeq < 0) return;
ADDRLP4 128
INDIRI4
CNSTI4 0
GEI4 $2378
ADDRGP4 $2374
JUMPV
LABELV $2378
line 3573
;3572:
;3573:	for (i = 0; i < TSSI_EVENTBUFFER_SIZE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2380
line 3576
;3574:		cg_tssiEvent_t* event;
;3575:
;3576:		event = &buffer.events[i];
ADDRLP4 136
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4+4
ADDP4
ASGNP4
line 3577
;3577:		if (event->sequence <= cg.tssMouseEventSeq) continue;
ADDRLP4 136
INDIRP4
INDIRI4
ADDRGP4 cg+128196
INDIRI4
GTI4 $2385
ADDRGP4 $2381
JUMPV
LABELV $2385
line 3579
;3578:
;3579:		CG_TSS_MouseEvent(event->data1, event->data2);
ADDRLP4 136
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 136
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_TSS_MouseEvent
CALLV
pop
line 3580
;3580:	}
LABELV $2381
line 3573
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $2380
line 3582
;3581:
;3582:	cg.tssMouseEventSeq = newSeq;
ADDRGP4 cg+128196
ADDRLP4 128
INDIRI4
ASGNI4
line 3583
;3583:}
LABELV $2374
endproc CG_TSS_CheckMouseEvents 144 8
bss
align 4
LABELV searchNameChanged
skip 4
align 4
LABELV searchIDChanged
skip 4
align 4
LABELV stockLineChanged
skip 52
align 4
LABELV selectedStrategyScrollOffsetChanged
skip 4
align 4
LABELV divisionChanged
skip 4
align 4
LABELV groupOrganizationChanged
skip 4
align 4
LABELV cursorC
skip 4
align 1
LABELV searchNameBuf
skip 32
align 1
LABELV searchIDBuf
skip 4
align 4
LABELV altKey
skip 4
align 4
LABELV lastKey
skip 4
align 4
LABELV selectedStrategyScrollOffset
skip 4
import CG_AdjustParticles
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_StrategyNameChanged
import CG_TSS_SetSearchPattern
import CG_TSS_CreateNewStrategy
import CG_TSS_FreePaletteSlot
import CG_TSS_SavePaletteSlotIfNeeded
import CG_TSS_LoadPaletteSlot
import CG_TSS_GetSortIndexByID
import CG_TSS_GetSortedSlot
import CG_TSS_GetSlotByName
import CG_TSS_GetSlotByID
import CG_TSS_NumStrategiesInStock
import TSSFS_SaveStrategyStock
import TSSFS_LoadStrategyStock
import TSSFS_LoadStrategy
import TSSFS_SaveStrategy
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_BFGsuperExpl
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_DrawLightBlobs
import CG_CheckStrongLight
import CG_AddLightningMarks
import CG_AddNearbox
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Draw3DLine
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PrevWeaponOrder_f
import CG_NextWeaponOrder_f
import CG_SkipWeapon_f
import CG_BestWeapon_f
import CG_AutoSwitchToBestWeapon
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1973
byte 1 115
byte 1 99
byte 1 114
byte 1 101
byte 1 101
byte 1 110
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $1948
byte 1 116
byte 1 115
byte 1 115
byte 1 105
byte 1 99
byte 1 108
byte 1 111
byte 1 115
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $1945
byte 1 116
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 112
byte 1 101
byte 1 110
byte 1 10
byte 1 0
align 1
LABELV $1920
byte 1 48
byte 1 0
align 1
LABELV $1918
byte 1 99
byte 1 103
byte 1 95
byte 1 97
byte 1 117
byte 1 116
byte 1 111
byte 1 71
byte 1 76
byte 1 67
byte 1 0
align 1
LABELV $1916
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $1914
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $1911
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 0
align 1
LABELV $1860
byte 1 116
byte 1 115
byte 1 115
byte 1 83
byte 1 97
byte 1 102
byte 1 101
byte 1 116
byte 1 121
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1858
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 102
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 114
byte 1 101
byte 1 101
byte 1 0
align 1
LABELV $1856
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 102
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 111
byte 1 111
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $1854
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 102
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 116
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $1852
byte 1 110
byte 1 97
byte 1 118
byte 1 97
byte 1 105
byte 1 100
byte 1 32
byte 1 48
byte 1 0
align 1
LABELV $1850
byte 1 110
byte 1 97
byte 1 118
byte 1 97
byte 1 105
byte 1 100
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $1848
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 110
byte 1 0
align 1
LABELV $1846
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 121
byte 1 0
align 1
LABELV $1844
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 115
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1840
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 0
align 1
LABELV $1805
byte 1 45
byte 1 0
align 1
LABELV $1798
byte 1 10
byte 1 10
byte 1 10
byte 1 0
align 1
LABELV $1797
byte 1 40
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 110
byte 1 116
byte 1 114
byte 1 111
byte 1 108
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 102
byte 1 45
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 44
byte 1 32
byte 1 115
byte 1 111
byte 1 32
byte 1 111
byte 1 110
byte 1 108
byte 1 121
byte 1 32
byte 1 97
byte 1 32
byte 1 102
byte 1 101
byte 1 119
byte 1 32
byte 1 109
byte 1 101
byte 1 97
byte 1 115
byte 1 117
byte 1 114
byte 1 101
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 46
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $1788
byte 1 40
byte 1 35
byte 1 51
byte 1 57
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 58
byte 1 32
byte 1 80
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 97
byte 1 116
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 110
byte 1 101
byte 1 110
byte 1 116
byte 1 39
byte 1 115
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 45
byte 1 49
byte 1 48
byte 1 48
byte 1 32
byte 1 46
byte 1 46
byte 1 46
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 104
byte 1 111
byte 1 109
byte 1 101
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 43
byte 1 49
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $1787
byte 1 40
byte 1 35
byte 1 51
byte 1 56
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 58
byte 1 32
byte 1 80
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 97
byte 1 116
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 110
byte 1 101
byte 1 110
byte 1 116
byte 1 39
byte 1 115
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 45
byte 1 49
byte 1 48
byte 1 48
byte 1 32
byte 1 46
byte 1 46
byte 1 46
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 104
byte 1 111
byte 1 109
byte 1 101
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 43
byte 1 49
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $1786
byte 1 40
byte 1 35
byte 1 51
byte 1 55
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 58
byte 1 32
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 10
byte 1 97
byte 1 116
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 49
byte 1 45
byte 1 98
byte 1 97
byte 1 115
byte 1 44
byte 1 32
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 112
byte 1 101
byte 1 100
byte 1 32
byte 1 61
byte 1 32
byte 1 50
byte 1 45
byte 1 100
byte 1 114
byte 1 111
byte 1 44
byte 1 32
byte 1 116
byte 1 97
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 61
byte 1 32
byte 1 51
byte 1 45
byte 1 116
byte 1 97
byte 1 107
byte 1 0
align 1
LABELV $1785
byte 1 40
byte 1 35
byte 1 51
byte 1 54
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 58
byte 1 32
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 10
byte 1 97
byte 1 116
byte 1 32
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 49
byte 1 45
byte 1 98
byte 1 97
byte 1 115
byte 1 44
byte 1 32
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 112
byte 1 101
byte 1 100
byte 1 32
byte 1 61
byte 1 32
byte 1 50
byte 1 45
byte 1 100
byte 1 114
byte 1 111
byte 1 44
byte 1 32
byte 1 116
byte 1 97
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 61
byte 1 32
byte 1 51
byte 1 45
byte 1 116
byte 1 97
byte 1 107
byte 1 0
align 1
LABELV $1784
byte 1 40
byte 1 35
byte 1 51
byte 1 53
byte 1 41
byte 1 32
byte 1 83
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 10
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 45
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $1783
byte 1 40
byte 1 35
byte 1 51
byte 1 52
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 82
byte 1 101
byte 1 109
byte 1 97
byte 1 105
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 10
byte 1 109
byte 1 97
byte 1 120
byte 1 46
byte 1 32
byte 1 49
byte 1 48
byte 1 48
byte 1 44
byte 1 32
byte 1 111
byte 1 114
byte 1 32
byte 1 57
byte 1 57
byte 1 57
byte 1 32
byte 1 105
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 39
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $1782
byte 1 40
byte 1 35
byte 1 51
byte 1 51
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 82
byte 1 101
byte 1 109
byte 1 97
byte 1 105
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 10
byte 1 109
byte 1 97
byte 1 120
byte 1 46
byte 1 32
byte 1 49
byte 1 48
byte 1 48
byte 1 44
byte 1 32
byte 1 111
byte 1 114
byte 1 32
byte 1 57
byte 1 57
byte 1 57
byte 1 32
byte 1 105
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 39
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $1781
byte 1 40
byte 1 35
byte 1 51
byte 1 50
byte 1 41
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 102
byte 1 116
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 109
byte 1 105
byte 1 110
byte 1 117
byte 1 116
byte 1 101
byte 1 115
byte 1 32
byte 1 40
byte 1 109
byte 1 97
byte 1 120
byte 1 46
byte 1 32
byte 1 49
byte 1 48
byte 1 48
byte 1 41
byte 1 44
byte 1 32
byte 1 111
byte 1 114
byte 1 32
byte 1 57
byte 1 57
byte 1 57
byte 1 32
byte 1 105
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 39
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $1780
byte 1 40
byte 1 35
byte 1 51
byte 1 49
byte 1 41
byte 1 32
byte 1 65
byte 1 86
byte 1 101
byte 1 114
byte 1 97
byte 1 103
byte 1 101
byte 1 32
byte 1 83
byte 1 84
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 91
byte 1 40
byte 1 116
byte 1 111
byte 1 116
byte 1 97
byte 1 108
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 41
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 65
byte 1 81
byte 1 93
byte 1 0
align 1
LABELV $1779
byte 1 40
byte 1 35
byte 1 51
byte 1 48
byte 1 41
byte 1 32
byte 1 116
byte 1 105
byte 1 100
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 115
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 91
byte 1 40
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 99
byte 1 111
byte 1 45
byte 1 111
byte 1 112
byte 1 101
byte 1 114
byte 1 97
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 41
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 65
byte 1 81
byte 1 93
byte 1 0
align 1
LABELV $1778
byte 1 40
byte 1 35
byte 1 50
byte 1 57
byte 1 41
byte 1 32
byte 1 70
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 32
byte 1 73
byte 1 78
byte 1 116
byte 1 101
byte 1 110
byte 1 115
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 91
byte 1 40
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 102
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 41
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 65
byte 1 81
byte 1 93
byte 1 0
align 1
LABELV $1777
byte 1 40
byte 1 35
byte 1 50
byte 1 56
byte 1 41
byte 1 32
byte 1 82
byte 1 101
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $1776
byte 1 40
byte 1 35
byte 1 50
byte 1 55
byte 1 41
byte 1 32
byte 1 82
byte 1 101
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 82
byte 1 70
byte 1 68
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1775
byte 1 40
byte 1 35
byte 1 50
byte 1 54
byte 1 41
byte 1 32
byte 1 82
byte 1 101
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 116
byte 1 116
byte 1 97
byte 1 99
byte 1 107
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 116
byte 1 97
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $1774
byte 1 40
byte 1 35
byte 1 50
byte 1 53
byte 1 41
byte 1 32
byte 1 82
byte 1 101
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 116
byte 1 116
byte 1 97
byte 1 99
byte 1 107
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 82
byte 1 70
byte 1 65
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1773
byte 1 40
byte 1 35
byte 1 50
byte 1 52
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 84
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 110
byte 1 99
byte 1 121
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 91
byte 1 40
byte 1 66
byte 1 65
byte 1 76
byte 1 81
byte 1 32
byte 1 45
byte 1 32
byte 1 66
byte 1 65
byte 1 81
byte 1 41
byte 1 32
byte 1 47
byte 1 32
byte 1 40
byte 1 89
byte 1 84
byte 1 83
byte 1 32
byte 1 43
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 41
byte 1 93
byte 1 0
align 1
LABELV $1772
byte 1 40
byte 1 35
byte 1 50
byte 1 51
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 84
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 110
byte 1 99
byte 1 121
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 91
byte 1 40
byte 1 66
byte 1 65
byte 1 77
byte 1 81
byte 1 32
byte 1 45
byte 1 32
byte 1 66
byte 1 65
byte 1 81
byte 1 41
byte 1 32
byte 1 47
byte 1 32
byte 1 40
byte 1 89
byte 1 84
byte 1 83
byte 1 32
byte 1 43
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 41
byte 1 93
byte 1 0
align 1
LABELV $1771
byte 1 40
byte 1 35
byte 1 50
byte 1 50
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 89
byte 1 65
byte 1 76
byte 1 81
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 76
byte 1 81
byte 1 0
align 1
LABELV $1770
byte 1 40
byte 1 35
byte 1 50
byte 1 49
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 89
byte 1 65
byte 1 76
byte 1 80
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 76
byte 1 80
byte 1 0
align 1
LABELV $1769
byte 1 40
byte 1 35
byte 1 50
byte 1 48
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 79
byte 1 65
byte 1 81
byte 1 32
byte 1 43
byte 1 32
byte 1 100
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 46
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 0
align 1
LABELV $1768
byte 1 40
byte 1 35
byte 1 49
byte 1 57
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 79
byte 1 65
byte 1 76
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1767
byte 1 40
byte 1 35
byte 1 49
byte 1 56
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 89
byte 1 65
byte 1 81
byte 1 32
byte 1 43
byte 1 32
byte 1 100
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 0
align 1
LABELV $1766
byte 1 40
byte 1 35
byte 1 49
byte 1 55
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 76
byte 1 111
byte 1 110
byte 1 103
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 89
byte 1 65
byte 1 76
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1765
byte 1 40
byte 1 35
byte 1 49
byte 1 54
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 89
byte 1 65
byte 1 77
byte 1 81
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 77
byte 1 81
byte 1 0
align 1
LABELV $1764
byte 1 40
byte 1 35
byte 1 49
byte 1 53
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 89
byte 1 65
byte 1 77
byte 1 80
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 77
byte 1 80
byte 1 0
align 1
LABELV $1763
byte 1 40
byte 1 35
byte 1 49
byte 1 52
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 46
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 79
byte 1 65
byte 1 81
byte 1 32
byte 1 43
byte 1 32
byte 1 100
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 46
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 0
align 1
LABELV $1762
byte 1 40
byte 1 35
byte 1 49
byte 1 51
byte 1 41
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 46
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 79
byte 1 65
byte 1 77
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1761
byte 1 40
byte 1 35
byte 1 49
byte 1 50
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 89
byte 1 65
byte 1 81
byte 1 32
byte 1 43
byte 1 32
byte 1 100
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 119
byte 1 104
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 0
align 1
LABELV $1760
byte 1 40
byte 1 35
byte 1 49
byte 1 49
byte 1 41
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 77
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 45
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 89
byte 1 65
byte 1 77
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1759
byte 1 40
byte 1 35
byte 1 49
byte 1 48
byte 1 41
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 89
byte 1 65
byte 1 81
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 81
byte 1 0
align 1
LABELV $1758
byte 1 40
byte 1 35
byte 1 57
byte 1 41
byte 1 32
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 89
byte 1 65
byte 1 80
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 65
byte 1 80
byte 1 0
align 1
LABELV $1757
byte 1 40
byte 1 35
byte 1 56
byte 1 41
byte 1 32
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 110
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $1756
byte 1 40
byte 1 35
byte 1 55
byte 1 41
byte 1 32
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 79
byte 1 65
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1755
byte 1 40
byte 1 35
byte 1 54
byte 1 41
byte 1 32
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $1754
byte 1 40
byte 1 35
byte 1 53
byte 1 41
byte 1 32
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 65
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 44
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 10
byte 1 49
byte 1 48
byte 1 48
byte 1 37
byte 1 32
byte 1 183
byte 1 32
byte 1 40
byte 1 89
byte 1 65
byte 1 81
byte 1 32
byte 1 47
byte 1 32
byte 1 89
byte 1 84
byte 1 83
byte 1 41
byte 1 0
align 1
LABELV $1753
byte 1 40
byte 1 35
byte 1 52
byte 1 41
byte 1 32
byte 1 32
byte 1 82
byte 1 101
byte 1 83
byte 1 80
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 68
byte 1 101
byte 1 108
byte 1 97
byte 1 121
byte 1 10
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 121
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 115
byte 1 0
align 1
LABELV $1752
byte 1 40
byte 1 35
byte 1 51
byte 1 41
byte 1 32
byte 1 32
byte 1 66
byte 1 97
byte 1 108
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 83
byte 1 105
byte 1 122
byte 1 101
byte 1 115
byte 1 10
byte 1 89
byte 1 84
byte 1 83
byte 1 32
byte 1 45
byte 1 32
byte 1 79
byte 1 84
byte 1 83
byte 1 0
align 1
LABELV $1751
byte 1 40
byte 1 35
byte 1 50
byte 1 41
byte 1 32
byte 1 32
byte 1 79
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 83
byte 1 105
byte 1 122
byte 1 101
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 110
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $1750
byte 1 40
byte 1 35
byte 1 49
byte 1 41
byte 1 32
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 39
byte 1 115
byte 1 32
byte 1 83
byte 1 105
byte 1 122
byte 1 101
byte 1 10
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $1740
byte 1 10
byte 1 32
byte 1 0
align 1
LABELV $1715
byte 1 91
byte 1 88
byte 1 93
byte 1 0
align 1
LABELV $1714
byte 1 91
byte 1 32
byte 1 93
byte 1 0
align 1
LABELV $1711
byte 1 10
byte 1 32
byte 1 32
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 111
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 32
byte 1 100
byte 1 105
byte 1 114
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 102
byte 1 105
byte 1 116
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1704
byte 1 35
byte 1 37
byte 1 50
byte 1 100
byte 1 47
byte 1 37
byte 1 100
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1703
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1698
byte 1 66
byte 1 111
byte 1 100
byte 1 121
byte 1 103
byte 1 117
byte 1 97
byte 1 114
byte 1 100
byte 1 115
byte 1 58
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 46
byte 1 32
byte 1 35
byte 1 32
byte 1 97
byte 1 115
byte 1 115
byte 1 105
byte 1 103
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 110
byte 1 111
byte 1 110
byte 1 45
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1695
byte 1 71
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 83
byte 1 105
byte 1 122
byte 1 101
byte 1 58
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 105
byte 1 102
byte 1 121
byte 1 32
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 32
byte 1 34
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $1692
byte 1 82
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 58
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 105
byte 1 102
byte 1 121
byte 1 32
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 32
byte 1 34
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $1689
byte 1 68
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 114
byte 1 32
byte 1 73
byte 1 110
byte 1 100
byte 1 101
byte 1 120
byte 1 58
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 105
byte 1 102
byte 1 121
byte 1 32
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 32
byte 1 34
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $1686
byte 1 37
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 66
byte 1 71
byte 1 144
byte 1 0
align 1
LABELV $1685
byte 1 37
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 71
byte 1 83
byte 1 145
byte 1 0
align 1
LABELV $1684
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 82
byte 1 80
byte 1 145
byte 1 0
align 1
LABELV $1683
byte 1 32
byte 1 32
byte 1 32
byte 1 68
byte 1 73
byte 1 144
byte 1 0
align 1
LABELV $1672
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 108
byte 1 105
byte 1 118
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 109
byte 1 101
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 115
byte 1 104
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 32
byte 1 98
byte 1 101
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 10
byte 1 0
align 1
LABELV $1669
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 115
byte 1 104
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 32
byte 1 98
byte 1 101
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $1666
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 115
byte 1 104
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 32
byte 1 98
byte 1 101
byte 1 32
byte 1 100
byte 1 101
byte 1 100
byte 1 105
byte 1 99
byte 1 97
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $1663
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1658
byte 1 37
byte 1 115
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 145
byte 1 0
align 1
LABELV $1653
byte 1 37
byte 1 115
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 145
byte 1 0
align 1
LABELV $1652
byte 1 91
byte 1 37
byte 1 99
byte 1 93
byte 1 32
byte 1 116
byte 1 111
byte 1 116
byte 1 97
byte 1 108
byte 1 32
byte 1 145
byte 1 0
align 1
LABELV $1646
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 105
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1637
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1633
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1630
byte 1 91
byte 1 88
byte 1 93
byte 1 32
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1629
byte 1 91
byte 1 32
byte 1 93
byte 1 32
byte 1 111
byte 1 102
byte 1 102
byte 1 0
align 1
LABELV $1623
byte 1 69
byte 1 100
byte 1 105
byte 1 116
byte 1 32
byte 1 67
byte 1 111
byte 1 110
byte 1 100
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 0
align 1
LABELV $1622
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1621
byte 1 112
byte 1 97
byte 1 115
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1620
byte 1 99
byte 1 111
byte 1 112
byte 1 121
byte 1 0
align 1
LABELV $1619
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1618
byte 1 99
byte 1 108
byte 1 101
byte 1 97
byte 1 114
byte 1 0
align 1
LABELV $1617
byte 1 100
byte 1 101
byte 1 108
byte 1 101
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1616
byte 1 105
byte 1 110
byte 1 115
byte 1 101
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $1612
byte 1 32
byte 1 84
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 99
byte 1 115
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1603
byte 1 40
byte 1 37
byte 1 99
byte 1 41
byte 1 32
byte 1 35
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $1599
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 32
byte 1 69
byte 1 100
byte 1 105
byte 1 116
byte 1 32
byte 1 0
align 1
LABELV $1598
byte 1 40
byte 1 45
byte 1 41
byte 1 32
byte 1 35
byte 1 45
byte 1 45
byte 1 45
byte 1 32
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 32
byte 1 0
align 1
LABELV $1594
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $1588
byte 1 32
byte 1 45
byte 1 32
byte 1 0
align 1
LABELV $1580
byte 1 93
byte 1 32
byte 1 67
byte 1 111
byte 1 110
byte 1 100
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 0
align 1
LABELV $1578
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 32
byte 1 91
byte 1 0
align 1
LABELV $1574
byte 1 40
byte 1 37
byte 1 99
byte 1 41
byte 1 32
byte 1 35
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $1570
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 32
byte 1 65
byte 1 112
byte 1 112
byte 1 108
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 83
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 103
byte 1 121
byte 1 32
byte 1 0
align 1
LABELV $1559
byte 1 10
byte 1 67
byte 1 111
byte 1 109
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $1554
byte 1 100
byte 1 101
byte 1 102
byte 1 105
byte 1 110
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 34
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 34
byte 1 58
byte 1 32
byte 1 32
byte 1 32
byte 1 145
byte 1 0
align 1
LABELV $1553
byte 1 37
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 121
byte 1 10
byte 1 0
align 1
LABELV $1548
byte 1 100
byte 1 101
byte 1 102
byte 1 105
byte 1 110
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 34
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 32
byte 1 116
byte 1 101
byte 1 114
byte 1 109
byte 1 34
byte 1 58
byte 1 32
byte 1 145
byte 1 0
align 1
LABELV $1543
byte 1 82
byte 1 70
byte 1 68
byte 1 32
byte 1 100
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 114
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1538
byte 1 82
byte 1 70
byte 1 65
byte 1 32
byte 1 100
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 114
byte 1 32
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1533
byte 1 100
byte 1 117
byte 1 112
byte 1 108
byte 1 105
byte 1 99
byte 1 97
byte 1 116
byte 1 101
byte 1 32
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $1529
byte 1 99
byte 1 114
byte 1 101
byte 1 97
byte 1 116
byte 1 101
byte 1 32
byte 1 110
byte 1 101
byte 1 119
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $1527
byte 1 32
byte 1 32
byte 1 80
byte 1 97
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 110
byte 1 32
byte 1 0
align 1
LABELV $1523
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1521
byte 1 115
byte 1 101
byte 1 97
byte 1 114
byte 1 99
byte 1 104
byte 1 32
byte 1 35
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 0
align 1
LABELV $1517
byte 1 83
byte 1 101
byte 1 97
byte 1 114
byte 1 99
byte 1 104
byte 1 32
byte 1 73
byte 1 68
byte 1 35
byte 1 0
align 1
LABELV $1516
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 45
byte 1 45
byte 1 45
byte 1 32
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 10
byte 1 0
align 1
LABELV $1515
byte 1 37
byte 1 99
byte 1 0
align 1
LABELV $1513
byte 1 37
byte 1 99
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 37
byte 1 99
byte 1 0
align 1
LABELV $1512
byte 1 32
byte 1 43
byte 1 32
byte 1 0
align 1
LABELV $1498
byte 1 47
byte 1 37
byte 1 100
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $1496
byte 1 32
byte 1 40
byte 1 35
byte 1 0
align 1
LABELV $1494
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 73
byte 1 68
byte 1 35
byte 1 32
byte 1 78
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 115
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 0
align 1
LABELV $1490
byte 1 53
byte 1 0
align 1
LABELV $1489
byte 1 52
byte 1 0
align 1
LABELV $1488
byte 1 51
byte 1 0
align 1
LABELV $1487
byte 1 50
byte 1 0
align 1
LABELV $1486
byte 1 49
byte 1 0
align 1
LABELV $1484
byte 1 112
byte 1 97
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 110
byte 1 32
byte 1 115
byte 1 105
byte 1 109
byte 1 105
byte 1 108
byte 1 97
byte 1 114
byte 1 105
byte 1 121
byte 1 0
align 1
LABELV $1483
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 47
byte 1 32
byte 1 97
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 100
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1482
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 47
byte 1 32
byte 1 99
byte 1 114
byte 1 101
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 100
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1481
byte 1 97
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 100
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1480
byte 1 99
byte 1 114
byte 1 101
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 100
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1475
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 32
byte 1 83
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 35
byte 1 0
align 1
LABELV $1474
byte 1 40
byte 1 45
byte 1 41
byte 1 32
byte 1 35
byte 1 45
byte 1 45
byte 1 45
byte 1 32
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $1473
byte 1 114
byte 1 101
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $1472
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1471
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $1463
byte 1 40
byte 1 37
byte 1 99
byte 1 41
byte 1 32
byte 1 35
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 32
byte 1 37
byte 1 51
byte 1 49
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $1459
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 0
align 1
LABELV $1458
byte 1 40
byte 1 45
byte 1 41
byte 1 32
byte 1 35
byte 1 45
byte 1 45
byte 1 45
byte 1 32
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 10
byte 1 0
align 1
LABELV $1454
byte 1 40
byte 1 37
byte 1 99
byte 1 41
byte 1 32
byte 1 35
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1450
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1449
byte 1 93
byte 1 32
byte 1 0
align 1
LABELV $1447
byte 1 97
byte 1 45
byte 1 37
byte 1 99
byte 1 0
align 1
LABELV $1443
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 61
byte 1 32
byte 1 80
byte 1 97
byte 1 108
byte 1 101
byte 1 116
byte 1 116
byte 1 101
byte 1 32
byte 1 91
byte 1 0
align 1
LABELV $1433
byte 1 91
byte 1 37
byte 1 99
byte 1 93
byte 1 32
byte 1 32
byte 1 37
byte 1 53
byte 1 100
byte 1 32
byte 1 37
byte 1 53
byte 1 100
byte 1 32
byte 1 37
byte 1 53
byte 1 100
byte 1 32
byte 1 32
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1421
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 116
byte 1 97
byte 1 108
byte 1 32
byte 1 32
byte 1 32
byte 1 99
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 10
byte 1 0
align 1
LABELV $1419
byte 1 10
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 42
byte 1 32
byte 1 109
byte 1 117
byte 1 108
byte 1 116
byte 1 105
byte 1 112
byte 1 108
byte 1 101
byte 1 32
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 97
byte 1 116
byte 1 101
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1415
byte 1 42
byte 1 0
align 1
LABELV $1406
byte 1 91
byte 1 37
byte 1 99
byte 1 93
byte 1 32
byte 1 0
align 1
LABELV $1401
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 49
byte 1 115
byte 1 116
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 50
byte 1 110
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 51
byte 1 114
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 10
byte 1 0
align 1
LABELV $1397
byte 1 10
byte 1 10
byte 1 0
align 1
LABELV $1396
byte 1 83
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 35
byte 1 0
align 1
LABELV $1395
byte 1 10
byte 1 65
byte 1 67
byte 1 67
byte 1 69
byte 1 83
byte 1 83
byte 1 32
byte 1 68
byte 1 69
byte 1 78
byte 1 73
byte 1 69
byte 1 68
byte 1 58
byte 1 32
byte 1 78
byte 1 79
byte 1 32
byte 1 65
byte 1 85
byte 1 84
byte 1 72
byte 1 79
byte 1 82
byte 1 73
byte 1 90
byte 1 65
byte 1 84
byte 1 73
byte 1 79
byte 1 78
byte 1 10
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 100
byte 1 111
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 104
byte 1 97
byte 1 118
byte 1 101
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 117
byte 1 116
byte 1 104
byte 1 111
byte 1 114
byte 1 105
byte 1 122
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 10
byte 1 10
byte 1 65
byte 1 115
byte 1 107
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 97
byte 1 100
byte 1 109
byte 1 105
byte 1 110
byte 1 105
byte 1 115
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 111
byte 1 114
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 109
byte 1 111
byte 1 114
byte 1 101
byte 1 32
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1387
byte 1 101
byte 1 110
byte 1 116
byte 1 101
byte 1 114
byte 1 32
byte 1 115
byte 1 97
byte 1 102
byte 1 101
byte 1 116
byte 1 121
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1386
byte 1 108
byte 1 101
byte 1 97
byte 1 118
byte 1 101
byte 1 32
byte 1 115
byte 1 97
byte 1 102
byte 1 101
byte 1 116
byte 1 121
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1360
byte 1 10
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 37
byte 1 115
byte 1 10
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1350
byte 1 115
byte 1 0
align 1
LABELV $1346
byte 1 10
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 37
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 10
byte 1 111
byte 1 112
byte 1 112
byte 1 111
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 37
byte 1 115
byte 1 32
byte 1 97
byte 1 108
byte 1 105
byte 1 118
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $1335
byte 1 65
byte 1 117
byte 1 116
byte 1 111
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 99
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 115
byte 1 58
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1329
byte 1 109
byte 1 97
byte 1 110
byte 1 117
byte 1 97
byte 1 108
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $1328
byte 1 97
byte 1 117
byte 1 116
byte 1 111
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $1325
byte 1 87
byte 1 104
byte 1 101
byte 1 110
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 39
byte 1 114
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 44
byte 1 32
byte 1 103
byte 1 0
align 1
LABELV $1323
byte 1 37
byte 1 115
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 99
byte 1 104
byte 1 111
byte 1 111
byte 1 115
byte 1 101
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1322
byte 1 10
byte 1 67
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $1319
byte 1 71
byte 1 111
byte 1 33
byte 1 32
byte 1 71
byte 1 111
byte 1 33
byte 1 32
byte 1 71
byte 1 111
byte 1 33
byte 1 0
align 1
LABELV $1317
byte 1 83
byte 1 117
byte 1 112
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 33
byte 1 0
align 1
LABELV $1316
byte 1 83
byte 1 117
byte 1 112
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 109
byte 1 101
byte 1 33
byte 1 0
align 1
LABELV $1311
byte 1 83
byte 1 116
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 33
byte 1 0
align 1
LABELV $1310
byte 1 83
byte 1 116
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 109
byte 1 101
byte 1 33
byte 1 0
align 1
LABELV $1298
byte 1 32
byte 1 79
byte 1 70
byte 1 70
byte 1 32
byte 1 0
align 1
LABELV $1297
byte 1 32
byte 1 79
byte 1 78
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1293
byte 1 105
byte 1 110
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $1292
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $1290
byte 1 10
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 110
byte 1 97
byte 1 118
byte 1 105
byte 1 103
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 97
byte 1 105
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 46
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1281
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 115
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1280
byte 1 46
byte 1 10
byte 1 10
byte 1 0
align 1
LABELV $1278
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 0
align 1
LABELV $1277
byte 1 67
byte 1 97
byte 1 108
byte 1 108
byte 1 32
byte 1 97
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1276
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 102
byte 1 116
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 115
byte 1 101
byte 1 99
byte 1 10
byte 1 0
align 1
LABELV $1269
byte 1 89
byte 1 69
byte 1 83
byte 1 32
byte 1 32
byte 1 32
byte 1 37
byte 1 51
byte 1 100
byte 1 10
byte 1 78
byte 1 79
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 37
byte 1 51
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1267
byte 1 78
byte 1 79
byte 1 32
byte 1 0
align 1
LABELV $1265
byte 1 32
byte 1 32
byte 1 32
byte 1 37
byte 1 51
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1264
byte 1 89
byte 1 69
byte 1 83
byte 1 0
align 1
LABELV $1258
byte 1 115
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $1256
byte 1 115
byte 1 117
byte 1 114
byte 1 114
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1249
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 0
align 1
LABELV $1247
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1244
byte 1 10
byte 1 86
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 0
align 1
LABELV $1231
byte 1 89
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $1230
byte 1 111
byte 1 102
byte 1 102
byte 1 45
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 32
byte 1 40
byte 1 100
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 116
byte 1 104
byte 1 105
byte 1 115
byte 1 32
byte 1 115
byte 1 101
byte 1 114
byte 1 118
byte 1 101
byte 1 114
byte 1 41
byte 1 0
align 1
LABELV $1229
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1224
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 110
byte 1 116
byte 1 114
byte 1 111
byte 1 108
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $1223
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1222
byte 1 111
byte 1 110
byte 1 45
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 0
align 1
LABELV $1221
byte 1 111
byte 1 102
byte 1 102
byte 1 45
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 0
align 1
LABELV $1211
byte 1 47
byte 1 37
byte 1 100
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1210
byte 1 80
byte 1 97
byte 1 103
byte 1 101
byte 1 32
byte 1 35
byte 1 0
align 1
LABELV $1208
byte 1 32
byte 1 32
byte 1 32
byte 1 74
byte 1 111
byte 1 105
byte 1 110
byte 1 32
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1207
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1206
byte 1 32
byte 1 32
byte 1 32
byte 1 74
byte 1 111
byte 1 105
byte 1 110
byte 1 32
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1205
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $1204
byte 1 10
byte 1 10
byte 1 89
byte 1 111
byte 1 117
byte 1 39
byte 1 114
byte 1 101
byte 1 32
byte 1 115
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 97
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 46
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 115
byte 1 117
byte 1 112
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 97
byte 1 118
byte 1 97
byte 1 105
byte 1 108
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 46
byte 1 10
byte 1 10
byte 1 0
align 1
LABELV $1200
byte 1 114
byte 1 101
byte 1 115
byte 1 117
byte 1 109
byte 1 101
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $1198
byte 1 99
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $1197
byte 1 117
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $1196
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 115
byte 1 58
byte 1 32
byte 1 0
align 1
LABELV $1192
byte 1 84
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 99
byte 1 97
byte 1 108
byte 1 32
byte 1 83
byte 1 117
byte 1 112
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 83
byte 1 121
byte 1 115
byte 1 116
byte 1 101
byte 1 109
byte 1 0
align 1
LABELV $1155
byte 1 79
byte 1 99
byte 1 99
byte 1 117
byte 1 112
byte 1 121
byte 1 32
byte 1 69
byte 1 110
byte 1 101
byte 1 109
byte 1 121
byte 1 32
byte 1 66
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $1154
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 32
byte 1 79
byte 1 117
byte 1 114
byte 1 32
byte 1 66
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $1153
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 32
byte 1 79
byte 1 117
byte 1 114
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $1152
byte 1 67
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 32
byte 1 69
byte 1 110
byte 1 101
byte 1 109
byte 1 121
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $1151
byte 1 83
byte 1 101
byte 1 101
byte 1 107
byte 1 32
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 0
align 1
LABELV $1150
byte 1 83
byte 1 101
byte 1 101
byte 1 107
byte 1 32
byte 1 69
byte 1 110
byte 1 101
byte 1 109
byte 1 121
byte 1 0
align 1
LABELV $1148
byte 1 80
byte 1 101
byte 1 114
byte 1 99
byte 1 101
byte 1 110
byte 1 116
byte 1 97
byte 1 103
byte 1 101
byte 1 0
align 1
LABELV $1147
byte 1 81
byte 1 117
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $1145
byte 1 79
byte 1 99
byte 1 99
byte 1 97
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1144
byte 1 79
byte 1 114
byte 1 100
byte 1 101
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $1143
byte 1 68
byte 1 105
byte 1 118
byte 1 105
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1140
byte 1 90
byte 1 0
align 1
LABELV $1139
byte 1 89
byte 1 0
align 1
LABELV $1138
byte 1 88
byte 1 0
align 1
LABELV $1137
byte 1 87
byte 1 0
align 1
LABELV $1136
byte 1 86
byte 1 0
align 1
LABELV $1135
byte 1 85
byte 1 0
align 1
LABELV $1134
byte 1 84
byte 1 0
align 1
LABELV $1133
byte 1 83
byte 1 0
align 1
LABELV $1132
byte 1 82
byte 1 0
align 1
LABELV $1131
byte 1 81
byte 1 0
align 1
LABELV $1130
byte 1 80
byte 1 0
align 1
LABELV $1129
byte 1 79
byte 1 0
align 1
LABELV $1128
byte 1 78
byte 1 0
align 1
LABELV $1127
byte 1 77
byte 1 0
align 1
LABELV $1126
byte 1 76
byte 1 0
align 1
LABELV $1125
byte 1 75
byte 1 0
align 1
LABELV $1124
byte 1 74
byte 1 0
align 1
LABELV $1123
byte 1 73
byte 1 0
align 1
LABELV $1122
byte 1 72
byte 1 0
align 1
LABELV $1121
byte 1 71
byte 1 0
align 1
LABELV $1120
byte 1 70
byte 1 0
align 1
LABELV $1119
byte 1 69
byte 1 0
align 1
LABELV $1118
byte 1 68
byte 1 0
align 1
LABELV $1117
byte 1 67
byte 1 0
align 1
LABELV $1116
byte 1 66
byte 1 0
align 1
LABELV $1115
byte 1 65
byte 1 0
align 1
LABELV $1114
byte 1 63
byte 1 0
align 1
LABELV $1112
byte 1 65
byte 1 117
byte 1 116
byte 1 111
byte 1 0
align 1
LABELV $1111
byte 1 77
byte 1 97
byte 1 110
byte 1 117
byte 1 97
byte 1 108
byte 1 0
align 1
LABELV $1109
byte 1 71
byte 1 108
byte 1 111
byte 1 98
byte 1 97
byte 1 108
byte 1 32
byte 1 65
byte 1 100
byte 1 106
byte 1 117
byte 1 115
byte 1 116
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 83
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 83
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $1108
byte 1 65
byte 1 100
byte 1 109
byte 1 105
byte 1 110
byte 1 105
byte 1 115
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1107
byte 1 83
byte 1 116
byte 1 111
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $1104
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 105
byte 1 115
byte 1 116
byte 1 105
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $1103
byte 1 68
byte 1 101
byte 1 115
byte 1 105
byte 1 103
byte 1 110
byte 1 97
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 76
byte 1 101
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $1099
byte 1 77
byte 1 101
byte 1 97
byte 1 115
byte 1 117
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1098
byte 1 84
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $1097
byte 1 83
byte 1 116
byte 1 114
byte 1 97
byte 1 116
byte 1 101
byte 1 103
byte 1 121
byte 1 0
align 1
LABELV $1096
byte 1 71
byte 1 114
byte 1 111
byte 1 117
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $1095
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 97
byte 1 108
byte 1 32
byte 1 83
byte 1 101
byte 1 114
byte 1 118
byte 1 105
byte 1 99
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $971
byte 1 37
byte 1 115
byte 1 61
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $970
byte 1 37
byte 1 115
byte 1 61
byte 1 37
byte 1 115
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $965
byte 1 37
byte 1 115
byte 1 61
byte 1 37
byte 1 115
byte 1 37
byte 1 100
byte 1 37
byte 1 37
byte 1 0
align 1
LABELV $961
byte 1 43
byte 1 0
align 1
LABELV $959
byte 1 37
byte 1 115
byte 1 61
byte 1 37
byte 1 100
byte 1 37
byte 1 37
byte 1 0
align 1
LABELV $957
byte 1 37
byte 1 115
byte 1 61
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $940
byte 1 63
byte 1 63
byte 1 63
byte 1 63
byte 1 63
byte 1 63
byte 1 0
align 1
LABELV $938
byte 1 37
byte 1 0
align 1
LABELV $936
byte 1 37
byte 1 32
byte 1 0
align 1
LABELV $934
byte 1 32
byte 1 0
align 1
LABELV $932
byte 1 32
byte 1 32
byte 1 0
align 1
LABELV $930
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $923
byte 1 51
byte 1 45
byte 1 116
byte 1 97
byte 1 107
byte 1 0
align 1
LABELV $922
byte 1 50
byte 1 45
byte 1 100
byte 1 114
byte 1 111
byte 1 0
align 1
LABELV $921
byte 1 49
byte 1 45
byte 1 98
byte 1 97
byte 1 115
byte 1 0
align 1
LABELV $919
byte 1 146
byte 1 0
align 1
LABELV $918
byte 1 145
byte 1 0
align 1
LABELV $917
byte 1 144
byte 1 0
align 1
LABELV $914
byte 1 79
byte 1 70
byte 1 80
byte 1 32
byte 1 0
align 1
LABELV $913
byte 1 89
byte 1 70
byte 1 80
byte 1 32
byte 1 0
align 1
LABELV $912
byte 1 79
byte 1 70
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $911
byte 1 89
byte 1 70
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $910
byte 1 83
byte 1 67
byte 1 66
byte 1 32
byte 1 0
align 1
LABELV $909
byte 1 79
byte 1 82
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $908
byte 1 89
byte 1 82
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $907
byte 1 84
byte 1 73
byte 1 77
byte 1 69
byte 1 0
align 1
LABELV $906
byte 1 65
byte 1 86
byte 1 83
byte 1 84
byte 1 0
align 1
LABELV $905
byte 1 84
byte 1 73
byte 1 68
byte 1 89
byte 1 0
align 1
LABELV $904
byte 1 70
byte 1 73
byte 1 78
byte 1 32
byte 1 0
align 1
LABELV $903
byte 1 82
byte 1 70
byte 1 68
byte 1 81
byte 1 0
align 1
LABELV $902
byte 1 82
byte 1 70
byte 1 68
byte 1 80
byte 1 0
align 1
LABELV $901
byte 1 82
byte 1 70
byte 1 65
byte 1 81
byte 1 0
align 1
LABELV $900
byte 1 82
byte 1 70
byte 1 65
byte 1 80
byte 1 0
align 1
LABELV $899
byte 1 66
byte 1 65
byte 1 76
byte 1 84
byte 1 0
align 1
LABELV $898
byte 1 66
byte 1 65
byte 1 77
byte 1 84
byte 1 0
align 1
LABELV $897
byte 1 66
byte 1 65
byte 1 76
byte 1 81
byte 1 0
align 1
LABELV $896
byte 1 66
byte 1 65
byte 1 76
byte 1 80
byte 1 0
align 1
LABELV $895
byte 1 79
byte 1 65
byte 1 76
byte 1 81
byte 1 0
align 1
LABELV $894
byte 1 79
byte 1 65
byte 1 76
byte 1 80
byte 1 0
align 1
LABELV $893
byte 1 89
byte 1 65
byte 1 76
byte 1 81
byte 1 0
align 1
LABELV $892
byte 1 89
byte 1 65
byte 1 76
byte 1 80
byte 1 0
align 1
LABELV $891
byte 1 66
byte 1 65
byte 1 77
byte 1 81
byte 1 0
align 1
LABELV $890
byte 1 66
byte 1 65
byte 1 77
byte 1 80
byte 1 0
align 1
LABELV $889
byte 1 79
byte 1 65
byte 1 77
byte 1 81
byte 1 0
align 1
LABELV $888
byte 1 79
byte 1 65
byte 1 77
byte 1 80
byte 1 0
align 1
LABELV $887
byte 1 89
byte 1 65
byte 1 77
byte 1 81
byte 1 0
align 1
LABELV $886
byte 1 89
byte 1 65
byte 1 77
byte 1 80
byte 1 0
align 1
LABELV $885
byte 1 66
byte 1 65
byte 1 81
byte 1 32
byte 1 0
align 1
LABELV $884
byte 1 66
byte 1 65
byte 1 80
byte 1 32
byte 1 0
align 1
LABELV $883
byte 1 79
byte 1 65
byte 1 81
byte 1 32
byte 1 0
align 1
LABELV $882
byte 1 79
byte 1 65
byte 1 80
byte 1 32
byte 1 0
align 1
LABELV $881
byte 1 89
byte 1 65
byte 1 81
byte 1 32
byte 1 0
align 1
LABELV $880
byte 1 89
byte 1 65
byte 1 80
byte 1 32
byte 1 0
align 1
LABELV $879
byte 1 82
byte 1 83
byte 1 80
byte 1 68
byte 1 0
align 1
LABELV $878
byte 1 66
byte 1 84
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $877
byte 1 79
byte 1 84
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $876
byte 1 89
byte 1 84
byte 1 83
byte 1 32
byte 1 0
align 1
LABELV $875
byte 1 45
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $840
byte 1 43
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $705
byte 1 0
align 1
LABELV $694
byte 1 10
byte 1 0
align 1
LABELV $678
byte 1 47
byte 1 0
align 1
LABELV $676
byte 1 61
byte 1 0
align 1
LABELV $673
byte 1 62
byte 1 0
align 1
LABELV $671
byte 1 8
byte 1 0
align 1
LABELV $669
byte 1 60
byte 1 0
align 1
LABELV $555
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $496
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $316
byte 1 106
byte 1 117
byte 1 104
byte 1 111
byte 1 120
byte 1 32
byte 1 99
byte 1 114
byte 1 111
byte 1 119
byte 1 100
byte 1 0
align 1
LABELV $315
byte 1 106
byte 1 117
byte 1 104
byte 1 111
byte 1 120
byte 1 32
byte 1 112
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 112
byte 1 108
byte 1 105
byte 1 101
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $145
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
