code
proc CG_MachineGunEjectBrass 136 8
file "..\..\..\..\code\cgame\cg_weapons.c"
line 11
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_weapons.c -- events and effects dealing with weapons
;4:#include "cg_local.h"
;5:
;6:/*
;7:==========================
;8:CG_MachineGunEjectBrass
;9:==========================
;10:*/
;11:static void CG_MachineGunEjectBrass( centity_t *cent ) {
line 16
;12:	localEntity_t	*le;
;13:	refEntity_t		*re;
;14:	vec3_t			velocity, xvelocity;
;15:	vec3_t			offset, xoffset;
;16:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 19
;17:	vec3_t			v[3];
;18:
;19:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $125
line 20
;20:		return;
ADDRGP4 $124
JUMPV
LABELV $125
line 23
;21:	}
;22:
;23:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 24
;24:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 26
;25:
;26:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 27
;27:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40+4
ADDRLP4 100
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 100
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1109393408
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 28
;28:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40+8
ADDRLP4 104
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 104
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 30
;29:
;30:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 31
;31:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 32
;32:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 34
;33:
;34:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 35
;35:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 37
;36:
;37:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 39
;38:
;39:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 40
;40:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 41
;41:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 43
;42:
;43:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;44:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 45
;45:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 48
;47:
;48:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 50
;49:
;50:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $158
line 51
;51:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 52
;52:	}
LABELV $158
line 54
;53:
;54:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 55
;55:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 56
;56:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 57
;57:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 60
;60:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+751220+236
INDIRI4
ASGNI4
line 62
;61:
;62:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 92
INDIRF4
CNSTF4 1053609165
MULF4
ASGNF4
line 64
;63:
;64:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 66
;66:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 67
;67:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 68
;68:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 69
;69:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 70
;70:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 71
;71:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 73
;72:
;73:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 74
;74:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 2
ASGNI4
line 75
;75:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 76
;76:}
LABELV $124
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 83
;77:
;78:/*
;79:==========================
;80:CG_ShotgunEjectBrass
;81:==========================
;82:*/
;83:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 91
;84:	localEntity_t	*le;
;85:	refEntity_t		*re;
;86:	vec3_t			velocity, xvelocity;
;87:	vec3_t			offset, xoffset;
;88:	vec3_t			v[3];
;89:	int				i;
;90:
;91:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $186
line 92
;92:		return;
ADDRGP4 $185
JUMPV
LABELV $186
line 95
;93:	}
;94:
;95:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $189
line 96
;96:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 98
;97:
;98:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 99
;99:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 101
;100:
;101:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40
ADDRLP4 104
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 104
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1114636288
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 102
;102:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $193
line 103
;103:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40+4
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 104
;104:		} else {
ADDRGP4 $194
JUMPV
LABELV $193
line 105
;105:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40+4
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1092616192
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 106
;106:		}
LABELV $194
line 107
;107:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40+8
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 109
;108:
;109:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 110
;110:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 111
;111:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 3
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 112
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 113
;112:
;113:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 114
;114:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 116
;115:
;116:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 118
;117:
;118:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 119
;119:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 120
;120:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 122
;121:
;122:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 123
;123:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 124
;124:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 125
;125:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 126
;126:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 127
;127:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $226
line 128
;128:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 129
;129:		}
LABELV $226
line 131
;130:
;131:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 132
;132:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 133
;133:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 134
;134:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 136
;135:
;136:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 137
;137:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+751220+240
INDIRI4
ASGNI4
line 138
;138:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1050253722
ASGNF4
line 140
;139:
;140:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 141
;141:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 142
;142:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 143
;143:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 144
;144:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 145
;145:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 146
;146:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 147
;147:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 149
;148:
;149:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 150
;150:		le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 2
ASGNI4
line 151
;151:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 152
;152:	}
LABELV $190
line 95
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $189
line 153
;153:}
LABELV $185
endproc CG_ShotgunEjectBrass 136 8
export CG_RailTrail
proc CG_RailTrail 624 16
line 195
;154:
;155:
;156:#ifdef MISSIONPACK
;157:/*
;158:==========================
;159:CG_NailgunEjectBrass
;160:==========================
;161:*/
;162:static void CG_NailgunEjectBrass( centity_t *cent ) {
;163:	localEntity_t	*smoke;
;164:	vec3_t			origin;
;165:	vec3_t			v[3];
;166:	vec3_t			offset;
;167:	vec3_t			xoffset;
;168:	vec3_t			up;
;169:
;170:	AnglesToAxis( cent->lerpAngles, v );
;171:
;172:	offset[0] = 0;
;173:	offset[1] = -12;
;174:	offset[2] = 24;
;175:
;176:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;177:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;178:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;179:	VectorAdd( cent->lerpOrigin, xoffset, origin );
;180:
;181:	VectorSet( up, 0, 0, 64 );
;182:
;183:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
;184:	// use the optimized local entity add
;185:	smoke->leType = LE_SCALE_FADE;
;186:}
;187:#endif
;188:
;189:
;190:/*
;191:==========================
;192:CG_RailTrail
;193:==========================
;194:*/
;195:void CG_RailTrail( clientInfo_t *ci, vec3_t start, vec3_t end ) {
line 207
;196:	vec3_t axis[36], move, move2, next_move, vec, temp;
;197:	float  len;
;198:	int    i, j, skip;
;199:
;200:	localEntity_t	*le;
;201:	refEntity_t		*re;
;202:
;203:#define RADIUS   5	// JUHOX: was 4
;204:#define ROTATION 1
;205:#define SPACING  5
;206: 
;207:	start[2] -= 4;
ADDRLP4 516
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 516
INDIRP4
ADDRLP4 516
INDIRP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 208
;208:	VectorCopy (start, move);
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 209
;209:	VectorSubtract (end, start, vec);
ADDRLP4 520
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 524
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 520
INDIRP4
INDIRF4
ADDRLP4 524
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 520
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 524
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 210
;210:	len = VectorNormalize (vec);
ADDRLP4 28
ARGP4
ADDRLP4 528
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 528
INDIRF4
ASGNF4
line 211
;211:	PerpendicularVector(temp, vec);
ADDRLP4 488
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 212
;212:	for (i = 0 ; i < 36; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $256
line 213
;213:		RotatePointAroundVector(axis[i], vec, temp, i * 10);//banshee 2.4 was 10
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 488
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 214
;214:	}
LABELV $257
line 212
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $256
line 216
;215:
;216:	le = CG_AllocLocalEntity();
ADDRLP4 532
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 532
INDIRP4
ASGNP4
line 217
;217:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 219
;218:
;219:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 220
;220:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 221
;221:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 222
;222:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 224
;223:
;224:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 225
;225:	re->reType = RT_RAIL_CORE;
ADDRLP4 24
INDIRP4
CNSTI4 4
ASGNI4
line 226
;226:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+248
INDIRI4
ASGNI4
line 228
;227:	
;228:	VectorCopy( start, re->origin );
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 229
;229:	VectorCopy( end, re->oldorigin );
ADDRLP4 24
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 231
;230:
;231:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 544
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 548
CNSTF4 1325400064
ASGNF4
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
LTF4 $267
ADDRLP4 540
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $268
JUMPV
LABELV $267
ADDRLP4 540
ADDRLP4 544
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $268
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 540
INDIRU4
CVUU1 4
ASGNU1
line 232
;232:    re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 556
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 560
CNSTF4 1325400064
ASGNF4
ADDRLP4 556
INDIRF4
ADDRLP4 560
INDIRF4
LTF4 $270
ADDRLP4 552
ADDRLP4 556
INDIRF4
ADDRLP4 560
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $271
JUMPV
LABELV $270
ADDRLP4 552
ADDRLP4 556
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $271
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 552
INDIRU4
CVUU1 4
ASGNU1
line 233
;233:    re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 568
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 572
CNSTF4 1325400064
ASGNF4
ADDRLP4 568
INDIRF4
ADDRLP4 572
INDIRF4
LTF4 $273
ADDRLP4 564
ADDRLP4 568
INDIRF4
ADDRLP4 572
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $274
JUMPV
LABELV $273
ADDRLP4 564
ADDRLP4 568
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $274
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 564
INDIRU4
CVUU1 4
ASGNU1
line 234
;234:    re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 236
;235:
;236:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 237
;237:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 238
;238:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 239
;239:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1065353216
ASGNF4
line 241
;240:
;241:	AxisClear( re->axis );
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 243
;242:
;243:	VectorMA(move, 20, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
MULF4
ADDF4
ASGNF4
line 244
;244:	VectorCopy(move, next_move);
ADDRLP4 504
ADDRLP4 8
INDIRB
ASGNB 12
line 245
;245:	VectorScale (vec, SPACING, vec);
ADDRLP4 28
ADDRLP4 28
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1084227584
MULF4
ASGNF4
line 247
;246:
;247:	if (cg_oldRail.integer != 0) {
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $285
line 249
;248:		// nudge down a bit so it isn't exactly in center
;249:		re->origin[2] -= 8;
ADDRLP4 576
ADDRLP4 24
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 576
INDIRP4
ADDRLP4 576
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 250
;250:		re->oldorigin[2] -= 8;
ADDRLP4 580
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 580
INDIRP4
ADDRLP4 580
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 251
;251:		return;
ADDRGP4 $253
JUMPV
LABELV $285
line 253
;252:	}
;253:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 255
;254: 
;255:	j = 18;
ADDRLP4 20
CNSTI4 18
ASGNI4
line 256
;256:    for (i = 0; i < len; i += SPACING) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $291
JUMPV
LABELV $288
line 257
;257:		if (i != skip) {
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $292
line 258
;258:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 259
;259:	le = CG_AllocLocalEntity();
ADDRLP4 576
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 576
INDIRP4
ASGNP4
line 260
;260:	re = &le->refEntity;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 262
;261:
;262:            le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 263
;263:			le->leType = /*LE_MOVE_SCALE_FADE*/LE_TRAIL_PARTICLE;	// JUHOX
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 10
ASGNI4
line 264
;264:			le->radius = 1.1f;	// JUHOX
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTF4 1066192077
ASGNF4
line 265
;265:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 266
;266:            le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 267
;267:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 269
;268:
;269:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 270
;270:            re->reType = RT_SPRITE;
ADDRLP4 24
INDIRP4
CNSTI4 2
ASGNI4
line 271
;271:            re->radius = 1.1f;
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 272
;272:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 24
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+244
INDIRI4
ASGNI4
line 274
;273:
;274:            re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 588
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 592
CNSTF4 1325400064
ASGNF4
ADDRLP4 588
INDIRF4
ADDRLP4 592
INDIRF4
LTF4 $300
ADDRLP4 584
ADDRLP4 588
INDIRF4
ADDRLP4 592
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $301
JUMPV
LABELV $300
ADDRLP4 584
ADDRLP4 588
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $301
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 584
INDIRU4
CVUU1 4
ASGNU1
line 275
;275:            re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 600
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 604
CNSTF4 1325400064
ASGNF4
ADDRLP4 600
INDIRF4
ADDRLP4 604
INDIRF4
LTF4 $303
ADDRLP4 596
ADDRLP4 600
INDIRF4
ADDRLP4 604
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $304
JUMPV
LABELV $303
ADDRLP4 596
ADDRLP4 600
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $304
ADDRLP4 24
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 596
INDIRU4
CVUU1 4
ASGNU1
line 276
;276:            re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 612
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 616
CNSTF4 1325400064
ASGNF4
ADDRLP4 612
INDIRF4
ADDRLP4 616
INDIRF4
LTF4 $306
ADDRLP4 608
ADDRLP4 612
INDIRF4
ADDRLP4 616
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $307
JUMPV
LABELV $306
ADDRLP4 608
ADDRLP4 612
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $307
ADDRLP4 24
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 608
INDIRU4
CVUU1 4
ASGNU1
line 277
;277:            re->shaderRGBA[3] = 255;
ADDRLP4 24
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 279
;278:
;279:            le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 280
;280:            le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 281
;281:            le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1061158912
MULF4
ASGNF4
line 282
;282:            le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1065353216
ASGNF4
line 284
;283:
;284:            le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 285
;285:            le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 287
;286:
;287:			VectorCopy( move, move2);
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 288
;288:            VectorMA(move2, RADIUS , axis[j], move2);
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1084227584
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1084227584
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1084227584
MULF4
ADDF4
ASGNF4
line 289
;289:            VectorCopy(move2, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 291
;290:
;291:            le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 292
;292:            le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 293
;293:            le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
CNSTF4 1086324736
MULF4
ASGNF4
line 294
;294:		}
LABELV $292
line 296
;295:
;296:        VectorAdd (move, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 28+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 28+8
INDIRF4
ADDF4
ASGNF4
line 298
;297:
;298:        j = j + ROTATION < 36 ? j + ROTATION : (j + ROTATION) % 36;
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
GEI4 $324
ADDRLP4 576
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $325
JUMPV
LABELV $324
ADDRLP4 576
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
LABELV $325
ADDRLP4 20
ADDRLP4 576
INDIRI4
ASGNI4
line 299
;299:	}
LABELV $289
line 256
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $291
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $288
line 300
;300:}
LABELV $253
endproc CG_RailTrail 624 16
proc CG_FireballTrail 260 12
line 308
;301:
;302:/*
;303:==========================
;304:JUHOX: CG_FireballTrail
;305:==========================
;306:*/
;307:#if MONSTER_MODE
;308:static void CG_FireballTrail(centity_t *cent, const weaponInfo_t *wi) {
line 320
;309:	localEntity_t	*le;
;310:	refEntity_t		*re;
;311:	entityState_t	*es;
;312:	int contents;
;313:	int lastContents;
;314:	int				t, startTime, step;
;315:	vec3_t origin;
;316:	vec3_t lastPos;
;317:
;318:
;319:
;320:	if (!cg_fireballTrail.integer) return;
ADDRGP4 cg_fireballTrail+12
INDIRI4
CNSTI4 0
NEI4 $327
ADDRGP4 $326
JUMPV
LABELV $327
line 322
;321:
;322:	es = &cent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 323
;323:	startTime = cent->trailTime;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 325
;324:
;325:	BG_EvaluateTrajectory(&es->pos, cg.time, origin);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107656
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 326
;326:	contents = CG_PointContents(origin, -1);
ADDRLP4 8
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 56
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 56
INDIRI4
ASGNI4
line 330
;327:
;328:#if 1	// JUHOX: no bubbles with lava/slime hack
;329:	if (
;330:		(contents & (CONTENTS_SLIME | CONTENTS_LAVA)) &&
ADDRLP4 32
INDIRI4
CNSTI4 24
BANDI4
CNSTI4 0
EQI4 $331
ADDRLP4 32
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $331
line 332
;331:		(contents & CONTENTS_WATER)
;332:	) {
line 333
;333:		contents &= ~(CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA);
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 -57
BANDI4
ASGNI4
line 334
;334:	}
LABELV $331
line 337
;335:#endif
;336:
;337:	BG_EvaluateTrajectory(&es->pos, cent->trailTime, lastPos);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 338
;338:	lastContents = CG_PointContents(lastPos, -1);
ADDRLP4 40
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 64
INDIRI4
ASGNI4
line 340
;339:
;340:	cent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 342
;341:
;342:	if (contents & (CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA)) {
ADDRLP4 32
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $334
line 343
;343:		if (contents & lastContents & CONTENTS_WATER) {
ADDRLP4 32
INDIRI4
ADDRLP4 52
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $326
line 344
;344:			CG_BubbleTrail(lastPos, origin, 8);
ADDRLP4 40
ARGP4
ADDRLP4 8
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 345
;345:		}
line 346
;346:		return;
ADDRGP4 $326
JUMPV
LABELV $334
line 349
;347:	}
;348:
;349:	if (cg_fireballTrail.integer >= 2) {
ADDRGP4 cg_fireballTrail+12
INDIRI4
CNSTI4 2
LTI4 $338
line 350
;350:		step = 50;
ADDRLP4 28
CNSTI4 50
ASGNI4
line 352
;351:
;352:		for (t = step * ((startTime + step) / step); t <= cent->trailTime; t += step) {
ADDRLP4 20
ADDRLP4 28
INDIRI4
ADDRLP4 36
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ADDRLP4 28
INDIRI4
DIVI4
MULI4
ASGNI4
ADDRGP4 $344
JUMPV
LABELV $341
line 353
;353:			BG_EvaluateTrajectory(&es->pos, t, origin);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 355
;354:
;355:			le = CG_AllocLocalEntity();
ADDRLP4 72
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
ASGNP4
line 356
;356:			re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 358
;357:
;358:			le->leType = LE_MOVE_SCALE_RGBFADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 11
ASGNI4
line 360
;359:
;360:			le->startTime = t;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 361
;361:			le->endTime = le->startTime + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 362
;362:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 364
;363:
;364:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 365
;365:			le->pos.trTime = le->startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 366
;366:			VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 367
;367:			VectorScale(es->pos.trDelta, 0.1, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
line 369
;368:
;369:			le->radius = 100;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTF4 1120403456
ASGNF4
line 371
;370:
;371:			AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 372
;372:			re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 373
;373:			re->customShader = cgs.media.hotAirShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+504
INDIRI4
ASGNI4
line 375
;374:
;375:			re->rotation = 360 * random();
ADDRLP4 88
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 88
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 88
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 377
;376:
;377:			le->color[3] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1065353216
ASGNF4
line 378
;378:		}
LABELV $342
line 352
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ASGNI4
LABELV $344
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $341
line 379
;379:	}
LABELV $338
line 383
;380:
;381:
;382:
;383:	step = 15;
ADDRLP4 28
CNSTI4 15
ASGNI4
line 385
;384:
;385:	for (t = step * ((startTime + step) / step); t <= cent->trailTime; t += step) {
ADDRLP4 20
ADDRLP4 28
INDIRI4
ADDRLP4 36
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ADDRLP4 28
INDIRI4
DIVI4
MULI4
ASGNI4
ADDRGP4 $350
JUMPV
LABELV $347
line 395
;386:		float speed;
;387:		vec3_t dir0;
;388:		vec3_t dir1;
;389:		vec3_t dir2;
;390:		float angle;
;391:		float radius;
;392:		vec3_t start;
;393:		vec3_t end;
;394:
;395:		BG_EvaluateTrajectory(&es->pos, t, origin);
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 397
;396:
;397:		le = CG_AllocLocalEntity();
ADDRLP4 144
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 144
INDIRP4
ASGNP4
line 398
;398:		re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 400
;399:
;400:		le->leType = LE_FIREBALL_TRAIL_PARTICLE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 12
ASGNI4
line 402
;401:
;402:		le->startTime = t;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 403
;403:		le->endTime = le->startTime + 200;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 404
;404:		le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 406
;405:
;406:		VectorCopy(es->pos.trDelta, dir0);
ADDRLP4 84
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 407
;407:		speed = VectorNormalize(dir0);
ADDRLP4 84
ARGP4
ADDRLP4 156
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 128
ADDRLP4 156
INDIRF4
ASGNF4
line 408
;408:		PerpendicularVector(dir1, dir0);
ADDRLP4 116
ARGP4
ADDRLP4 84
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 409
;409:		CrossProduct(dir0, dir1, dir2);
ADDRLP4 84
ARGP4
ADDRLP4 116
ARGP4
ADDRLP4 132
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 410
;410:		angle = random() * 2 * M_PI;
ADDRLP4 160
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 96
ADDRLP4 160
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 160
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 818483163
MULF4
ASGNF4
line 411
;411:		radius = 25 * random();
ADDRLP4 164
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 100
ADDRLP4 164
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 164
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1103626240
MULF4
ASGNF4
line 412
;412:		VectorMA(origin, radius * sin(angle) * crandom(), dir1, start);
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 168
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 172
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72
ADDRLP4 8
INDIRF4
ADDRLP4 116
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 168
INDIRF4
MULF4
ADDRLP4 172
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 172
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 176
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 180
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 116+4
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ADDRLP4 180
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 180
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 184
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 188
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 116+8
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 184
INDIRF4
MULF4
ADDRLP4 188
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 188
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
line 413
;413:		VectorMA(start, radius * cos(angle) * crandom(), dir2, start);
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 192
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 196
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72
ADDRLP4 72
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
ADDRLP4 196
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 196
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 200
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 204
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72+4
ADDRLP4 72+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 200
INDIRF4
MULF4
ADDRLP4 204
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 204
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 208
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 212
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 72+8
ADDRLP4 72+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDRLP4 212
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 212
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
MULF4
MULF4
ADDF4
ASGNF4
line 414
;414:		VectorMA(origin, 0.25 * 0.001 * (le->endTime - le->startTime) * speed, dir0, end);
ADDRLP4 104
ADDRLP4 8
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 964891247
MULF4
ADDRLP4 128
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 84+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 964891247
MULF4
ADDRLP4 128
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 84+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 964891247
MULF4
ADDRLP4 128
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 416
;415:
;416:		le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 417
;417:		le->pos.trTime = le->startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 418
;418:		VectorCopy(start, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 72
INDIRB
ASGNB 12
line 419
;419:		VectorSubtract(end, start, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 104
INDIRF4
ADDRLP4 72
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 104+4
INDIRF4
ADDRLP4 72+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 104+8
INDIRF4
ADDRLP4 72+8
INDIRF4
SUBF4
ASGNF4
line 420
;420:		VectorScale(le->pos.trDelta, 1000.0 * le->lifeRate, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1148846080
MULF4
MULF4
ASGNF4
line 422
;421:
;422:		AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 423
;423:		re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 424
;424:		re->radius = 16;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1098907648
ASGNF4
line 426
;425:		//re->customShader = cgs.media.bfgLFGlareShader;
;426:		re->customShader = trap_R_RegisterShader("flame1");
ADDRGP4 $373
ARGP4
ADDRLP4 244
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 427
;427:		re->rotation = 360 * random();
ADDRLP4 248
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 248
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 248
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 429
;428:
;429:		le->color[0] = 0.78 + 0.22 * random();
ADDRLP4 252
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 252
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 252
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1046562734
MULF4
CNSTF4 1061662228
ADDF4
ASGNF4
line 430
;430:		le->color[1] = 0.6 * random(); //0.39 + 0.31 * random();
ADDRLP4 256
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 256
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 256
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1058642330
MULF4
ASGNF4
line 431
;431:		le->color[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTF4 0
ASGNF4
line 432
;432:		le->color[3] = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1061158912
ASGNF4
line 433
;433:	}
LABELV $348
line 385
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ASGNI4
LABELV $350
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $347
line 435
;434:	
;435:}
LABELV $326
endproc CG_FireballTrail 260 12
proc CG_RocketTrail 88 48
line 443
;436:#endif
;437:
;438:/*
;439:==========================
;440:CG_RocketTrail
;441:==========================
;442:*/
;443:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 453
;444:	int		step;
;445:	vec3_t	origin, lastPos;
;446:	int		t;
;447:	int		startTime, contents;
;448:	int		lastContents;
;449:	entityState_t	*es;
;450:	vec3_t	up;
;451:	localEntity_t	*smoke;
;452:
;453:	if (cg_noProjectileTrail.integer) return;
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $375
ADDRGP4 $374
JUMPV
LABELV $375
line 460
;454:
;455:#if SCREENSHOT_TOOLS
;456:	if (cg.stopTime) return;	// JUHOX
;457:#endif
;458:
;459:#if	MONSTER_MODE	// JUHOX: fireball trail
;460:	if (ent->currentState.otherEntityNum == CLIENTNUM_MONSTER_GUARD) {
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 65
NEI4 $378
line 461
;461:		CG_FireballTrail(ent, wi);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_FireballTrail
CALLV
pop
line 462
;462:		return;
ADDRGP4 $374
JUMPV
LABELV $378
line 466
;463:	}
;464:#endif
;465:
;466:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 467
;467:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 468
;468:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 470
;469:
;470:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 472
;471:
;472:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 473
;473:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 474
;474:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 476
;475:
;476:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107656
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 477
;477:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 480
;478:
;479:	// if object (e.g. grenade) is stationary, don't toss up smoke
;480:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $383
line 481
;481:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 482
;482:		return;
ADDRGP4 $374
JUMPV
LABELV $383
line 487
;483:	}
;484:
;485:#if 1	// JUHOX: no bubbles with lava/slime hack
;486:	if (
;487:		(contents & (CONTENTS_SLIME | CONTENTS_LAVA)) &&
ADDRLP4 40
INDIRI4
CNSTI4 24
BANDI4
CNSTI4 0
EQI4 $386
ADDRLP4 40
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $386
line 489
;488:		(contents & CONTENTS_WATER)
;489:	) {
line 490
;490:		contents &= ~(CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA);
ADDRLP4 40
ADDRLP4 40
INDIRI4
CNSTI4 -57
BANDI4
ASGNI4
line 491
;491:	}
LABELV $386
line 494
;492:#endif
;493:
;494:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 495
;495:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 76
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 76
INDIRI4
ASGNI4
line 497
;496:
;497:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 499
;498:
;499:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $396
line 500
;500:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $374
line 501
;501:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 502
;502:		}
line 503
;503:		return;
ADDRGP4 $374
JUMPV
line 506
;504:	}
;505:
;506:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $393
line 507
;507:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 509
;508:
;509:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 80
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 80
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+751220+444
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 84
INDIRP4
ASGNP4
line 518
;510:					  wi->trailRadius, 
;511:					  1, 1, 1, 0.33f,
;512:					  wi->wiTrailTime, 
;513:					  t,
;514:					  0,
;515:					  0, 
;516:					  cgs.media.smokePuffShader );
;517:		// use the optimized local entity add
;518:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 519
;519:	}
LABELV $394
line 506
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $396
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $393
line 521
;520:
;521:}
LABELV $374
endproc CG_RocketTrail 88 48
proc CG_PlasmaTrail 116 12
line 593
;522:
;523:#ifdef MISSIONPACK
;524:/*
;525:==========================
;526:CG_NailTrail
;527:==========================
;528:*/
;529:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
;530:	int		step;
;531:	vec3_t	origin, lastPos;
;532:	int		t;
;533:	int		startTime, contents;
;534:	int		lastContents;
;535:	entityState_t	*es;
;536:	vec3_t	up;
;537:	localEntity_t	*smoke;
;538:
;539:	up[0] = 0;
;540:	up[1] = 0;
;541:	up[2] = 0;
;542:
;543:	step = 50;
;544:
;545:	es = &ent->currentState;
;546:	startTime = ent->trailTime;
;547:	t = step * ( (startTime + step) / step );
;548:
;549:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
;550:	contents = CG_PointContents( origin, -1 );
;551:
;552:	// if object (e.g. grenade) is stationary, don't toss up smoke
;553:	if ( es->pos.trType == TR_STATIONARY ) {
;554:		ent->trailTime = cg.time;
;555:		return;
;556:	}
;557:
;558:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
;559:	lastContents = CG_PointContents( lastPos, -1 );
;560:
;561:	ent->trailTime = cg.time;
;562:
;563:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
;564:		if ( contents & lastContents & CONTENTS_WATER ) {
;565:			CG_BubbleTrail( lastPos, origin, 8 );
;566:		}
;567:		return;
;568:	}
;569:
;570:	for ( ; t <= ent->trailTime ; t += step ) {
;571:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
;572:
;573:		smoke = CG_SmokePuff( lastPos, up, 
;574:					  wi->trailRadius, 
;575:					  1, 1, 1, 0.33f,
;576:					  wi->wiTrailTime, 
;577:					  t,
;578:					  0,
;579:					  0, 
;580:					  cgs.media.nailPuffShader );
;581:		// use the optimized local entity add
;582:		smoke->leType = LE_SCALE_FADE;
;583:	}
;584:
;585:}
;586:#endif
;587:
;588:/*
;589:==========================
;590:CG_NailTrail
;591:==========================
;592:*/
;593:static void CG_PlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 612
;594:#if 0	// JUHOX: new plasma trail
;595:	localEntity_t	*le;
;596:	refEntity_t		*re;
;597:	entityState_t	*es;
;598:	vec3_t			velocity, xvelocity, origin;
;599:	vec3_t			offset, xoffset;
;600:	vec3_t			v[3];
;601:	int				t, startTime, step;
;602:
;603:	float	waterScale = 1.0f;
;604:#else
;605:	localEntity_t	*le;
;606:	refEntity_t		*re;
;607:	entityState_t	*es;
;608:	vec3_t			origin;
;609:	int				t, startTime, step;
;610:#endif
;611:
;612:	if ( cg_noProjectileTrail.integer || cg_oldPlasma.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
NEI4 $404
ADDRGP4 cg_oldPlasma+12
INDIRI4
CNSTI4 0
EQI4 $400
LABELV $404
line 613
;613:		return;
ADDRGP4 $399
JUMPV
LABELV $400
line 695
;614:	}
;615:
;616:#if SCREENSHOT_TOOLS
;617:	if (cg.stopTime) return;	// JUHOX
;618:#endif
;619:
;620:#if 0	// JUHOX: new plasma trail
;621:	step = 50;
;622:
;623:	es = &cent->currentState;
;624:	startTime = cent->trailTime;
;625:	t = step * ( (startTime + step) / step );
;626:
;627:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
;628:
;629:	le = CG_AllocLocalEntity();
;630:	re = &le->refEntity;
;631:
;632:	velocity[0] = 60 - 120 * crandom();
;633:	velocity[1] = 40 - 80 * crandom();
;634:	velocity[2] = 100 - 200 * crandom();
;635:
;636:	le->leType = LE_MOVE_SCALE_FADE;
;637:	le->leFlags = LEF_TUMBLE;
;638:	le->leBounceSoundType = LEBS_NONE;
;639:	le->leMarkType = LEMT_NONE;
;640:
;641:	le->startTime = cg.time;
;642:	le->endTime = le->startTime + 600;
;643:
;644:	le->pos.trType = TR_GRAVITY;
;645:	le->pos.trTime = cg.time;
;646:
;647:	AnglesToAxis( cent->lerpAngles, v );
;648:
;649:	offset[0] = 2;
;650:	offset[1] = 2;
;651:	offset[2] = 2;
;652:
;653:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;654:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;655:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;656:
;657:	VectorAdd( origin, xoffset, re->origin );
;658:	VectorCopy( re->origin, le->pos.trBase );
;659:
;660:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
;661:		waterScale = 0.10f;
;662:	}
;663:
;664:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
;665:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
;666:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
;667:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
;668:
;669:	AxisCopy( axisDefault, re->axis );
;670:    re->shaderTime = cg.time / 1000.0f;
;671:    re->reType = RT_SPRITE;
;672:    re->radius = 0.25f;
;673:	re->customShader = cgs.media.railRingsShader;
;674:	le->bounceFactor = 0.3f;
;675:
;676:    re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
;677:    re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
;678:    re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
;679:    re->shaderRGBA[3] = 63;
;680:
;681:    le->color[0] = wi->flashDlightColor[0] * 0.2;
;682:    le->color[1] = wi->flashDlightColor[1] * 0.2;
;683:    le->color[2] = wi->flashDlightColor[2] * 0.2;
;684:    le->color[3] = 0.25f;
;685:
;686:	le->angles.trType = TR_LINEAR;
;687:	le->angles.trTime = cg.time;
;688:	le->angles.trBase[0] = rand()&31;
;689:	le->angles.trBase[1] = rand()&31;
;690:	le->angles.trBase[2] = rand()&31;
;691:	le->angles.trDelta[0] = 1;
;692:	le->angles.trDelta[1] = 0.5;
;693:	le->angles.trDelta[2] = 0;
;694:#else
;695:	step = 20;
ADDRLP4 28
CNSTI4 20
ASGNI4
line 697
;696:
;697:	es = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 698
;698:	startTime = cent->trailTime;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 699
;699:	t = step * ( (startTime + step) / step );
ADDRLP4 12
ADDRLP4 28
INDIRI4
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ADDRLP4 28
INDIRI4
DIVI4
MULI4
ASGNI4
line 701
;700:
;701:	cent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 703
;702:
;703:	for (; t <= cent->trailTime; t += step) {
ADDRGP4 $409
JUMPV
LABELV $406
line 704
;704:		BG_EvaluateTrajectory(&es->pos, t - 20, origin);
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
INDIRI4
CNSTI4 20
SUBI4
ARGI4
ADDRLP4 16
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 706
;705:
;706:		le = CG_AllocLocalEntity();
ADDRLP4 40
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 707
;707:		re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 709
;708:
;709:		le->leType = LE_TRAIL_PARTICLE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 10
ASGNI4
line 711
;710:
;711:		le->startTime = t;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 712
;712:		le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 713
;713:		le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 715
;714:
;715:		le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 716
;716:		le->pos.trTime = le->startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 717
;717:		VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRB
ASGNB 12
line 718
;718:		VectorScale(es->pos.trDelta, 0.1, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1036831949
MULF4
ASGNF4
line 719
;719:		le->pos.trDelta[0] += 50 * crandom();
ADDRLP4 56
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 56
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 56
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
ADDF4
ASGNF4
line 720
;720:		le->pos.trDelta[1] += 50 * crandom();
ADDRLP4 64
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 68
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
ADDF4
ASGNF4
line 721
;721:		le->pos.trDelta[2] += 50 * crandom();
ADDRLP4 72
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 76
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 72
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 72
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1112014848
MULF4
ADDF4
ASGNF4
line 723
;722:
;723:		AxisCopy(axisDefault, re->axis);
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 724
;724:		re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 725
;725:		re->radius = 8;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1090519040
ASGNF4
line 726
;726:		re->customShader = cgs.media.railRingsShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+244
INDIRI4
ASGNI4
line 728
;727:
;728:		re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 84
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 88
CNSTF4 1325400064
ASGNF4
ADDRLP4 84
INDIRF4
ADDRLP4 88
INDIRF4
LTF4 $413
ADDRLP4 80
ADDRLP4 84
INDIRF4
ADDRLP4 88
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $414
JUMPV
LABELV $413
ADDRLP4 80
ADDRLP4 84
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $414
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 80
INDIRU4
CVUU1 4
ASGNU1
line 729
;729:		re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 96
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 100
CNSTF4 1325400064
ASGNF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRF4
LTF4 $416
ADDRLP4 92
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $417
JUMPV
LABELV $416
ADDRLP4 92
ADDRLP4 96
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $417
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 730
;730:		re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 108
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 1115422720
MULF4
ASGNF4
ADDRLP4 112
CNSTF4 1325400064
ASGNF4
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
LTF4 $419
ADDRLP4 104
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $420
JUMPV
LABELV $419
ADDRLP4 104
ADDRLP4 108
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $420
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 104
INDIRU4
CVUU1 4
ASGNU1
line 731
;731:		re->shaderRGBA[3] = 63;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 733
;732:
;733:		le->color[3] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1065353216
ASGNF4
line 734
;734:	}
LABELV $407
line 703
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 28
INDIRI4
ADDI4
ASGNI4
LABELV $409
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LEI4 $406
line 737
;735:#endif
;736:
;737:}
LABELV $399
endproc CG_PlasmaTrail 116 12
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 744
;738:
;739:/*
;740:==========================
;741:CG_GrappleTrail
;742:==========================
;743:*/
;744:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 752
;745:	vec3_t	origin;
;746:	entityState_t	*es;
;747:	vec3_t			forward, up;
;748:	refEntity_t		beam;
;749:
;750:	// JUHOX: don't draw normal grapple trail with the new hook
;751:#if GRAPPLE_ROPE
;752:	if (cgs.hookMode != HM_classic) return;
ADDRGP4 cgs+31868
INDIRI4
CNSTI4 1
EQI4 $422
ADDRGP4 $421
JUMPV
LABELV $422
line 755
;753:#endif
;754:
;755:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 757
;756:
;757:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107656
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 758
;758:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 760
;759:
;760:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 762
;761:	//FIXME adjust for muzzle position
;762:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities+728
ADDP4
INDIRB
ASGNB 12
line 763
;763:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 764
;764:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities+740
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 765
;765:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 140
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 140+4
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 140+8
INDIRF4
CNSTF4 3233808384
MULF4
ADDF4
ASGNF4
line 766
;766:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 768
;767:
;768:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $445
line 769
;769:		return; // Don't draw if close
ADDRGP4 $421
JUMPV
LABELV $445
line 776
;770:
;771:	// JUHOX: draw grapple rope
;772:#if !GRAPPLE_ROPE
;773:	beam.reType = RT_LIGHTNING;
;774:	beam.customShader = cgs.media.lightningShader;
;775:#else
;776:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 777
;777:	beam.customShader = cgs.media.grappleShader;
ADDRLP4 0+112
ADDRGP4 cgs+751220+256
INDIRI4
ASGNI4
line 780
;778:#endif
;779:
;780:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 781
;781:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 782
;782:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 783
;783:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 784
;784:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 785
;785:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 786
;786:}
LABELV $421
endproc CG_GrappleTrail 184 16
proc CG_GrenadeTrail 0 8
line 793
;787:
;788:/*
;789:==========================
;790:CG_GrenadeTrail
;791:==========================
;792:*/
;793:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 794
;794:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 795
;795:}
LABELV $460
endproc CG_GrenadeTrail 0 8
lit
align 1
LABELV $573
byte 1 65
byte 1 67
byte 1 68
byte 1 69
byte 1 71
byte 1 72
byte 1 74
byte 1 75
byte 1 0
export CG_RegisterWeapon
code
proc CG_RegisterWeapon 368 12
line 805
;796:
;797:
;798:/*
;799:=================
;800:CG_RegisterWeapon
;801:
;802:The server says this item is used on this level
;803:=================
;804:*/
;805:void CG_RegisterWeapon( int weaponNum ) {
line 812
;806:	weaponInfo_t	*weaponInfo;
;807:	gitem_t			*item, *ammo;
;808:	char			path[MAX_QPATH];
;809:	vec3_t			mins, maxs;
;810:	int				i;
;811:
;812:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 814
;813:
;814:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $462
line 815
;815:		return;
ADDRGP4 $461
JUMPV
LABELV $462
line 818
;816:	}
;817:
;818:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $464
line 819
;819:		return;
ADDRGP4 $461
JUMPV
LABELV $464
line 822
;820:	}
;821:
;822:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 823
;823:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 825
;824:
;825:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $469
JUMPV
LABELV $466
line 826
;826:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $471
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $471
line 827
;827:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 828
;828:			break;
ADDRGP4 $468
JUMPV
LABELV $471
line 830
;829:		}
;830:	}
LABELV $467
line 825
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $469
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $466
LABELV $468
line 831
;831:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $473
line 832
;832:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $475
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 833
;833:	}
LABELV $473
line 834
;834:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 52
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 837
;835:
;836:	// load cmodel before model so filecache works
;837:	weaponInfo->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 840
;838:
;839:	// calc midpoint for rotation
;840:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 841
;841:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $476
line 842
;842:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
ADDP4
INDIRF4
SUBF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 843
;843:	}
LABELV $477
line 841
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $476
line 845
;844:
;845:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 846
;846:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 848
;847:
;848:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $483
JUMPV
LABELV $480
line 849
;849:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 2
NEI4 $485
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $485
line 850
;850:			break;
ADDRGP4 $482
JUMPV
LABELV $485
line 852
;851:		}
;852:	}
LABELV $481
line 848
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $483
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $480
LABELV $482
line 853
;853:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $487
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $487
line 854
;854:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 855
;855:	}
LABELV $487
line 857
;856:
;857:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 858
;858:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 859
;859:	strcat( path, "_flash.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $489
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 860
;860:	weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 862
;861:
;862:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 863
;863:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 864
;864:	strcat( path, "_barrel.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $490
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 865
;865:	weaponInfo->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 867
;866:
;867:	strcpy( path, item->world_model[0] );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 868
;868:	COM_StripExtension( path, path );
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 869
;869:	strcat( path, "_hand.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $491
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 870
;870:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 872
;871:
;872:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $492
line 873
;873:		weaponInfo->handsModel = trap_R_RegisterModel( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $494
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 874
;874:	}
LABELV $492
line 876
;875:
;876:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 878
;877:
;878:	switch ( weaponNum ) {
ADDRLP4 132
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 1
LTI4 $495
ADDRLP4 132
INDIRI4
CNSTI4 11
GTI4 $495
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $640-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $640
address $497
address $551
address $556
address $565
address $558
address $500
address $600
address $591
address $613
address $525
address $570
code
LABELV $497
line 880
;879:	case WP_GAUNTLET:
;880:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 881
;881:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $498
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 136
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 882
;882:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $499
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 883
;883:		break;
ADDRGP4 $496
JUMPV
LABELV $500
line 886
;884:
;885:	case WP_LIGHTNING:
;886:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 887
;887:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $501
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 888
;888:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $502
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 890
;889:
;890:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $503
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 894
;891:#if 0	// JUHOX: use Hunt's lightning bolt shader
;892:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
;893:#else
;894:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltHunt");
ADDRGP4 $506
ARGP4
ADDRLP4 156
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+252
ADDRLP4 156
INDIRI4
ASGNI4
line 896
;895:#endif
;896:		cgs.media.lightningExplosionModel = trap_R_RegisterModel( "models/weaphits/crackle.md3" );
ADDRGP4 $509
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRGP4 cgs+751220+688
ADDRLP4 160
INDIRI4
ASGNI4
line 897
;897:		cgs.media.sfx_lghit1 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $512
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 164
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+964
ADDRLP4 164
INDIRI4
ASGNI4
line 898
;898:		cgs.media.sfx_lghit2 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $515
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+968
ADDRLP4 168
INDIRI4
ASGNI4
line 899
;899:		cgs.media.sfx_lghit3 = trap_S_RegisterSound( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $518
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+972
ADDRLP4 172
INDIRI4
ASGNI4
line 901
;900:
;901:		cgs.media.dischargeFlashShader = trap_R_RegisterShader("dischargeflash");
ADDRGP4 $521
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+260
ADDRLP4 176
INDIRI4
ASGNI4
line 902
;902:		cgs.media.dischargeFlashSound = trap_S_RegisterSound("sound/discharge.wav", qfalse);
ADDRGP4 $524
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1064
ADDRLP4 180
INDIRI4
ASGNI4
line 903
;903:		break;
ADDRGP4 $496
JUMPV
LABELV $525
line 906
;904:
;905:	case WP_GRAPPLING_HOOK:
;906:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 917
;907:#if !GRAPPLE_ROPE	// JUHOX: new grapple media
;908:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
;909:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
;910:		weaponInfo->missileDlight = 200;
;911:		weaponInfo->wiTrailTime = 2000;
;912:		weaponInfo->trailRadius = 64;
;913:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
;914:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/melee/fsthum.wav", qfalse );
;915:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav", qfalse );
;916:#else
;917:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 918
;918:		weaponInfo->missileModel = trap_R_RegisterModel("models/weapons2/grapple/hook.md3");
ADDRGP4 $526
ARGP4
ADDRLP4 184
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 919
;919:		cgs.media.grappleShotSound = trap_S_RegisterSound("sound/weapons/grenade/grenlf1a.wav", qfalse);
ADDRGP4 $529
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1104
ADDRLP4 188
INDIRI4
ASGNI4
line 920
;920:		cgs.media.grappleThrowSound = trap_S_RegisterSound("sound/weapons/grapple/throw.wav", qfalse);
ADDRGP4 $532
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1108
ADDRLP4 192
INDIRI4
ASGNI4
line 921
;921:		cgs.media.ropeExplosionSound = trap_S_RegisterSound("sound/weapons/grapple/release.wav", qfalse);
ADDRGP4 $535
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1112
ADDRLP4 196
INDIRI4
ASGNI4
line 922
;922:		cgs.media.grappleWindOffSound = trap_S_RegisterSound("sound/weapons/grapple/windoff.wav", qfalse);
ADDRGP4 $538
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1116
ADDRLP4 200
INDIRI4
ASGNI4
line 923
;923:		cgs.media.grappleRewindSound = trap_S_RegisterSound("sound/weapons/grapple/rewind.wav", qfalse);
ADDRGP4 $541
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1120
ADDRLP4 204
INDIRI4
ASGNI4
line 924
;924:		cgs.media.grapplePullingSound = trap_S_RegisterSound("sound/weapons/grapple/pulling.wav", qfalse);
ADDRGP4 $544
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1124
ADDRLP4 208
INDIRI4
ASGNI4
line 925
;925:		cgs.media.grappleBlockingSound = trap_S_RegisterSound("sound/weapons/grapple/blocked.wav", qfalse);
ADDRGP4 $547
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 cgs+751220+1128
ADDRLP4 212
INDIRI4
ASGNI4
line 926
;926:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/grenade/grenlf1a.wav", qfalse);
ADDRGP4 $529
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 927
;927:		cgs.media.grappleShader = trap_R_RegisterShader("grappleRope");
ADDRGP4 $550
ARGP4
ADDRLP4 220
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+256
ADDRLP4 220
INDIRI4
ASGNI4
line 929
;928:#endif
;929:		break;
ADDRGP4 $496
JUMPV
LABELV $551
line 946
;930:
;931:#ifdef MISSIONPACK
;932:	case WP_CHAINGUN:
;933:		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/vulcan/wvulfire.wav", qfalse );
;934:		weaponInfo->loopFireSound = qtrue;
;935:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
;936:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
;937:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
;938:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
;939:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
;940:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
;941:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
;942:		break;
;943:#endif
;944:
;945:	case WP_MACHINEGUN:
;946:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 953
;947:#if 0	// JUHOX: only 1 flash sound for the machinegun
;948:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf1b.wav", qfalse );
;949:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf2b.wav", qfalse );
;950:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf3b.wav", qfalse );
;951:		weaponInfo->flashSound[3] = trap_S_RegisterSound( "sound/weapons/machinegun/machgf4b.wav", qfalse );
;952:#else
;953:		weaponInfo->flashSound[0] = trap_S_RegisterSound("sound/weapons/machinegun/mgshot.wav", qfalse);
ADDRGP4 $552
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 955
;954:#endif
;955:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 956
;956:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $555
ARGP4
ADDRLP4 228
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+700
ADDRLP4 228
INDIRI4
ASGNI4
line 957
;957:		break;
ADDRGP4 $496
JUMPV
LABELV $556
line 960
;958:
;959:	case WP_SHOTGUN:
;960:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 961
;961:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $557
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 962
;962:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 963
;963:		break;
ADDRGP4 $496
JUMPV
LABELV $558
line 966
;964:
;965:	case WP_ROCKET_LAUNCHER:
;966:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $559
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 967
;967:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $560
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 968
;968:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 969
;969:		weaponInfo->missileDlight = 200;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 970
;970:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 971
;971:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 973
;972:		
;973:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 974
;974:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 976
;975:
;976:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $561
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 977
;977:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $564
ARGP4
ADDRLP4 248
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+704
ADDRLP4 248
INDIRI4
ASGNI4
line 978
;978:		break;
ADDRGP4 $496
JUMPV
LABELV $565
line 993
;979:
;980:#ifdef MISSIONPACK
;981:	case WP_PROX_LAUNCHER:
;982:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/proxmine.md3" );
;983:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
;984:		weaponInfo->wiTrailTime = 700;
;985:		weaponInfo->trailRadius = 32;
;986:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
;987:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/proxmine/wstbfire.wav", qfalse );
;988:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
;989:		break;
;990:#endif
;991:
;992:	case WP_GRENADE_LAUNCHER:
;993:		weaponInfo->missileModel = trap_R_RegisterModel( "models/ammo/grenade1.md3" );
ADDRGP4 $566
ARGP4
ADDRLP4 252
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 994
;994:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 995
;995:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 996
;996:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 997
;997:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 998
;998:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $529
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 999
;999:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $569
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+708
ADDRLP4 260
INDIRI4
ASGNI4
line 1000
;1000:		break;
ADDRGP4 $496
JUMPV
LABELV $570
line 1004
;1001:
;1002:#if MONSTER_MODE	// JUHOX: register monster launcher
;1003:	case WP_MONSTER_LAUNCHER:
;1004:		weaponInfo->missileModel = trap_R_RegisterModel("models/powerups/health/small_sphere.md3");
ADDRGP4 $571
ARGP4
ADDRLP4 264
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 1005
;1005:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1006
;1006:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/monsterl/monsterlf.wav", qfalse );
ADDRGP4 $572
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 1007
;1007:		{
line 1009
;1008:			int i, j;
;1009:			const char index[] = "ACDEGHJK";
ADDRLP4 280
ADDRGP4 $573
INDIRB
ASGNB 9
line 1011
;1010:
;1011:			for (i = 0; i < 3; i++) {
ADDRLP4 276
CNSTI4 0
ASGNI4
LABELV $574
line 1012
;1012:				for (j = 0; j < 8; j++) {
ADDRLP4 272
CNSTI4 0
ASGNI4
LABELV $578
line 1013
;1013:					cgs.media.seedBounceSound[i][j] = trap_S_RegisterSound(
ADDRGP4 $584
ARGP4
ADDRLP4 272
INDIRI4
ADDRLP4 280
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 276
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 300
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 300
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 304
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 276
INDIRI4
CNSTI4 5
LSHI4
ADDRGP4 cgs+751220+1148
ADDP4
ADDP4
ADDRLP4 304
INDIRI4
ASGNI4
line 1017
;1014:						va("sound/weapons/monsterl/ball%c%d.wav", index[j], i + 1),
;1015:						qfalse
;1016:					);
;1017:				}
LABELV $579
line 1012
ADDRLP4 272
ADDRLP4 272
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 8
LTI4 $578
line 1018
;1018:			}
LABELV $575
line 1011
ADDRLP4 276
ADDRLP4 276
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 3
LTI4 $574
line 1019
;1019:		}
line 1020
;1020:		cgs.media.monsterLauncherShader = trap_R_RegisterShader("models/weapons2/monsterl/monsterl.tga");
ADDRGP4 $587
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+724
ADDRLP4 272
INDIRI4
ASGNI4
line 1021
;1021:		cgs.media.monsterSeedMetalShader = trap_R_RegisterShader("models/weapons2/monsterl/seed");
ADDRGP4 $590
ARGP4
ADDRLP4 276
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+720
ADDRLP4 276
INDIRI4
ASGNI4
line 1022
;1022:		break;
ADDRGP4 $496
JUMPV
LABELV $591
line 1040
;1023:#endif
;1024:
;1025:#ifdef MISSIONPACK
;1026:	case WP_NAILGUN:
;1027:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
;1028:		weaponInfo->missileTrailFunc = CG_NailTrail;
;1029:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;1030:		weaponInfo->trailRadius = 16;
;1031:		weaponInfo->wiTrailTime = 250;
;1032:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/nail.md3" );
;1033:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
;1034:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/nailgun/wnalfire.wav", qfalse );
;1035:		break;
;1036:#endif
;1037:
;1038:	case WP_PLASMAGUN:
;1039://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1040:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 1041
;1041:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $592
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 1042
;1042:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1043
;1043:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $593
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 284
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 1044
;1044:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $596
ARGP4
ADDRLP4 288
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+696
ADDRLP4 288
INDIRI4
ASGNI4
line 1048
;1045:#if 0	// JUHOX: use new shader for railRings effect
;1046:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
;1047:#else
;1048:		cgs.media.railRingsShader = trap_R_RegisterShader("plasmaParticle");
ADDRGP4 $599
ARGP4
ADDRLP4 292
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+244
ADDRLP4 292
INDIRI4
ASGNI4
line 1050
;1049:#endif
;1050:		break;
ADDRGP4 $496
JUMPV
LABELV $600
line 1053
;1051:
;1052:	case WP_RAILGUN:
;1053:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $601
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 296
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 296
INDIRI4
ASGNI4
line 1054
;1054:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1055
;1055:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $602
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 300
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 1056
;1056:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $605
ARGP4
ADDRLP4 304
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+692
ADDRLP4 304
INDIRI4
ASGNI4
line 1057
;1057:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $596
ARGP4
ADDRLP4 308
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+696
ADDRLP4 308
INDIRI4
ASGNI4
line 1061
;1058:#if 0	// JUHOX: use new shader for railRings effect
;1059:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
;1060:#else
;1061:		cgs.media.railRingsShader = trap_R_RegisterShader("plasmaParticle");
ADDRGP4 $599
ARGP4
ADDRLP4 312
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+244
ADDRLP4 312
INDIRI4
ASGNI4
line 1063
;1062:#endif
;1063:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $612
ARGP4
ADDRLP4 316
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+248
ADDRLP4 316
INDIRI4
ASGNI4
line 1064
;1064:		break;
ADDRGP4 $496
JUMPV
LABELV $613
line 1067
;1065:
;1066:	case WP_BFG:
;1067:		weaponInfo->readySound = trap_S_RegisterSound( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $614
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 320
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 320
INDIRI4
ASGNI4
line 1068
;1068:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.7f, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1069
;1069:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $615
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 324
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 324
INDIRI4
ASGNI4
line 1070
;1070:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $618
ARGP4
ADDRLP4 328
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+712
ADDRLP4 328
INDIRI4
ASGNI4
line 1074
;1071:#if 0	// JUHOX: we no longer use the old BFG missile model
;1072:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weaphits/bfg.md3" );
;1073:#endif
;1074:		cgs.media.bfgLFGlareShader = trap_R_RegisterShader("bfgLFGlare");	// JUHOX
ADDRGP4 $621
ARGP4
ADDRLP4 332
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+480
ADDRLP4 332
INDIRI4
ASGNI4
line 1075
;1075:		cgs.media.bfgLFDiscShader = trap_R_RegisterShader("bfgLFDisc");	// JUHOX
ADDRGP4 $624
ARGP4
ADDRLP4 336
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+484
ADDRLP4 336
INDIRI4
ASGNI4
line 1076
;1076:		cgs.media.bfgLFRingShader = trap_R_RegisterShader("bfgLFRing");	// JUHOX
ADDRGP4 $627
ARGP4
ADDRLP4 340
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+488
ADDRLP4 340
INDIRI4
ASGNI4
line 1077
;1077:		cgs.media.bfgLFStarShader = trap_R_RegisterShader("bfgLFStar");	// JUHOX
ADDRGP4 $630
ARGP4
ADDRLP4 344
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+496
ADDRLP4 344
INDIRI4
ASGNI4
line 1078
;1078:		cgs.media.bfgLFLineShader = trap_R_RegisterShader("bfgLFLine");	// JUHOX
ADDRGP4 $633
ARGP4
ADDRLP4 348
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+492
ADDRLP4 348
INDIRI4
ASGNI4
line 1079
;1079:		cgs.media.bfgSuperExplShader = trap_R_RegisterShader("bfgSuperExpl");	// JUHOX
ADDRGP4 $636
ARGP4
ADDRLP4 352
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+500
ADDRLP4 352
INDIRI4
ASGNI4
line 1080
;1080:		weaponInfo->missileSound = trap_S_RegisterSound( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $560
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 356
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 356
INDIRI4
ASGNI4
line 1081
;1081:		cgs.media.bfgReloadingShader = trap_R_RegisterShader("models/weapons2/bfg/reloading");	// JUHOX
ADDRGP4 $639
ARGP4
ADDRLP4 360
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+751220+664
ADDRLP4 360
INDIRI4
ASGNI4
line 1082
;1082:		weaponInfo->missileDlight = 400;	// JUHOX
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1137180672
ASGNF4
line 1083
;1083:		MAKERGB(weaponInfo->missileDlightColor, 1, 1, 1);	// JUHOX
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 1084
;1084:		break;
ADDRGP4 $496
JUMPV
LABELV $495
line 1087
;1085:
;1086:	 default:
;1087:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1088
;1088:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $561
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 364
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 364
INDIRI4
ASGNI4
line 1089
;1089:		break;
LABELV $496
line 1091
;1090:	}
;1091:}
LABELV $461
endproc CG_RegisterWeapon 368 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 76 12
line 1100
;1092:
;1093:/*
;1094:=================
;1095:CG_RegisterItemVisuals
;1096:
;1097:The server says this item is used on this level
;1098:=================
;1099:*/
;1100:void CG_RegisterItemVisuals( int itemNum ) {
line 1104
;1101:	itemInfo_t		*itemInfo;
;1102:	gitem_t			*item;
;1103:
;1104:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $645
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $643
LABELV $645
line 1105
;1105:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $646
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1106
;1106:	}
LABELV $643
line 1108
;1107:
;1108:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 24
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 1109
;1109:	if ( itemInfo->registered ) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $647
line 1110
;1110:		return;
ADDRGP4 $642
JUMPV
LABELV $647
line 1113
;1111:	}
;1112:
;1113:	item = &bg_itemlist[ itemNum ];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 52
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 1115
;1114:
;1115:	memset( itemInfo, 0, sizeof( &itemInfo ) );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1116
;1116:	itemInfo->registered = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 1118
;1117:
;1118:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1120
;1119:
;1120:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1122
;1121:
;1122:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $649
line 1123
;1123:		CG_RegisterWeapon( item->giTag );
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1124
;1124:	}
LABELV $649
line 1129
;1125:
;1126:	//
;1127:	// powerups have an accompanying ring or sphere
;1128:	//
;1129:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 5
EQI4 $655
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 4
EQI4 $655
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
EQI4 $655
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 6
NEI4 $651
LABELV $655
line 1130
;1130:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 1131
;1131:		if ( item->world_model[1] ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $656
line 1132
;1132:			itemInfo->models[1] = trap_R_RegisterModel( item->world_model[1] );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1133
;1133:		}
LABELV $656
line 1134
;1134:	}
LABELV $651
line 1137
;1135:
;1136:#if 1	// JUHOX: get midpoint for armor fragments
;1137:	if (item->giType == IT_ARMOR && item->giTag) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 3
NEI4 $658
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 0
EQI4 $658
line 1140
;1138:		float* midpoint;
;1139:
;1140:		midpoint = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 1141
;1141:		if (!Q_stricmp(item->classname, "item_armor_smallfrag")) {
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $662
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $660
line 1142
;1142:			midpoint = cgs.smallArmorFragmentMidpoint;
ADDRLP4 28
ADDRGP4 cgs+41296
ASGNP4
line 1143
;1143:		}
ADDRGP4 $661
JUMPV
LABELV $660
line 1144
;1144:		else if (!Q_stricmp(item->classname, "item_armor_largefrag")) {
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 $666
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $664
line 1145
;1145:			midpoint = cgs.largeArmorFragmentMidpoint;
ADDRLP4 28
ADDRGP4 cgs+41308
ASGNP4
line 1146
;1146:		}
LABELV $664
LABELV $661
line 1148
;1147:
;1148:		if (midpoint) {
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $668
line 1151
;1149:			vec3_t mins, maxs;
;1150:
;1151:			trap_R_ModelBounds(itemInfo->models[0], mins, maxs);
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 1152
;1152:			VectorSubtract(maxs, mins, maxs);
ADDRLP4 40
ADDRLP4 40
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 52+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 52+8
INDIRF4
SUBF4
ASGNF4
line 1153
;1153:			VectorMA(mins, 0.5, maxs, midpoint);
ADDRLP4 28
INDIRP4
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 52+4
INDIRF4
ADDRLP4 40+4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 52+8
INDIRF4
ADDRLP4 40+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 1154
;1154:			if (midpoint == cgs.largeArmorFragmentMidpoint) {
ADDRLP4 28
INDIRP4
CVPU4 4
ADDRGP4 cgs+41308
CVPU4 4
NEU4 $680
line 1155
;1155:				VectorScale(midpoint, 1.5, midpoint);
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1069547520
MULF4
ASGNF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1069547520
MULF4
ASGNF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1069547520
MULF4
ASGNF4
line 1156
;1156:			}
LABELV $680
line 1157
;1157:		}
LABELV $668
line 1158
;1158:	}
LABELV $658
line 1160
;1159:#endif
;1160:}
LABELV $642
endproc CG_RegisterItemVisuals 76 12
proc CG_MapTorsoToWeaponFrame 24 0
line 1177
;1161:
;1162:
;1163:/*
;1164:========================================================================================
;1165:
;1166:VIEW WEAPON
;1167:
;1168:========================================================================================
;1169:*/
;1170:
;1171:/*
;1172:=================
;1173:CG_MapTorsoToWeaponFrame
;1174:
;1175:=================
;1176:*/
;1177:static int CG_MapTorsoToWeaponFrame( clientInfo_t *ci, int frame ) {
line 1180
;1178:
;1179:	// change weapon
;1180:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
LTI4 $684
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $684
line 1181
;1181:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 1182
;1182:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $683
JUMPV
LABELV $684
line 1186
;1183:	}
;1184:
;1185:	// stand attack
;1186:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
LTI4 $686
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $686
line 1187
;1187:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 1188
;1188:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $683
JUMPV
LABELV $686
line 1192
;1189:	}
;1190:
;1191:	// stand attack 2
;1192:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
LTI4 $688
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
CNSTI4 6
ADDI4
GEI4 $688
line 1193
;1193:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 1194
;1194:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $683
JUMPV
LABELV $688
line 1197
;1195:	}
;1196:	
;1197:	return 0;
CNSTI4 0
RETI4
LABELV $683
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 1206
;1198:}
;1199:
;1200:
;1201:/*
;1202:==============
;1203:CG_CalculateWeaponPosition
;1204:==============
;1205:*/
;1206:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 1211
;1207:	float	scale;
;1208:	int		delta;
;1209:	float	fracsin;
;1210:
;1211:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 1212
;1212:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+109628
INDIRB
ASGNB 12
line 1215
;1213:
;1214:	// on odd legs, invert some angles
;1215:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+128084
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $694
line 1216
;1216:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+128088
INDIRF4
NEGF4
ASGNF4
line 1217
;1217:	} else {
ADDRGP4 $695
JUMPV
LABELV $694
line 1218
;1218:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+128088
INDIRF4
ASGNF4
line 1219
;1219:	}
LABELV $695
line 1222
;1220:
;1221:	// gun angles from bobbing
;1222:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+128080
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 1223
;1223:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+128080
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1224
;1224:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+128088
INDIRF4
ADDRGP4 cg+128080
INDIRF4
MULF4
CNSTF4 1000593162
MULF4
ADDF4
ASGNF4
line 1227
;1225:
;1226:	// drop the weapon when landing
;1227:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+107656
INDIRI4
ADDRGP4 cg+109144
INDIRI4
SUBI4
ASGNI4
line 1228
;1228:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $705
line 1229
;1229:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+109140
INDIRF4
CNSTF4 1048576000
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1004172302
MULF4
ADDF4
ASGNF4
line 1230
;1230:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $706
JUMPV
LABELV $705
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $708
line 1231
;1231:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 cg+109140
INDIRF4
CNSTF4 1048576000
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 995783694
MULF4
ADDF4
ASGNF4
line 1233
;1232:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1233:	}
LABELV $708
LABELV $706
line 1246
;1234:
;1235:#if 0
;1236:	// drop the weapon when stair climbing
;1237:	delta = cg.time - cg.stepTime;
;1238:	if ( delta < STEP_TIME/2 ) {
;1239:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;1240:	} else if ( delta < STEP_TIME ) {
;1241:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;1242:	}
;1243:#endif
;1244:
;1245:	// idle drift
;1246:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+128088
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1247
;1247:	fracsin = sin( cg.time * 0.001 );
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 1248
;1248:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1249
;1249:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1250
;1250:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1008981770
MULF4
ADDF4
ASGNF4
line 1251
;1251:}
LABELV $690
endproc CG_CalculateWeaponPosition 40 4
proc CG_CurvedLine 144 24
line 1262
;1252:
;1253:
;1254:/*
;1255:===============
;1256:JUHOX: CG_CurvedLine
;1257:===============
;1258:*/
;1259:static void CG_CurvedLine(
;1260:	const vec3_t start, const vec3_t end, const vec3_t startDir,
;1261:	qhandle_t shader, float segmentLen, float scrollSpeed
;1262:) {
line 1271
;1263:	float dist;
;1264:	vec3_t dir1;
;1265:	vec3_t dir2;
;1266:	int n;
;1267:	float totalLength;
;1268:	vec3_t currentPos;
;1269:	int i;
;1270:
;1271:	VectorSubtract(end, start, dir2);
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 56
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1272
;1272:	dist = VectorLength(dir2);
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 60
INDIRF4
ASGNF4
line 1273
;1273:	VectorScale(startDir, dist, dir1);
ADDRLP4 64
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 1274
;1274:	n = dist / 20;
ADDRLP4 28
ADDRLP4 48
INDIRF4
CNSTF4 1028443341
MULF4
CVFI4 4
ASGNI4
line 1275
;1275:	if (n <= 0) n = 1;
ADDRLP4 28
INDIRI4
CNSTI4 0
GTI4 $718
ADDRLP4 28
CNSTI4 1
ASGNI4
LABELV $718
line 1276
;1276:	dist /= n;	// segment length
ADDRLP4 48
ADDRLP4 48
INDIRF4
ADDRLP4 28
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1278
;1277:
;1278:	totalLength = 0;
ADDRLP4 32
CNSTF4 0
ASGNF4
line 1279
;1279:	VectorCopy(start, currentPos);
ADDRLP4 36
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1280
;1280:	for (i = 0; i < n; i++) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 $723
JUMPV
LABELV $720
line 1285
;1281:		float x;
;1282:		vec3_t p1, p2;
;1283:		vec3_t nextPos;
;1284:
;1285:		x = (float)(i+1) / n;
ADDRLP4 72
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
CVIF4 4
ADDRLP4 28
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1286
;1286:		VectorMA(start, x, dir1, p1);
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
ADDRLP4 112
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88+4
ADDRLP4 112
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
line 1287
;1287:		VectorMA(start, x, dir2, p2);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 120
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ASGNF4
line 1288
;1288:		VectorSubtract(p2, p1, p2);
ADDRLP4 76
ADDRLP4 76
INDIRF4
ADDRLP4 88
INDIRF4
SUBF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 76+4
INDIRF4
ADDRLP4 88+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 76+8
ADDRLP4 76+8
INDIRF4
ADDRLP4 88+8
INDIRF4
SUBF4
ASGNF4
line 1289
;1289:		VectorMA(p1, x * x * x, p2, nextPos);
ADDRLP4 132
ADDRLP4 72
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDRLP4 72
INDIRF4
MULF4
ASGNF4
ADDRLP4 100
ADDRLP4 88
INDIRF4
ADDRLP4 76
INDIRF4
ADDRLP4 132
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+4
ADDRLP4 88+4
INDIRF4
ADDRLP4 76+4
INDIRF4
ADDRLP4 132
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100+8
ADDRLP4 88+8
INDIRF4
ADDRLP4 76+8
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDRLP4 72
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1291
;1290:
;1291:		totalLength = CG_DrawLineSegment(
ADDRLP4 36
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRFP4 16
INDIRF4
ARGF4
ADDRFP4 20
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_DrawLineSegment
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 140
INDIRF4
ASGNF4
line 1297
;1292:			currentPos, nextPos,
;1293:			totalLength, segmentLen, scrollSpeed,
;1294:			shader
;1295:		);
;1296:
;1297:		VectorCopy(nextPos, currentPos);
ADDRLP4 36
ADDRLP4 100
INDIRB
ASGNB 12
line 1298
;1298:	}
LABELV $721
line 1280
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $723
ADDRLP4 24
INDIRI4
ADDRLP4 28
INDIRI4
LTI4 $720
line 1299
;1299:}
LABELV $713
endproc CG_CurvedLine 144 24
proc CG_LightningBolt 252 28
line 1306
;1300:
;1301:/*
;1302:===============
;1303:JUHOX: CG_LightningBolt (new version)
;1304:===============
;1305:*/
;1306:static void CG_LightningBolt(centity_t* cent, vec3_t origin) {
line 1313
;1307:	refEntity_t beam;
;1308:	vec3_t startPoint, endPoint;
;1309:	vec3_t forward;
;1310:	vec3_t right;
;1311:	int target;
;1312:
;1313:	if (cent->currentState.weapon != WP_LIGHTNING) return;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
EQI4 $745
ADDRGP4 $744
JUMPV
LABELV $745
line 1315
;1314:
;1315:	memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1316
;1316:	AngleVectors(cent->lerpAngles, forward, right, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRLP4 168
ARGP4
ADDRLP4 152
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1318
;1317:
;1318:	target = cent->currentState.otherEntityNum2;
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 1319
;1319:	if (target >= 0 && target < ENTITYNUM_MAX_NORMAL) {
ADDRLP4 164
INDIRI4
CNSTI4 0
LTI4 $747
ADDRLP4 164
INDIRI4
CNSTI4 1022
GEI4 $747
line 1322
;1320:		centity_t* targetCent;
;1321:
;1322:		targetCent = &cg_entities[target];
ADDRLP4 196
ADDRLP4 164
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1323
;1323:		VectorCopy(origin, startPoint);
ADDRLP4 180
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1324
;1324:		if (targetCent->currentValid) {
ADDRLP4 196
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
EQI4 $749
line 1325
;1325:			CG_CalcEntityLerpPositions(targetCent);
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 CG_CalcEntityLerpPositions
CALLV
pop
line 1326
;1326:			VectorCopy(targetCent->lerpOrigin, endPoint);
ADDRLP4 140
ADDRLP4 196
INDIRP4
CNSTI4 728
ADDP4
INDIRB
ASGNB 12
line 1328
;1327:
;1328:			endPoint[2] += BG_PlayerTargetOffset(&targetCent->currentState, LIGHTNING_TARGET_POS);
ADDRLP4 196
INDIRP4
ARGP4
CNSTF4 1056964608
ARGF4
ADDRLP4 200
ADDRGP4 BG_PlayerTargetOffset
CALLF4
ASGNF4
ADDRLP4 140+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 200
INDIRF4
ADDF4
ASGNF4
line 1329
;1329:		}
ADDRGP4 $750
JUMPV
LABELV $749
line 1330
;1330:		else {
line 1331
;1331:			VectorCopy(cent->currentState.origin2, endPoint);
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 1332
;1332:		}
LABELV $750
line 1334
;1333:
;1334:		{
line 1338
;1335:			int r;
;1336:			sfxHandle_t sfx;
;1337:
;1338:			r = rand() & 3;
ADDRLP4 208
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 200
ADDRLP4 208
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 1339
;1339:			if (r < 2) {
ADDRLP4 200
INDIRI4
CNSTI4 2
GEI4 $752
line 1340
;1340:				sfx = cgs.media.sfx_lghit2;
ADDRLP4 204
ADDRGP4 cgs+751220+968
INDIRI4
ASGNI4
line 1341
;1341:			} else if (r == 2) {
ADDRGP4 $753
JUMPV
LABELV $752
ADDRLP4 200
INDIRI4
CNSTI4 2
NEI4 $756
line 1342
;1342:				sfx = cgs.media.sfx_lghit1;
ADDRLP4 204
ADDRGP4 cgs+751220+964
INDIRI4
ASGNI4
line 1343
;1343:			} else {
ADDRGP4 $757
JUMPV
LABELV $756
line 1344
;1344:				sfx = cgs.media.sfx_lghit3;
ADDRLP4 204
ADDRGP4 cgs+751220+972
INDIRI4
ASGNI4
line 1345
;1345:			}
LABELV $757
LABELV $753
line 1346
;1346:			trap_S_StartSound(endPoint, target, CHAN_AUTO, sfx);
ADDRLP4 140
ARGP4
ADDRLP4 164
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 204
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 1347
;1347:		}
line 1349
;1348:
;1349:		CG_CurvedLine(origin, endPoint, forward, cgs.media.lightningShader, 256.0, -2.0);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 168
ARGP4
ADDRGP4 cgs+751220+252
INDIRI4
ARGI4
CNSTF4 1132462080
ARGF4
CNSTF4 3221225472
ARGF4
ADDRGP4 CG_CurvedLine
CALLV
pop
line 1352
;1350:
;1351:		// impact flare
;1352:		{
line 1357
;1353:			vec3_t angles;
;1354:			vec3_t dir;
;1355:			vec3_t pos;
;1356:
;1357:			VectorSubtract(endPoint, origin, dir);
ADDRLP4 236
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 200
ADDRLP4 140
INDIRF4
ADDRLP4 236
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 200+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 236
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 200+8
ADDRLP4 140+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1358
;1358:			VectorNormalize(dir);
ADDRLP4 200
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1359
;1359:			VectorMA(endPoint, -16, dir, pos);
ADDRLP4 224
ADDRLP4 140
INDIRF4
ADDRLP4 200
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 224+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 200+4
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
ADDRLP4 224+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 200+8
INDIRF4
CNSTF4 3246391296
MULF4
ADDF4
ASGNF4
line 1361
;1360:
;1361:			memset(&beam, 0, sizeof(beam));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1362
;1362:			beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+751220+688
INDIRI4
ASGNI4
line 1363
;1363:			VectorCopy(pos, beam.origin);
ADDRLP4 0+68
ADDRLP4 224
INDIRB
ASGNB 12
line 1366
;1364:
;1365:			// make a random orientation
;1366:			angles[0] = rand() % 360;
ADDRLP4 240
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 212
ADDRLP4 240
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1367
;1367:			angles[1] = rand() % 360;
ADDRLP4 244
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 212+4
ADDRLP4 244
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1368
;1368:			angles[2] = rand() % 360;
ADDRLP4 248
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 212+8
ADDRLP4 248
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1369
;1369:			AnglesToAxis(angles, beam.axis);
ADDRLP4 212
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1370
;1370:			trap_R_AddRefEntityToScene(&beam);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1371
;1371:		}
line 1372
;1372:	}
ADDRGP4 $748
JUMPV
LABELV $747
line 1373
;1373:	else {
line 1376
;1374:		vec3_t start;
;1375:
;1376:		VectorMA(origin, +1.75, right, start);
ADDRLP4 208
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 208
INDIRP4
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 1071644672
MULF4
ADDF4
ASGNF4
ADDRLP4 196+4
ADDRLP4 208
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 1071644672
MULF4
ADDF4
ASGNF4
ADDRLP4 196+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 1071644672
MULF4
ADDF4
ASGNF4
line 1377
;1377:		AddDischargeFlash(
ADDRLP4 196
ARGP4
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 212
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRLP4 212
INDIRP4
CNSTI4 856
ADDP4
ARGP4
ADDRLP4 212
INDIRP4
INDIRI4
ARGI4
ADDRLP4 216
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRGP4 cgs+751220+260
INDIRI4
ARGI4
ADDRGP4 AddDischargeFlash
CALLV
pop
line 1382
;1378:			start, cent->lerpAngles, &cent->gunFlash1, cent->currentState.number,
;1379:			vec3_origin, vec3_origin, cgs.media.dischargeFlashShader
;1380:		);
;1381:
;1382:		VectorMA(origin, -1.75, right, start);
ADDRLP4 220
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 220
INDIRP4
INDIRF4
ADDRLP4 152
INDIRF4
CNSTF4 3219128320
MULF4
ADDF4
ASGNF4
ADDRLP4 196+4
ADDRLP4 220
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 152+4
INDIRF4
CNSTF4 3219128320
MULF4
ADDF4
ASGNF4
ADDRLP4 196+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 152+8
INDIRF4
CNSTF4 3219128320
MULF4
ADDF4
ASGNF4
line 1383
;1383:		AddDischargeFlash(
ADDRLP4 196
ARGP4
ADDRLP4 224
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 224
INDIRP4
CNSTI4 740
ADDP4
ARGP4
ADDRLP4 224
INDIRP4
CNSTI4 868
ADDP4
ARGP4
ADDRLP4 224
INDIRP4
INDIRI4
ARGI4
ADDRLP4 228
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRGP4 cgs+751220+260
INDIRI4
ARGI4
ADDRGP4 AddDischargeFlash
CALLV
pop
line 1387
;1384:			start, cent->lerpAngles, &cent->gunFlash2, cent->currentState.number,
;1385:			vec3_origin, vec3_origin, cgs.media.dischargeFlashShader
;1386:		);
;1387:	}
LABELV $748
line 1390
;1388:
;1389:	// add the impact flare if it hit something
;1390:}
LABELV $744
endproc CG_LightningBolt 252 28
export CG_Draw3DLine
proc CG_Draw3DLine 140 12
line 1563
;1391:
;1392:/*
;1393:===============
;1394:CG_LightningBolt
;1395:
;1396:Origin will be the exact tag point, which is slightly
;1397:different than the muzzle point used for determining hits.
;1398:The cent should be the non-predicted cent if it is from the player,
;1399:so the endpoint will reflect the simulated strike (lagging the predicted
;1400:angle)
;1401:===============
;1402:*/
;1403:// JUHOX: new version of CG_LightningBolt() above
;1404:#if 0
;1405:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1406:	trace_t		trace;
;1407:	refEntity_t		beam;
;1408:	vec3_t			forward;
;1409:	vec3_t			muzzlePoint, endPoint;
;1410:
;1411:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1412:		return;
;1413:	}
;1414:
;1415:	memset( &beam, 0, sizeof( beam ) );
;1416:
;1417:	// CPMA  "true" lightning
;1418:	if ((cent->currentState.number == cg.predictedPlayerState.clientNum) && (cg_trueLightning.value != 0)) {
;1419:		vec3_t angle;
;1420:		int i;
;1421:
;1422:		for (i = 0; i < 3; i++) {
;1423:			float a = cent->lerpAngles[i] - cg.refdefViewAngles[i];
;1424:			if (a > 180) {
;1425:				a -= 360;
;1426:			}
;1427:			if (a < -180) {
;1428:				a += 360;
;1429:			}
;1430:
;1431:			angle[i] = cg.refdefViewAngles[i] + a * (1.0 - cg_trueLightning.value);
;1432:			if (angle[i] < 0) {
;1433:				angle[i] += 360;
;1434:			}
;1435:			if (angle[i] > 360) {
;1436:				angle[i] -= 360;
;1437:			}
;1438:		}
;1439:
;1440:		AngleVectors(angle, forward, NULL, NULL );
;1441:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1442://		VectorCopy(cg.refdef.vieworg, muzzlePoint );
;1443:	} else {
;1444:		// !CPMA
;1445:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1446:		VectorCopy(cent->lerpOrigin, muzzlePoint );
;1447:	}
;1448:
;1449:	// FIXME: crouch
;1450:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1451:
;1452:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1453:
;1454:	// project forward by the lightning range
;1455:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1456:
;1457:	// see if it hit a wall
;1458:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
;1459:		cent->currentState.number, MASK_SHOT );
;1460:
;1461:	// this is the endpoint
;1462:	VectorCopy( trace.endpos, beam.oldorigin );
;1463:
;1464:	// use the provided origin, even though it may be slightly
;1465:	// different than the muzzle origin
;1466:	VectorCopy( origin, beam.origin );
;1467:
;1468:	beam.reType = RT_LIGHTNING;
;1469:	beam.customShader = cgs.media.lightningShader;
;1470:	trap_R_AddRefEntityToScene( &beam );
;1471:
;1472:	// add the impact flare if it hit something
;1473:	if ( trace.fraction < 1.0 ) {
;1474:		vec3_t	angles;
;1475:		vec3_t	dir;
;1476:
;1477:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1478:		VectorNormalize( dir );
;1479:
;1480:		memset( &beam, 0, sizeof( beam ) );
;1481:		beam.hModel = cgs.media.lightningExplosionModel;
;1482:
;1483:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1484:
;1485:		// make a random orientation
;1486:		angles[0] = rand() % 360;
;1487:		angles[1] = rand() % 360;
;1488:		angles[2] = rand() % 360;
;1489:		AnglesToAxis( angles, beam.axis );
;1490:		trap_R_AddRefEntityToScene( &beam );
;1491:	}
;1492:}
;1493:/*
;1494:
;1495:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
;1496:	trace_t		trace;
;1497:	refEntity_t		beam;
;1498:	vec3_t			forward;
;1499:	vec3_t			muzzlePoint, endPoint;
;1500:
;1501:	if ( cent->currentState.weapon != WP_LIGHTNING ) {
;1502:		return;
;1503:	}
;1504:
;1505:	memset( &beam, 0, sizeof( beam ) );
;1506:
;1507:	// find muzzle point for this frame
;1508:	VectorCopy( cent->lerpOrigin, muzzlePoint );
;1509:	AngleVectors( cent->lerpAngles, forward, NULL, NULL );
;1510:
;1511:	// FIXME: crouch
;1512:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
;1513:
;1514:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
;1515:
;1516:	// project forward by the lightning range
;1517:	VectorMA( muzzlePoint, LIGHTNING_RANGE, forward, endPoint );
;1518:
;1519:	// see if it hit a wall
;1520:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
;1521:		cent->currentState.number, MASK_SHOT );
;1522:
;1523:	// this is the endpoint
;1524:	VectorCopy( trace.endpos, beam.oldorigin );
;1525:
;1526:	// use the provided origin, even though it may be slightly
;1527:	// different than the muzzle origin
;1528:	VectorCopy( origin, beam.origin );
;1529:
;1530:	beam.reType = RT_LIGHTNING;
;1531:	beam.customShader = cgs.media.lightningShader;
;1532:	trap_R_AddRefEntityToScene( &beam );
;1533:
;1534:	// add the impact flare if it hit something
;1535:	if ( trace.fraction < 1.0 ) {
;1536:		vec3_t	angles;
;1537:		vec3_t	dir;
;1538:
;1539:		VectorSubtract( beam.oldorigin, beam.origin, dir );
;1540:		VectorNormalize( dir );
;1541:
;1542:		memset( &beam, 0, sizeof( beam ) );
;1543:		beam.hModel = cgs.media.lightningExplosionModel;
;1544:
;1545:		VectorMA( trace.endpos, -16, dir, beam.origin );
;1546:
;1547:		// make a random orientation
;1548:		angles[0] = rand() % 360;
;1549:		angles[1] = rand() % 360;
;1550:		angles[2] = rand() % 360;
;1551:		AnglesToAxis( angles, beam.axis );
;1552:		trap_R_AddRefEntityToScene( &beam );
;1553:	}
;1554:}
;1555:*/
;1556:#endif
;1557:
;1558:/*
;1559:===============
;1560:JUHOX: CG_Draw3DLine
;1561:===============
;1562:*/
;1563:void CG_Draw3DLine(const vec3_t start, const vec3_t end, qhandle_t shader) {
line 1567
;1564:	refEntity_t line;
;1565:
;1566:	//if (DistanceSquared(start, end) < 10*10) return;	
;1567:	memset(&line, 0, sizeof(line));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1568
;1568:	line.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1569
;1569:	line.customShader = shader;
ADDRLP4 0+112
ADDRFP4 8
INDIRI4
ASGNI4
line 1570
;1570:	VectorCopy(start, line.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1571
;1571:	VectorCopy(end, line.oldorigin);
ADDRLP4 0+84
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1572
;1572:	trap_R_AddRefEntityToScene(&line);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1573
;1573:}
LABELV $793
endproc CG_Draw3DLine 140 12
proc CG_SpawnRailTrail 4 12
line 1584
;1574:
;1575:
;1576:/*
;1577:===============
;1578:CG_SpawnRailTrail
;1579:
;1580:Origin will be the exact tag point, which is slightly
;1581:different than the muzzle point used for determining hits.
;1582:===============
;1583:*/
;1584:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1587
;1585:	clientInfo_t	*ci;
;1586:
;1587:	if ( cent->currentState.weapon != WP_RAILGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 7
EQI4 $798
line 1588
;1588:		return;
ADDRGP4 $797
JUMPV
LABELV $798
line 1590
;1589:	}
;1590:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $800
line 1591
;1591:		return;
ADDRGP4 $797
JUMPV
LABELV $800
line 1593
;1592:	}
;1593:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 1
ASGNI4
line 1594
;1594:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 1595
;1595:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1596
;1596:}
LABELV $797
endproc CG_SpawnRailTrail 4 12
proc CG_MachinegunSpinAngle 32 4
line 1606
;1597:
;1598:
;1599:/*
;1600:======================
;1601:CG_MachinegunSpinAngle
;1602:======================
;1603:*/
;1604:#define		SPIN_SPEED	0.9
;1605:#define		COAST_TIME	1000
;1606:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1611
;1607:	int		delta;
;1608:	float	angle;
;1609:	float	speed;
;1610:
;1611:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1612
;1612:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
EQI4 $805
line 1613
;1613:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1614
;1614:	} else {
ADDRGP4 $806
JUMPV
LABELV $805
line 1615
;1615:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $807
line 1616
;1616:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1617
;1617:		}
LABELV $807
line 1619
;1618:
;1619:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 8
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 981668463
MULF4
CNSTF4 1063675494
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 1620
;1620:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1621
;1621:	}
LABELV $806
line 1623
;1622:
;1623:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $812
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $813
JUMPV
LABELV $812
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $813
ADDRLP4 16
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $809
line 1624
;1624:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 1625
;1625:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 1626
;1626:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $816
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $817
JUMPV
LABELV $816
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $817
ADDRLP4 28
INDIRP4
CNSTI4 644
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1632
;1627:#ifdef MISSIONPACK
;1628:		if ( cent->currentState.weapon == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
;1629:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
;1630:		}
;1631:#endif
;1632:	}
LABELV $809
line 1634
;1633:
;1634:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $803
endproc CG_MachinegunSpinAngle 32 4
proc CG_NewMachinegunSpinAngle 44 16
line 1643
;1635:}
;1636:
;1637:
;1638:/*
;1639:======================
;1640:JUHOX: CG_NewMachinegunSpinAngle
;1641:======================
;1642:*/
;1643:static float CG_NewMachinegunSpinAngle(centity_t *cent) {
line 1648
;1644:	int		delta;
;1645:	float	angle;
;1646:	qboolean firing;
;1647:
;1648:	angle = cent->pe.mgAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRF4
ASGNF4
line 1649
;1649:	delta = cg.time - cent->pe.mgTime;
ADDRLP4 4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1650
;1650:	firing = cent->currentState.eFlags & EF_FIRING? qtrue : qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $821
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRGP4 $822
JUMPV
LABELV $821
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $822
ADDRLP4 8
ADDRLP4 12
INDIRI4
ASGNI4
line 1651
;1651:	switch (cent->pe.mgPhase) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $823
ADDRLP4 16
INDIRI4
CNSTI4 3
GTI4 $823
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $849
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $849
address $826
address $831
address $837
address $843
code
LABELV $826
line 1653
;1652:	case 0:	// not spinning
;1653:		if (firing) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $824
line 1654
;1654:			cent->pe.mgTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 1655
;1655:			cent->pe.mgPhase = 1;
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 1
ASGNI4
line 1656
;1656:			trap_S_StartSound(NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound("sound/weapons/machinegun/mgspin1.wav", qfalse));
ADDRGP4 $830
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 1657
;1657:		}
line 1658
;1658:		break;
ADDRGP4 $824
JUMPV
LABELV $831
line 1660
;1659:	case 1:	// wind up
;1660:		if (delta > MACHINEGUN_WIND_UP_TIME) {
ADDRLP4 4
INDIRI4
CNSTI4 650
LEI4 $832
line 1661
;1661:			delta = MACHINEGUN_WIND_UP_TIME;
ADDRLP4 4
CNSTI4 650
ASGNI4
line 1662
;1662:		}
LABELV $832
line 1663
;1663:		angle += 0.5 * (SPIN_SPEED / MACHINEGUN_WIND_UP_TIME) * (delta * delta);
ADDRLP4 24
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 24
INDIRI4
ADDRLP4 24
INDIRI4
MULI4
CVIF4 4
CNSTF4 976583676
MULF4
ADDF4
ASGNF4
line 1664
;1664:		angle = AngleMod(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRF4
ASGNF4
line 1665
;1665:		if (delta >= MACHINEGUN_WIND_UP_TIME) {
ADDRLP4 4
INDIRI4
CNSTI4 650
LTI4 $824
line 1666
;1666:			cent->pe.mgTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 1667
;1667:			cent->pe.mgAngle = angle;
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1668
;1668:			cent->pe.mgPhase = 2;
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 2
ASGNI4
line 1669
;1669:		}
line 1670
;1670:		break;
ADDRGP4 $824
JUMPV
LABELV $837
line 1672
;1671:	case 2:	// spinning
;1672:		angle += SPIN_SPEED * delta;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1673
;1673:		angle = AngleMod(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 32
INDIRF4
ASGNF4
line 1674
;1674:		if (firing) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $838
line 1675
;1675:			trap_S_AddLoopingSound(cent->currentState.number, cent->lerpOrigin, vec3_origin, trap_S_RegisterSound("sound/weapons/machinegun/mgspin2.wav", qfalse));
ADDRGP4 $840
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound_fixed
CALLV
pop
line 1676
;1676:		}
ADDRGP4 $824
JUMPV
LABELV $838
line 1677
;1677:		else {
line 1678
;1678:			cent->pe.mgTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 1679
;1679:			cent->pe.mgAngle = angle;
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1680
;1680:			cent->pe.mgPhase = 3;
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 3
ASGNI4
line 1681
;1681:			trap_S_StartSound(NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound("sound/weapons/machinegun/mgspin3.wav", qfalse));
ADDRGP4 $842
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 1682
;1682:		}
line 1683
;1683:		break;
ADDRGP4 $824
JUMPV
LABELV $843
line 1685
;1684:	case 3:	// wind down
;1685:		if (delta > MACHINEGUN_WIND_OFF_TIME) {
ADDRLP4 4
INDIRI4
CNSTI4 1000
LEI4 $844
line 1686
;1686:			delta = MACHINEGUN_WIND_OFF_TIME;
ADDRLP4 4
CNSTI4 1000
ASGNI4
line 1687
;1687:		}
LABELV $844
line 1688
;1688:		angle += SPIN_SPEED * delta - 0.5 * (SPIN_SPEED / MACHINEGUN_WIND_OFF_TIME) * (delta * delta);
ADDRLP4 36
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRI4
CVIF4 4
CNSTF4 1063675494
MULF4
ADDRLP4 36
INDIRI4
ADDRLP4 36
INDIRI4
MULI4
CVIF4 4
CNSTF4 971763194
MULF4
SUBF4
ADDF4
ASGNF4
line 1689
;1689:		angle = AngleMod(angle);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 40
INDIRF4
ASGNF4
line 1690
;1690:		if (delta >= MACHINEGUN_WIND_OFF_TIME) {
ADDRLP4 4
INDIRI4
CNSTI4 1000
LTI4 $824
line 1691
;1691:			cent->pe.mgTime = cg.time;	// not really needed
ADDRFP4 0
INDIRP4
CNSTI4 652
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 1692
;1692:			cent->pe.mgAngle = angle;
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 0
INDIRF4
ASGNF4
line 1693
;1693:			cent->pe.mgPhase = 0;
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 0
ASGNI4
line 1694
;1694:		}
line 1695
;1695:		break;
LABELV $823
LABELV $824
line 1698
;1696:	}
;1697:
;1698:	return angle;
ADDRLP4 0
INDIRF4
RETF4
LABELV $818
endproc CG_NewMachinegunSpinAngle 44 16
proc CG_AddWeaponWithPowerups 40 20
line 1711
;1699:}
;1700:
;1701:
;1702:/*
;1703:========================
;1704:CG_AddWeaponWithPowerups
;1705:========================
;1706:*/
;1707:// JUHOX: 'state', 'team', & 'ps' parameter for CG_AddWeaponWithPowerups()
;1708:#if 0
;1709:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
;1710:#else
;1711:static void CG_AddWeaponWithPowerups(refEntity_t* gun, entityState_t* state, playerState_t* ps, int team) {
line 1714
;1712:	int powerups;	// to support the old parameter
;1713:
;1714:	powerups = state->powerups;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1718
;1715:#endif
;1716:	// JUHOX: set corrected lighting origin for EFH
;1717:#if ESCAPE_MODE
;1718:	if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $851
line 1719
;1719:		gun->renderfx |= RF_LIGHTING_ORIGIN;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1720
;1720:		VectorCopy(state->origin, gun->lightingOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1721
;1721:	}
LABELV $851
line 1725
;1722:#endif
;1723:	// JUHOX: draw spawn hull
;1724:#if 1
;1725:	{
line 1729
;1726:		float intensity;
;1727:		qboolean skipOthers;
;1728:
;1729:		if (CG_GetSpawnEffectParameters(state, &intensity, &skipOthers, &powerups, gun)) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 CG_GetSpawnEffectParameters
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $854
line 1732
;1730:			qhandle_t oldShader;
;1731:
;1732:			oldShader = gun->customShader;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 1733
;1733:			gun->customShader = cgs.media.spawnHullShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+288
INDIRI4
ASGNI4
line 1734
;1734:			if (ps) gun->customShader = cgs.media.spawnHullWeaponShader;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $858
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+308
INDIRI4
ASGNI4
LABELV $858
line 1735
;1735:			gun->shaderRGBA[3] = 255 * intensity;
ADDRLP4 24
ADDRLP4 4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 28
CNSTF4 1325400064
ASGNF4
ADDRLP4 24
INDIRF4
ADDRLP4 28
INDIRF4
LTF4 $863
ADDRLP4 20
ADDRLP4 24
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $864
JUMPV
LABELV $863
ADDRLP4 20
ADDRLP4 24
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $864
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 1736
;1736:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1738
;1737:
;1738:			if (gun->shaderRGBA[3] > 128) {
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
INDIRU1
CVUI4 1
CNSTI4 128
LEI4 $865
line 1739
;1739:				gun->shaderRGBA[3] -= 128;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRU1
CVUI4 1
CNSTI4 128
SUBI4
CVIU4 4
CVUU1 4
ASGNU1
line 1740
;1740:				gun->shaderRGBA[3] >>= 3;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRU1
CVUI4 1
CNSTI4 3
RSHI4
CVIU4 4
CVUU1 4
ASGNU1
line 1742
;1741:
;1742:				gun->customShader = cgs.media.spawnHullGlow1Shader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+292
INDIRI4
ASGNI4
line 1743
;1743:				if (ps) gun->customShader = cgs.media.spawnHullGlow1WeaponShader;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $869
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+312
INDIRI4
ASGNI4
LABELV $869
line 1744
;1744:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1746
;1745:
;1746:				gun->customShader = cgs.media.spawnHullGlow2Shader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+296
INDIRI4
ASGNI4
line 1747
;1747:				if (ps) gun->customShader = cgs.media.spawnHullGlow2WeaponShader;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $875
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+316
INDIRI4
ASGNI4
LABELV $875
line 1748
;1748:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1750
;1749:
;1750:				gun->customShader = cgs.media.spawnHullGlow3Shader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+300
INDIRI4
ASGNI4
line 1751
;1751:				if (ps) gun->customShader = cgs.media.spawnHullGlow3WeaponShader;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $881
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+320
INDIRI4
ASGNI4
LABELV $881
line 1752
;1752:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1754
;1753:
;1754:				gun->customShader = cgs.media.spawnHullGlow4Shader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+304
INDIRI4
ASGNI4
line 1755
;1755:				if (ps) gun->customShader = cgs.media.spawnHullGlow4WeaponShader;
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $887
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+324
INDIRI4
ASGNI4
LABELV $887
line 1756
;1756:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1757
;1757:			}
LABELV $865
line 1759
;1758:
;1759:			if (skipOthers) return;
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $891
ADDRGP4 $850
JUMPV
LABELV $891
line 1761
;1760:
;1761:			gun->customShader = oldShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1762
;1762:		}
LABELV $854
line 1763
;1763:	}
line 1768
;1764:#endif
;1765:	// JUHOX: draw monster glow
;1766:#if MONSTER_MODE
;1767:	if (
;1768:		cg.viewMode == VIEW_scanner &&
ADDRGP4 cg+107628
INDIRI4
CNSTI4 1
NEI4 $893
ADDRGP4 cg+107636
INDIRI4
CNSTI4 0
EQI4 $893
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $893
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 64
LTI4 $893
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 69
GEI4 $893
line 1773
;1769:		cg.scannerActivationTime &&
;1770:		state->eType == ET_PLAYER &&
;1771:		state->clientNum >= CLIENTNUM_MONSTERS &&
;1772:		state->clientNum < MAX_CLIENTS + EXTRA_CLIENTNUMS
;1773:	) {
line 1777
;1774:		centity_t* cent;
;1775:		int color;
;1776:
;1777:		cent = &cg_entities[state->number];
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1778
;1778:		color = 255;
ADDRLP4 8
CNSTI4 255
ASGNI4
line 1779
;1779:		if (cent->deathTime) {
ADDRLP4 12
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 0
EQI4 $897
line 1782
;1780:			#define SCANNER_DEATH_FADE_TIME 5000
;1781:
;1782:			if (cg.time < cent->deathTime + SCANNER_DEATH_FADE_TIME) {
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
CNSTI4 5000
ADDI4
GEI4 $899
line 1783
;1783:				color = 255 - (255 * (cg.time - cent->deathTime)) / SCANNER_DEATH_FADE_TIME;
ADDRLP4 8
CNSTI4 255
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
SUBI4
CNSTI4 255
MULI4
CNSTI4 5000
DIVI4
SUBI4
ASGNI4
line 1784
;1784:				if (color < 0) color = 0;
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $903
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $903
line 1785
;1785:				if (color > 255) color = 255;
ADDRLP4 8
INDIRI4
CNSTI4 255
LEI4 $900
ADDRLP4 8
CNSTI4 255
ASGNI4
line 1786
;1786:			}
ADDRGP4 $900
JUMPV
LABELV $899
line 1787
;1787:			else {
line 1788
;1788:				color = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1789
;1789:			}
LABELV $900
line 1790
;1790:		}
LABELV $897
line 1791
;1791:		if (cg.time < cg.scannerActivationTime + SCANNER_DEATH_FADE_TIME) {
ADDRGP4 cg+107656
INDIRI4
ADDRGP4 cg+107636
INDIRI4
CNSTI4 5000
ADDI4
GEI4 $907
line 1792
;1792:			color = (color * (cg.time - cg.scannerActivationTime)) / SCANNER_DEATH_FADE_TIME;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRGP4 cg+107656
INDIRI4
ADDRGP4 cg+107636
INDIRI4
SUBI4
MULI4
CNSTI4 5000
DIVI4
ASGNI4
line 1793
;1793:		}
LABELV $907
line 1794
;1794:		if (color > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $913
line 1795
;1795:			gun->customShader = trap_R_RegisterShader("monsterGlow");
ADDRGP4 $915
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1796
;1796:			gun->shaderRGBA[0] = color;
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1797
;1797:			gun->shaderRGBA[1] = color;
ADDRFP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1798
;1798:			gun->shaderRGBA[2] = color;
ADDRFP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1799
;1799:			gun->shaderRGBA[3] = 255;
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 1800
;1800:			gun->shaderTime = state->number * 1.731;
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
CVIF4 4
CNSTF4 1071485288
MULF4
ASGNF4
line 1801
;1801:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1802
;1802:			gun->customShader = 0;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTI4 0
ASGNI4
line 1803
;1803:		}
LABELV $913
line 1804
;1804:	}
LABELV $893
line 1807
;1805:#endif
;1806:	// add powerup effects
;1807:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $916
line 1814
;1808:#if 0	// JUHOX: draw the marks even if the entity is invisible
;1809:		gun->customShader = cgs.media.invisShader;
;1810:		trap_R_AddRefEntityToScene( gun );
;1811:#else
;1812:		qboolean drawInvisShader;
;1813:
;1814:		drawInvisShader = qtrue;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1816
;1815:		if (
;1816:			cgs.gametype >= GT_TEAM &&
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $918
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
GEI4 $923
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRFP4 12
INDIRI4
NEI4 $918
LABELV $923
line 1823
;1817:			(
;1818:#if MONSTER_MODE
;1819:				cgs.gametype >= GT_STU ||
;1820:#endif
;1821:				cg.snap->ps.persistant[PERS_TEAM] == team
;1822:			)
;1823:		) {
line 1824
;1824:			if (team == TEAM_RED)
ADDRFP4 12
INDIRI4
CNSTI4 1
NEI4 $924
line 1825
;1825:				gun->customShader = cgs.media.redInvis;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+656
INDIRI4
ASGNI4
ADDRGP4 $925
JUMPV
LABELV $924
line 1827
;1826:			else
;1827:				gun->customShader = cgs.media.blueInvis;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+652
INDIRI4
ASGNI4
LABELV $925
line 1828
;1828:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1829
;1829:			drawInvisShader = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1830
;1830:		}
LABELV $918
line 1831
;1831:		if (powerups & (1 << PW_BATTLESUIT)) {
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $930
line 1832
;1832:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+628
INDIRI4
ASGNI4
line 1833
;1833:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1834
;1834:			drawInvisShader = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1835
;1835:		}
LABELV $930
line 1836
;1836:		if (powerups & (1 << PW_CHARGE)) {
ADDRLP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $934
line 1837
;1837:			gun->customShader = cgs.media.chargeWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+648
INDIRI4
ASGNI4
line 1838
;1838:			gun->shaderRGBA[3] = 64;
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 64
ASGNU1
line 1839
;1839:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1840
;1840:			drawInvisShader = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1841
;1841:		}
LABELV $934
line 1843
;1842:		// - quad currently not used -
;1843:		if (powerups & (1 << PW_SHIELD)) {
ADDRLP4 0
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $938
line 1844
;1844:			gun->customShader = cgs.media.shieldWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+672
INDIRI4
ASGNI4
line 1845
;1845:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1846
;1846:			drawInvisShader = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1847
;1847:		}
LABELV $938
line 1849
;1848:		// invisibility shader not needed if any marker drawn
;1849:		if (drawInvisShader || cg_glassCloaking.integer) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $945
ADDRGP4 cg_glassCloaking+12
INDIRI4
CNSTI4 0
EQI4 $917
LABELV $945
line 1850
;1850:			if (cg_glassCloaking.integer) {
ADDRGP4 cg_glassCloaking+12
INDIRI4
CNSTI4 0
EQI4 $946
line 1851
;1851:				gun->customShader = cgs.media.glassCloakingShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+280
INDIRI4
ASGNI4
line 1852
;1852:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1854
;1853:
;1854:				if (drawInvisShader) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $917
line 1875
;1855:					/*
;1856:					if (cg.clientNum == state->number) {
;1857:						gun->customShader = cgs.media.glassCloakingSpecShader;
;1858:						gun->shaderRGBA[3] = 255;
;1859:						trap_R_AddRefEntityToScene(gun);
;1860:					}
;1861:					else {
;1862:						float distance;
;1863:
;1864:						distance = Distance(cg.snap->ps.origin, state->pos.trBase);
;1865:						if (distance < GLASSCLOAKINGSPECSHADER_MAXDISTANCE) {
;1866:							gun->customShader = cgs.media.glassCloakingSpecShader;
;1867:							gun->shaderRGBA[3] =
;1868:								GLASSCLOAKINGSPECSHADER_MAXALPHA *
;1869:								(1.0 - distance / GLASSCLOAKINGSPECSHADER_MAXDISTANCE);
;1870:							trap_R_AddRefEntityToScene(gun);
;1871:						}
;1872:
;1873:					}
;1874:					*/
;1875:					if (cg.clientNum == state->number) {
ADDRGP4 cg+4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
NEI4 $917
line 1876
;1876:						gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+616
INDIRI4
ASGNI4
line 1877
;1877:						trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1878
;1878:					}
line 1879
;1879:				}
line 1880
;1880:			}
ADDRGP4 $917
JUMPV
LABELV $946
line 1881
;1881:			else {
line 1882
;1882:				gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+616
INDIRI4
ASGNI4
line 1883
;1883:				trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1884
;1884:			}
line 1885
;1885:		}
line 1887
;1886:#endif
;1887:	} else {
ADDRGP4 $917
JUMPV
LABELV $916
line 1888
;1888:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1890
;1889:
;1890:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $960
line 1891
;1891:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+628
INDIRI4
ASGNI4
line 1892
;1892:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1893
;1893:		}
LABELV $960
line 1894
;1894:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $964
line 1895
;1895:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+612
INDIRI4
ASGNI4
line 1896
;1896:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1897
;1897:		}
LABELV $964
line 1899
;1898:#if 1	// JUHOX: draw the charge shader for the weapon
;1899:		if (powerups & (1 << PW_CHARGE)) {
ADDRLP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $968
line 1900
;1900:			gun->customShader = cgs.media.chargeWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+648
INDIRI4
ASGNI4
line 1901
;1901:			gun->shaderRGBA[3] = 128;
ADDRFP4 0
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 128
ASGNU1
line 1902
;1902:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1903
;1903:		}
LABELV $968
line 1906
;1904:#endif
;1905:#if 1	// JUHOX: draw the shield shader for the weapon
;1906:		if (powerups & (1 << PW_SHIELD)) {
ADDRLP4 0
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $972
line 1907
;1907:			gun->customShader = cgs.media.shieldWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+672
INDIRI4
ASGNI4
line 1908
;1908:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1909
;1909:		}
LABELV $972
line 1912
;1910:#endif
;1911:#if 1	// JUHOX: draw the BFG reloading shader
;1912:		if (powerups & (1 << PW_BFG_RELOADING)) {
ADDRLP4 0
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $976
line 1913
;1913:			gun->customShader = cgs.media.bfgReloadingShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+664
INDIRI4
ASGNI4
line 1914
;1914:			trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1915
;1915:		}
LABELV $976
line 1917
;1916:#endif
;1917:	}
LABELV $917
line 1920
;1918:#if 1	// JUHOX: users of the gauntlet get the target marked
;1919:	if (
;1920:		cg.snap->ps.weapon == WP_GAUNTLET &&
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 1
NEI4 $980
ADDRGP4 cg+36
INDIRP4
CNSTI4 252
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
NEI4 $980
line 1922
;1921:		cg.snap->ps.stats[STAT_TARGET] == state->number
;1922:	) {
line 1923
;1923:		gun->customShader = cgs.media.targetMarker;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+660
INDIRI4
ASGNI4
line 1924
;1924:		trap_R_AddRefEntityToScene(gun);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1925
;1925:	}
LABELV $980
line 1927
;1926:#endif
;1927:}
LABELV $850
endproc CG_AddWeaponWithPowerups 40 20
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 496 20
line 1939
;1928:
;1929:
;1930:/*
;1931:=============
;1932:CG_AddPlayerWeapon
;1933:
;1934:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1935:The main player will have this called for BOTH cases, so effects like light and
;1936:sound should only be done on the world model case.
;1937:=============
;1938:*/
;1939:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team ) {
line 1949
;1940:	refEntity_t	gun;
;1941:	refEntity_t	barrel;
;1942:	refEntity_t	flash;
;1943:	vec3_t		angles;
;1944:	weapon_t	weaponNum;
;1945:	weaponInfo_t	*weapon;
;1946:	centity_t	*nonPredictedCent;
;1947://	int	col;
;1948:
;1949:	weaponNum = cent->currentState.weapon;
ADDRLP4 280
ADDRFP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1952
;1950:	// JUHOX: speed-up for monsters
;1951:#if MONSTER_MODE
;1952:	if (weaponNum == WP_NONE) return;
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $987
ADDRGP4 $986
JUMPV
LABELV $987
line 1955
;1953:#endif
;1954:
;1955:	CG_RegisterWeapon( weaponNum );
ADDRLP4 280
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1956
;1956:	weapon = &cg_weapons[weaponNum];
ADDRLP4 284
ADDRLP4 280
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1959
;1957:
;1958:	// add the weapon
;1959:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1960
;1960:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 140+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1961
;1961:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 140+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1962
;1962:	gun.renderfx = parent->renderfx;
ADDRLP4 140+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1984
;1963:
;1964:	// JUHOX: set custom shading for railgun and bfg refire rate
;1965:#if 0
;1966:	// set custom shading for railgun refire rate
;1967:	if ( ps ) {
;1968:		if ( cg.predictedPlayerState.weapon == WP_RAILGUN 
;1969:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
;1970:			float	f;
;1971:
;1972:			f = (float)cg.predictedPlayerState.weaponTime / 1500;
;1973:			gun.shaderRGBA[1] = 0;
;1974:			gun.shaderRGBA[0] = 
;1975:			gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;1976:		} else {
;1977:			gun.shaderRGBA[0] = 255;
;1978:			gun.shaderRGBA[1] = 255;
;1979:			gun.shaderRGBA[2] = 255;
;1980:			gun.shaderRGBA[3] = 255;
;1981:		}
;1982:	}
;1983:#else
;1984:	if (ps) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $992
line 1985
;1985:		switch (cg.predictedPlayerState.weapon) {
ADDRLP4 444
ADDRGP4 cg+107688+144
INDIRI4
ASGNI4
ADDRLP4 444
INDIRI4
CNSTI4 7
EQI4 $998
ADDRLP4 444
INDIRI4
CNSTI4 9
EQI4 $1016
ADDRGP4 $994
JUMPV
LABELV $998
line 1987
;1986:		case WP_RAILGUN:
;1987:			if (cg.predictedPlayerState.weaponstate != WEAPON_FIRING) goto NormalShader;
ADDRGP4 cg+107688+148
INDIRI4
CNSTI4 3
EQI4 $999
ADDRGP4 $1003
JUMPV
LABELV $999
line 1989
;1988:
;1989:			{
line 1992
;1990:				float f;
;1991:
;1992:				f = (float)cg.predictedPlayerState.weaponTime / 1500;
ADDRLP4 448
ADDRGP4 cg+107688+44
INDIRI4
CVIF4 4
CNSTF4 976143166
MULF4
ASGNF4
line 1993
;1993:				gun.shaderRGBA[1] = 0;
ADDRLP4 140+116+1
CNSTU1 0
ASGNU1
line 1994
;1994:				gun.shaderRGBA[0] = 
ADDRLP4 456
CNSTF4 1065353216
ADDRLP4 448
INDIRF4
SUBF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 460
CNSTF4 1325400064
ASGNF4
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
LTF4 $1012
ADDRLP4 452
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1013
JUMPV
LABELV $1012
ADDRLP4 452
ADDRLP4 456
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1013
ADDRLP4 464
ADDRLP4 452
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 140+116+2
ADDRLP4 464
INDIRU1
ASGNU1
ADDRLP4 140+116
ADDRLP4 464
INDIRU1
ASGNU1
line 1996
;1995:				gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;1996:				gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 1997
;1997:			}
line 1998
;1998:			break;
ADDRGP4 $993
JUMPV
LABELV $1016
line 2000
;1999:		case WP_BFG:
;2000:			if (cg.predictedPlayerState.weaponstate != WEAPON_FIRING) goto NormalShader;
ADDRGP4 cg+107688+148
INDIRI4
CNSTI4 3
EQI4 $1017
ADDRGP4 $1003
JUMPV
LABELV $1017
line 2002
;2001:
;2002:			{
line 2005
;2003:				float f;
;2004:
;2005:				f = (float)cg.predictedPlayerState.weaponTime / 4000;
ADDRLP4 448
ADDRGP4 cg+107688+44
INDIRI4
CVIF4 4
CNSTF4 964891247
MULF4
ASGNF4
line 2006
;2006:				gun.shaderRGBA[1] = 0;
ADDRLP4 140+116+1
CNSTU1 0
ASGNU1
line 2007
;2007:				gun.shaderRGBA[0] = 
ADDRLP4 456
CNSTF4 1065353216
ADDRLP4 448
INDIRF4
SUBF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 460
CNSTF4 1325400064
ASGNF4
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
LTF4 $1029
ADDRLP4 452
ADDRLP4 456
INDIRF4
ADDRLP4 460
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1030
JUMPV
LABELV $1029
ADDRLP4 452
ADDRLP4 456
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1030
ADDRLP4 464
ADDRLP4 452
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 140+116+2
ADDRLP4 464
INDIRU1
ASGNU1
ADDRLP4 140+116
ADDRLP4 464
INDIRU1
ASGNU1
line 2009
;2008:				gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;2009:				gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 2010
;2010:			}
line 2011
;2011:			break;
ADDRGP4 $993
JUMPV
LABELV $994
LABELV $1003
line 2014
;2012:		default:
;2013:		NormalShader:
;2014:			gun.shaderRGBA[0] = 255;
ADDRLP4 140+116
CNSTU1 255
ASGNU1
line 2015
;2015:			gun.shaderRGBA[1] = 255;
ADDRLP4 140+116+1
CNSTU1 255
ASGNU1
line 2016
;2016:			gun.shaderRGBA[2] = 255;
ADDRLP4 140+116+2
CNSTU1 255
ASGNU1
line 2017
;2017:			gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 2018
;2018:			break;
line 2020
;2019:		}
;2020:	}
ADDRGP4 $993
JUMPV
LABELV $992
line 2021
;2021:	else {
line 2022
;2022:		gun.shaderRGBA[0] = 255;
ADDRLP4 140+116
CNSTU1 255
ASGNU1
line 2023
;2023:		gun.shaderRGBA[1] = 255;
ADDRLP4 140+116+1
CNSTU1 255
ASGNU1
line 2024
;2024:		gun.shaderRGBA[2] = 255;
ADDRLP4 140+116+2
CNSTU1 255
ASGNU1
line 2025
;2025:		gun.shaderRGBA[3] = 255;
ADDRLP4 140+116+3
CNSTU1 255
ASGNU1
line 2026
;2026:	}
LABELV $993
line 2029
;2027:#endif
;2028:
;2029:	gun.hModel = weapon->weaponModel;
ADDRLP4 140+8
ADDRLP4 284
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 2030
;2030:	if (!gun.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $1048
line 2031
;2031:		return;
ADDRGP4 $986
JUMPV
LABELV $1048
line 2035
;2032:	}
;2033:	// JUHOX: set custom shader for monster launcher
;2034:#if MONSTER_MODE
;2035:	if (weaponNum == WP_MONSTER_LAUNCHER) {
ADDRLP4 280
INDIRI4
CNSTI4 11
NEI4 $1051
line 2036
;2036:		gun.customShader = cgs.media.monsterLauncherShader;
ADDRLP4 140+112
ADDRGP4 cgs+751220+724
INDIRI4
ASGNI4
line 2037
;2037:	}
LABELV $1051
line 2040
;2038:#endif
;2039:
;2040:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1056
line 2042
;2041:		// add weapon ready sound
;2042:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 0
ASGNI4
line 2043
;2043:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1058
ADDRLP4 284
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1058
line 2045
;2044:			// lightning gun and guantlet make a different sound when fire is held down
;2045:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 444
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
INDIRI4
ARGI4
ADDRLP4 444
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound_fixed
CALLV
pop
line 2046
;2046:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 1
ASGNI4
line 2047
;2047:		} else if ( weapon->readySound ) {
ADDRGP4 $1059
JUMPV
LABELV $1058
ADDRLP4 284
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1060
line 2048
;2048:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 444
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
INDIRI4
ARGI4
ADDRLP4 444
INDIRP4
CNSTI4 728
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound_fixed
CALLV
pop
line 2049
;2049:		}
LABELV $1060
LABELV $1059
line 2050
;2050:	}
LABELV $1056
line 2052
;2051:
;2052:	CG_PositionEntityOnTag( &gun, parent, parent->hModel, "tag_weapon");
ADDRLP4 140
ARGP4
ADDRLP4 444
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 444
INDIRP4
ARGP4
ADDRLP4 444
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1062
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 2058
;2053:
;2054:	// JUHOX: 'state', 'team', & 'ps' parameter for CG_AddWeaponWithPowerups()
;2055:#if 0
;2056:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
;2057:#else
;2058:	CG_AddWeaponWithPowerups(&gun, &cent->currentState, ps, team);
ADDRLP4 140
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 2062
;2059:#endif
;2060:
;2061:	// add the spinning barrel
;2062:	if ( weapon->barrelModel ) {
ADDRLP4 284
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1063
line 2063
;2063:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 300
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2064
;2064:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 300+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2065
;2065:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 300+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2066
;2066:		barrel.renderfx = parent->renderfx;
ADDRLP4 300+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2068
;2067:
;2068:		barrel.hModel = weapon->barrelModel;
ADDRLP4 300+8
ADDRLP4 284
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 2069
;2069:		angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 2070
;2070:		angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 2075
;2071:		// JUHOX: new barrel spinning with machinegun
;2072:#if 0
;2073:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
;2074:#else
;2075:		if (weaponNum == WP_MACHINEGUN) {
ADDRLP4 280
INDIRI4
CNSTI4 2
NEI4 $1070
line 2076
;2076:			angles[ROLL] = CG_NewMachinegunSpinAngle(cent);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 448
ADDRGP4 CG_NewMachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 448
INDIRF4
ASGNF4
line 2077
;2077:		}
ADDRGP4 $1071
JUMPV
LABELV $1070
line 2078
;2078:		else {
line 2079
;2079:			cent->pe.mgPhase = 0;
ADDRFP4 8
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 0
ASGNI4
line 2080
;2080:			angles[ROLL] = CG_MachinegunSpinAngle(cent);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 448
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 288+8
ADDRLP4 448
INDIRF4
ASGNF4
line 2081
;2081:		}
LABELV $1071
line 2083
;2082:#endif
;2083:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 288
ARGP4
ADDRLP4 300+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2085
;2084:
;2085:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 300
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1075
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2091
;2086:
;2087:	// JUHOX: 'state', 'team', & 'ps' parameter for CG_AddWeaponWithPowerups()
;2088:#if 0
;2089:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
;2090:#else
;2091:		CG_AddWeaponWithPowerups(&barrel, &cent->currentState, ps, team);
ADDRLP4 300
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 2093
;2092:#endif
;2093:	}
ADDRGP4 $1064
JUMPV
LABELV $1063
line 2096
;2094:	// JUHOX: reset machinegun while not using it
;2095:#if 1
;2096:	else {
line 2097
;2097:		cent->pe.mgPhase = 0;
ADDRFP4 8
INDIRP4
CNSTI4 656
ADDP4
CNSTI4 0
ASGNI4
line 2098
;2098:	}
LABELV $1064
line 2102
;2099:#endif
;2100:
;2101:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;2102:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 440
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2107
;2103:
;2104:	// if the index of the nonPredictedCent is not the same as the clientNum
;2105:	// then this is a fake player (like on teh single player podiums), so
;2106:	// go ahead and use the cent
;2107:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 440
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 880
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $1076
line 2108
;2108:		nonPredictedCent = cent;
ADDRLP4 440
ADDRFP4 8
INDIRP4
ASGNP4
line 2109
;2109:	}
LABELV $1076
line 2116
;2110:
;2111:	// add the flash
;2112:	// JUHOX: let grappling hook do an impulse flash
;2113:#if 0
;2114:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK )
;2115:#else
;2116:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET )
ADDRLP4 280
INDIRI4
CNSTI4 6
EQI4 $1080
ADDRLP4 280
INDIRI4
CNSTI4 1
NEI4 $1078
LABELV $1080
ADDRLP4 440
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1078
line 2119
;2117:#endif
;2118:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) 
;2119:	{
line 2121
;2120:		// continuous flash
;2121:	} else {
ADDRGP4 $1079
JUMPV
LABELV $1078
line 2123
;2122:		// impulse flash
;2123:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 452
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 452
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $1081
ADDRLP4 452
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1081
line 2124
;2124:			return;
ADDRGP4 $986
JUMPV
LABELV $1081
line 2126
;2125:		}
;2126:	}
LABELV $1079
line 2128
;2127:
;2128:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2129
;2129:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2130
;2130:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2131
;2131:	flash.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2133
;2132:
;2133:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 284
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 2134
;2134:	if (!flash.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1088
line 2135
;2135:		return;
ADDRGP4 $986
JUMPV
LABELV $1088
line 2137
;2136:	}
;2137:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 2138
;2138:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 2139
;2139:	angles[ROLL] = crandom() * 10;
ADDRLP4 452
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 288+8
ADDRLP4 452
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 452
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
ASGNF4
line 2140
;2140:	AnglesToAxis( angles, flash.axis );
ADDRLP4 288
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2143
;2141:
;2142:	// colorize the railgun blast
;2143:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 280
INDIRI4
CNSTI4 7
NEI4 $1094
line 2146
;2144:		clientInfo_t	*ci;
;2145:
;2146:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 456
ADDRFP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 2147
;2147:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 464
ADDRLP4 456
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 468
CNSTF4 1325400064
ASGNF4
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
LTF4 $1099
ADDRLP4 460
ADDRLP4 464
INDIRF4
ADDRLP4 468
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1100
JUMPV
LABELV $1099
ADDRLP4 460
ADDRLP4 464
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1100
ADDRLP4 0+116
ADDRLP4 460
INDIRU4
CVUU1 4
ASGNU1
line 2148
;2148:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 476
ADDRLP4 456
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 480
CNSTF4 1325400064
ASGNF4
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
LTF4 $1104
ADDRLP4 472
ADDRLP4 476
INDIRF4
ADDRLP4 480
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1105
JUMPV
LABELV $1104
ADDRLP4 472
ADDRLP4 476
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1105
ADDRLP4 0+116+1
ADDRLP4 472
INDIRU4
CVUU1 4
ASGNU1
line 2149
;2149:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 488
ADDRLP4 456
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 492
CNSTF4 1325400064
ASGNF4
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
LTF4 $1109
ADDRLP4 484
ADDRLP4 488
INDIRF4
ADDRLP4 492
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1110
JUMPV
LABELV $1109
ADDRLP4 484
ADDRLP4 488
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1110
ADDRLP4 0+116+2
ADDRLP4 484
INDIRU4
CVUU1 4
ASGNU1
line 2150
;2150:	}
LABELV $1094
line 2152
;2151:
;2152:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1111
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2155
;2153:	// JUHOX: move flash for new machinegun barrel
;2154:#if 1
;2155:	if (weaponNum == WP_MACHINEGUN) {
ADDRLP4 280
INDIRI4
CNSTI4 2
NEI4 $1112
line 2156
;2156:		VectorMA(flash.origin, 9, flash.axis[0], flash.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRLP4 0+28
INDIRF4
CNSTF4 1091567616
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRLP4 0+28+4
INDIRF4
CNSTF4 1091567616
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRLP4 0+28+8
INDIRF4
CNSTF4 1091567616
MULF4
ADDF4
ASGNF4
line 2157
;2157:	}
LABELV $1112
line 2159
;2158:#endif
;2159:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2161
;2160:
;2161:	if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1135
ADDRGP4 cg+107680
INDIRI4
CNSTI4 0
NEI4 $1135
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+107688+140
INDIRI4
EQI4 $1129
LABELV $1135
line 2162
;2162:		cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 2164
;2163:		// add lightning bolt
;2164:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 440
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 2167
;2165:
;2166:		// add rail trail
;2167:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 2169
;2168:#if SPECIAL_VIEW_MODES	// JUHOX: check for strong lights
;2169:		switch (weaponNum) {
ADDRLP4 456
ADDRLP4 280
INDIRI4
ASGNI4
ADDRLP4 456
INDIRI4
CNSTI4 1
LTI4 $1138
ADDRLP4 456
INDIRI4
CNSTI4 8
GTI4 $1138
ADDRLP4 456
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1146-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1146
address $1143
address $1141
address $1138
address $1138
address $1138
address $1143
address $1138
address $1141
code
LABELV $1141
line 2172
;2170:		case WP_MACHINEGUN:
;2171:		case WP_PLASMAGUN:
;2172:			CG_CheckStrongLight(flash.origin, -200, colorWhite);
ADDRLP4 0+68
ARGP4
CNSTF4 3276275712
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 2173
;2173:			break;
ADDRGP4 $1139
JUMPV
LABELV $1143
line 2176
;2174:		case WP_GAUNTLET:
;2175:		case WP_LIGHTNING:
;2176:			CG_CheckStrongLight(flash.origin, -300, colorWhite);
ADDRLP4 0+68
ARGP4
CNSTF4 3281387520
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 2177
;2177:			break;
ADDRGP4 $1139
JUMPV
LABELV $1138
line 2179
;2178:		default:
;2179:			CG_CheckStrongLight(flash.origin, 400, colorWhite);
ADDRLP4 0+68
ARGP4
CNSTF4 1137180672
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 2180
;2180:			break;
LABELV $1139
line 2185
;2181:		}
;2182:#endif
;2183:		// JUHOX FIXME: no dlights in EFH
;2184:#if ESCAPE_MODE
;2185:		if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $1148
line 2187
;2186:			// do nothing
;2187:		}
ADDRGP4 $1149
JUMPV
LABELV $1148
line 2190
;2188:		else
;2189:#endif
;2190:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 284
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1154
ADDRLP4 284
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1154
ADDRLP4 284
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1151
LABELV $1154
line 2191
;2191:			trap_R_AddLightToScene( flash.origin, 300 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 468
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+68
ARGP4
ADDRLP4 468
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
CVIF4 4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2193
;2192:				weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;2193:		}
LABELV $1151
LABELV $1149
line 2194
;2194:	}
LABELV $1129
line 2195
;2195:}
LABELV $986
endproc CG_AddPlayerWeapon 496 20
export CG_AddViewWeapon
proc CG_AddViewWeapon 180 16
line 2204
;2196:
;2197:/*
;2198:==============
;2199:CG_AddViewWeapon
;2200:
;2201:Add the weapon, and flash for the player's view
;2202:==============
;2203:*/
;2204:void CG_AddViewWeapon( playerState_t *ps ) {
line 2212
;2205:	refEntity_t	hand;
;2206:	centity_t	*cent;
;2207:	clientInfo_t	*ci;
;2208:	float		fovOffset;
;2209:	vec3_t		angles;
;2210:	weaponInfo_t	*weapon;
;2211:
;2212:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1157
line 2213
;2213:		return;
ADDRGP4 $1156
JUMPV
LABELV $1157
line 2216
;2214:	}
;2215:
;2216:	if ( ps->pm_type == PM_INTERMISSION ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1159
line 2217
;2217:		return;
ADDRGP4 $1156
JUMPV
LABELV $1159
line 2222
;2218:	}
;2219:
;2220:	// no gun if in third person view or a camera is active
;2221:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;2222:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107680
INDIRI4
CNSTI4 0
EQI4 $1161
line 2223
;2223:		return;
ADDRGP4 $1156
JUMPV
LABELV $1161
line 2227
;2224:	}
;2225:
;2226:	// allow the gun to be completely removed
;2227:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $1164
line 2230
;2228:		vec3_t		origin;
;2229:
;2230:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+107688+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1156
line 2232
;2231:			// special hack for lightning gun...
;2232:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 168
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 2233
;2233:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 168
ADDRLP4 168
INDIRF4
ADDRGP4 cg+109260+36+24
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 168+4
ADDRLP4 168+4
INDIRF4
ADDRGP4 cg+109260+36+24+4
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
ADDRLP4 168+8
ADDRLP4 168+8
INDIRF4
ADDRGP4 cg+109260+36+24+8
INDIRF4
CNSTF4 3238002688
MULF4
ADDF4
ASGNF4
line 2234
;2234:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 168
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 2235
;2235:		}
line 2236
;2236:		return;
ADDRGP4 $1156
JUMPV
LABELV $1164
line 2240
;2237:	}
;2238:
;2239:	// don't draw if testing a gun model
;2240:	if ( cg.testGun ) {
ADDRGP4 cg+163668
INDIRI4
CNSTI4 0
EQI4 $1188
line 2241
;2241:		return;
ADDRGP4 $1156
JUMPV
LABELV $1188
line 2245
;2242:	}
;2243:
;2244:	// drop gun lower at higher fov
;2245:	if ( cg_fov.integer > 90 ) {
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
LEI4 $1191
line 2246
;2246:		fovOffset = -0.2 * ( cg_fov.integer - 90 );
ADDRLP4 140
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
SUBI4
CVIF4 4
CNSTF4 3192704205
MULF4
ASGNF4
line 2247
;2247:	} else {
ADDRGP4 $1192
JUMPV
LABELV $1191
line 2248
;2248:		fovOffset = 0;
ADDRLP4 140
CNSTF4 0
ASGNF4
line 2249
;2249:	}
LABELV $1192
line 2251
;2250:
;2251:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 144
ADDRGP4 cg+108156
ASGNP4
line 2252
;2252:	CG_RegisterWeapon( ps->weapon );
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2253
;2253:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2255
;2254:
;2255:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2258
;2256:
;2257:	// set up gun position
;2258:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 148
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 2260
;2259:
;2260:	VectorMA( hand.origin, cg_gun_x.value, cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109260+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109260+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109260+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2261
;2261:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109260+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109260+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109260+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2262
;2262:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+109260+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+109260+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+109260+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 140
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 2264
;2263:
;2264:	AnglesToAxis( angles, hand.axis );
ADDRLP4 148
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2267
;2265:
;2266:	// map torso animations to weapon animations
;2267:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1267
line 2269
;2268:		// development tool
;2269:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 168
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 168
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 168
INDIRI4
ASGNI4
line 2270
;2270:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 2271
;2271:	} else {
ADDRGP4 $1268
JUMPV
LABELV $1267
line 2273
;2272:		// get clientinfo for animation map
;2273:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 164
ADDRLP4 144
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 2274
;2274:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 168
INDIRI4
ASGNI4
line 2275
;2275:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
CNSTI4 504
ADDP4
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 172
INDIRI4
ASGNI4
line 2276
;2276:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 144
INDIRP4
CNSTI4 520
ADDP4
INDIRF4
ASGNF4
line 2277
;2277:	}
LABELV $1268
line 2279
;2278:
;2279:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 160
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2280
;2280:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 2283
;2281:
;2282:	// add everything onto the hand
;2283:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM] );
ADDRLP4 0
ARGP4
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRGP4 cg+108156
ARGP4
ADDRLP4 168
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 2284
;2284:}
LABELV $1156
endproc CG_AddViewWeapon 180 16
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 40 20
line 2299
;2285:
;2286:/*
;2287:==============================================================================
;2288:
;2289:WEAPON SELECTION
;2290:
;2291:==============================================================================
;2292:*/
;2293:
;2294:/*
;2295:===================
;2296:CG_DrawWeaponSelect
;2297:===================
;2298:*/
;2299:void CG_DrawWeaponSelect( void ) {
line 2308
;2300:	int		i;
;2301:	int		bits;
;2302:	int		count;
;2303:	int		x, y, w;
;2304:	char	*name;
;2305:	float	*color;
;2306:
;2307:	// don't display if dead
;2308:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+107688+184
INDIRI4
CNSTI4 0
GTI4 $1282
line 2309
;2309:		return;
ADDRGP4 $1281
JUMPV
LABELV $1282
line 2312
;2310:	}
;2311:
;2312:	color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
ADDRGP4 cg+127988
INDIRI4
ARGI4
CNSTI4 1400
ARGI4
ADDRLP4 32
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 32
INDIRP4
ASGNP4
line 2313
;2313:	if ( !color ) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1287
line 2314
;2314:		return;
ADDRGP4 $1281
JUMPV
LABELV $1287
line 2316
;2315:	}
;2316:	trap_R_SetColor( color );
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2319
;2317:
;2318:	// showing weapon select clears pickup item display, but not the blend blob
;2319:	cg.itemPickupTime = 0;
ADDRGP4 cg+127980
CNSTI4 0
ASGNI4
line 2322
;2320:
;2321:	// count the number of weapons owned
;2322:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 12
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 2323
;2323:	count = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2324
;2324:	for ( i = 1 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1291
line 2325
;2325:		if ( bits & ( 1 << i ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1295
line 2326
;2326:			count++;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2327
;2327:		}
LABELV $1295
line 2328
;2328:	}
LABELV $1292
line 2324
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1291
line 2330
;2329:
;2330:	x = 320 - count * 20;
ADDRLP4 4
CNSTI4 320
ADDRLP4 16
INDIRI4
CNSTI4 20
MULI4
SUBI4
ASGNI4
line 2331
;2331:	y = 380;
ADDRLP4 8
CNSTI4 380
ASGNI4
line 2333
;2332:
;2333:	for ( i = 1 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1297
line 2334
;2334:		if ( !( bits & ( 1 << i ) ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1301
line 2335
;2335:			continue;
ADDRGP4 $1298
JUMPV
LABELV $1301
line 2338
;2336:		}
;2337:
;2338:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 2341
;2339:
;2340:		// draw weapon icon
;2341:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 0
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2344
;2342:
;2343:		// draw selection marker
;2344:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109148
INDIRI4
NEI4 $1304
line 2345
;2345:			CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader );
ADDRLP4 4
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1109393408
ARGF4
ADDRGP4 cgs+751220+380
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2346
;2346:		}
LABELV $1304
line 2349
;2347:
;2348:		// no ammo cross on top
;2349:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1309
line 2350
;2350:			CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+751220+440
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2351
;2351:		}
LABELV $1309
line 2353
;2352:
;2353:		x += 40;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 2354
;2354:	}
LABELV $1298
line 2333
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1297
line 2357
;2355:
;2356:	// draw the selected name
;2357:	if ( cg_weapons[ cg.weaponSelect ].item ) {
ADDRGP4 cg+109148
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1314
line 2358
;2358:		name = cg_weapons[ cg.weaponSelect ].item->pickup_name;
ADDRLP4 24
ADDRGP4 cg+109148
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons+4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ASGNP4
line 2359
;2359:		if ( name ) {
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1320
line 2360
;2360:			w = CG_DrawStrlen( name ) * BIGCHAR_WIDTH;
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 2361
;2361:			x = ( SCREEN_WIDTH - w ) / 2;
ADDRLP4 4
CNSTI4 640
ADDRLP4 28
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 2362
;2362:			CG_DrawBigStringColor(x, y - 22, name, color);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 22
SUBI4
ARGI4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 2363
;2363:		}
LABELV $1320
line 2364
;2364:	}
LABELV $1314
line 2366
;2365:
;2366:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2367
;2367:}
LABELV $1281
endproc CG_DrawWeaponSelect 40 20
proc CG_WeaponSelectable 0 0
line 2375
;2368:
;2369:
;2370:/*
;2371:===============
;2372:CG_WeaponSelectable
;2373:===============
;2374:*/
;2375:static qboolean CG_WeaponSelectable( int i ) {
line 2380
;2376:	// JUHOX: let spectator select all weapons for screenshot tools
;2377:#if SCREENSHOT_TOOLS
;2378:	if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) return qtrue;
;2379:#endif
;2380:	if ( !cg.snap->ps.ammo[i] ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1323
line 2381
;2381:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1322
JUMPV
LABELV $1323
line 2383
;2382:	}
;2383:	if ( ! (cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1326
line 2384
;2384:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1322
JUMPV
LABELV $1326
line 2387
;2385:	}
;2386:
;2387:	return qtrue;
CNSTI4 1
RETI4
LABELV $1322
endproc CG_WeaponSelectable 0 0
export CG_MayAutoSelect
proc CG_MayAutoSelect 24 4
line 2397
;2388:}
;2389:
;2390:static qboolean tmpSkipWeapon[16];	// JUHOX
;2391:
;2392:/*
;2393:===================
;2394:JUHOX: CG_MayAutoSelect
;2395:===================
;2396:*/
;2397:qboolean CG_MayAutoSelect(int weapon) {
line 2401
;2398:	int limit;
;2399:	int maxAmmo;
;2400:
;2401:	if (weapon <= WP_NONE || weapon >= WP_NUM_WEAPONS) return qfalse;
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1332
ADDRLP4 8
INDIRI4
CNSTI4 12
LTI4 $1330
LABELV $1332
CNSTI4 0
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1330
line 2402
;2402:	if (!(cg.snap->ps.stats[STAT_WEAPONS] & (1<<weapon))) return qfalse;
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1333
CNSTI4 0
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1333
line 2403
;2403:	if (tmpSkipWeapon[weapon]) return qfalse;
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tmpSkipWeapon
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1336
CNSTI4 0
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1336
line 2404
;2404:	if (cg.weaponSelect == weapon) return qtrue;
ADDRGP4 cg+109148
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $1338
CNSTI4 1
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1338
line 2405
;2405:	if (cg.snap->ps.ammo[weapon] == 0) return qfalse;
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1341
CNSTI4 0
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1341
line 2407
;2406:
;2407:	if (cg.snap->ps.ammo[weapon] < 0) return qtrue;
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1344
CNSTI4 1
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1344
line 2408
;2408:	limit = cg_autoswitchAmmoLimit.integer;
ADDRLP4 0
ADDRGP4 cg_autoswitchAmmoLimit+12
INDIRI4
ASGNI4
line 2409
;2409:	if (limit < 1 || limit > 100) limit = 50;
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1350
ADDRLP4 0
INDIRI4
CNSTI4 100
LEI4 $1348
LABELV $1350
ADDRLP4 0
CNSTI4 50
ASGNI4
LABELV $1348
line 2410
;2410:	maxAmmo = weaponAmmoCharacteristics[weapon].maxAmmo;
ADDRLP4 4
ADDRFP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 weaponAmmoCharacteristics
ADDP4
INDIRI4
ASGNI4
line 2412
;2411:#if MONSTER_MODE
;2412:	if (weapon == WP_MONSTER_LAUNCHER) {
ADDRFP4 0
INDIRI4
CNSTI4 11
NEI4 $1351
line 2413
;2413:		maxAmmo = atoi(CG_ConfigString(CS_NUMMONSTERS)+4);
CNSTI4 717
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 2414
;2414:	}
LABELV $1351
line 2416
;2415:#endif
;2416:	if (100 * cg.snap->ps.ammo[weapon] < limit * maxAmmo) return qfalse;
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 100
MULI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
GEI4 $1353
CNSTI4 0
RETI4
ADDRGP4 $1329
JUMPV
LABELV $1353
line 2418
;2417:
;2418:	return qtrue;
CNSTI4 1
RETI4
LABELV $1329
endproc CG_MayAutoSelect 24 4
export CG_FindBestWeapon
proc CG_FindBestWeapon 24 4
line 2426
;2419:}
;2420:
;2421:/*
;2422:===============
;2423:JUHOX: CG_FindBestWeapon
;2424:===============
;2425:*/
;2426:int CG_FindBestWeapon(int weaponOrder) {
line 2429
;2427:	int i, n;
;2428:
;2429:	if (weaponOrder >= 0 && weaponOrder < NUM_WEAPONORDERS) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $1357
ADDRLP4 8
INDIRI4
CNSTI4 6
GEI4 $1357
line 2430
;2430:		cg.currentWeaponOrder = weaponOrder;
ADDRGP4 cg+109160
ADDRFP4 0
INDIRI4
ASGNI4
line 2431
;2431:	}
LABELV $1357
line 2432
;2432:	n = strlen(cg_weaponOrder[cg.currentWeaponOrder].string);
ADDRGP4 cg+109160
INDIRI4
CNSTI4 272
MULI4
ADDRGP4 cg_weaponOrder+16
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 2433
;2433:	for (i = 0; i < n; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1365
JUMPV
LABELV $1362
line 2436
;2434:		int weapon;
;2435:
;2436:		weapon = cg_weaponOrder[cg.currentWeaponOrder].string[i] - 'A';
ADDRLP4 16
ADDRLP4 0
INDIRI4
ADDRGP4 cg+109160
INDIRI4
CNSTI4 272
MULI4
ADDRGP4 cg_weaponOrder+16
ADDP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 65
SUBI4
ASGNI4
line 2437
;2437:		if (CG_MayAutoSelect(weapon)) return weapon;
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_MayAutoSelect
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1368
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $1356
JUMPV
LABELV $1368
line 2438
;2438:	}
LABELV $1363
line 2433
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1365
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $1362
line 2439
;2439:	return WP_NONE;
CNSTI4 0
RETI4
LABELV $1356
endproc CG_FindBestWeapon 24 4
export CG_AutoSwitchToBestWeapon
proc CG_AutoSwitchToBestWeapon 4 4
line 2447
;2440:}
;2441:
;2442:/*
;2443:===============
;2444:JUHOX: CG_AutoSwitchToBestWeapon
;2445:===============
;2446:*/
;2447:void CG_AutoSwitchToBestWeapon(void) {
line 2448
;2448:	if (!cg.snap) return;
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1371
ADDRGP4 $1370
JUMPV
LABELV $1371
line 2449
;2449:	if (cg.snap->ps.pm_flags & PMF_FOLLOW) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1374
ADDRGP4 $1370
JUMPV
LABELV $1374
line 2451
;2450:
;2451:	if (!cg_autoswitch.integer) return;
ADDRGP4 cg_autoswitch+12
INDIRI4
CNSTI4 0
NEI4 $1377
ADDRGP4 $1370
JUMPV
LABELV $1377
line 2452
;2452:	if (!cg.weaponOrderActive) return;
ADDRGP4 cg+109156
INDIRI4
CNSTI4 0
NEI4 $1380
ADDRGP4 $1370
JUMPV
LABELV $1380
line 2453
;2453:	if (cg.weaponManuallySet) return;
ADDRGP4 cg+109152
INDIRI4
CNSTI4 0
EQI4 $1383
ADDRGP4 $1370
JUMPV
LABELV $1383
line 2454
;2454:	if (cg.snap->ps.eFlags & EF_FIRING) return;	// don't switch as long as the attack button is pressed
ADDRGP4 cg+36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1386
ADDRGP4 $1370
JUMPV
LABELV $1386
line 2455
;2455:	cg.weaponSelect = CG_FindBestWeapon(-1);
CNSTI4 -1
ARGI4
ADDRLP4 0
ADDRGP4 CG_FindBestWeapon
CALLI4
ASGNI4
ADDRGP4 cg+109148
ADDRLP4 0
INDIRI4
ASGNI4
line 2456
;2456:}
LABELV $1370
endproc CG_AutoSwitchToBestWeapon 4 4
proc CG_ManuallySwitchToBestWeapon 8 12
line 2463
;2457:
;2458:/*
;2459:===============
;2460:JUHOX: CG_ManuallySwitchToBestWeapon
;2461:===============
;2462:*/
;2463:static void CG_ManuallySwitchToBestWeapon(int weaponOrder) {
line 2466
;2464:	int currentWeapon;
;2465:
;2466:	cg.weaponManuallySet = qfalse;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
line 2467
;2467:	memset(tmpSkipWeapon, 0, sizeof(tmpSkipWeapon));
ADDRGP4 tmpSkipWeapon
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2468
;2468:	currentWeapon = cg.weaponSelect;
ADDRLP4 0
ADDRGP4 cg+109148
INDIRI4
ASGNI4
line 2469
;2469:	cg.weaponSelect = WP_NONE;
ADDRGP4 cg+109148
CNSTI4 0
ASGNI4
line 2470
;2470:	cg.weaponSelect = CG_FindBestWeapon(weaponOrder);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_FindBestWeapon
CALLI4
ASGNI4
ADDRGP4 cg+109148
ADDRLP4 4
INDIRI4
ASGNI4
line 2471
;2471:	if (cg.weaponSelect == WP_NONE) cg.weaponSelect = currentWeapon;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 0
NEI4 $1395
ADDRGP4 cg+109148
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $1395
line 2472
;2472:}
LABELV $1390
endproc CG_ManuallySwitchToBestWeapon 8 12
export CG_BestWeapon_f
proc CG_BestWeapon_f 16 4
line 2479
;2473:
;2474:/*
;2475:===============
;2476:JUHOX: CG_BestWeapon_f
;2477:===============
;2478:*/
;2479:void CG_BestWeapon_f(void) {
line 2482
;2480:	int weaponOrder;
;2481:
;2482:	if (!cg.snap) return;
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1400
ADDRGP4 $1399
JUMPV
LABELV $1400
line 2483
;2483:	if (cg.snap->ps.pm_type == PM_SPECTATOR) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1403
ADDRGP4 $1399
JUMPV
LABELV $1403
line 2484
;2484:	if (cg.snap->ps.pm_flags & PMF_FOLLOW) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1406
ADDRGP4 $1399
JUMPV
LABELV $1406
line 2486
;2485:
;2486:	weaponOrder = -1;
ADDRLP4 0
CNSTI4 -1
ASGNI4
line 2487
;2487:	if (trap_Argc() >= 2) {
ADDRLP4 4
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LTI4 $1409
line 2488
;2488:		weaponOrder = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 2489
;2489:		cg.weaponOrderActive = qtrue;
ADDRGP4 cg+109156
CNSTI4 1
ASGNI4
line 2490
;2490:	}
ADDRGP4 $1410
JUMPV
LABELV $1409
line 2491
;2491:	else if (!cg.weaponOrderActive) {
ADDRGP4 cg+109156
INDIRI4
CNSTI4 0
NEI4 $1412
line 2492
;2492:		return;
ADDRGP4 $1399
JUMPV
LABELV $1412
LABELV $1410
line 2494
;2493:	}
;2494:	CG_ManuallySwitchToBestWeapon(weaponOrder);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_ManuallySwitchToBestWeapon
CALLV
pop
line 2495
;2495:}
LABELV $1399
endproc CG_BestWeapon_f 16 4
export CG_SkipWeapon_f
proc CG_SkipWeapon_f 0 12
line 2502
;2496:
;2497:/*
;2498:===============
;2499:JUHOX: CG_SkipWeapon_f
;2500:===============
;2501:*/
;2502:void CG_SkipWeapon_f(void) {
line 2503
;2503:	if (!cg.snap) return;
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1416
ADDRGP4 $1415
JUMPV
LABELV $1416
line 2504
;2504:	if (cg.snap->ps.pm_type == PM_SPECTATOR) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1419
ADDRGP4 $1415
JUMPV
LABELV $1419
line 2505
;2505:	if (cg.snap->ps.pm_flags & PMF_FOLLOW) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1422
ADDRGP4 $1415
JUMPV
LABELV $1422
line 2506
;2506:	if (!cg.weaponOrderActive) return;
ADDRGP4 cg+109156
INDIRI4
CNSTI4 0
NEI4 $1425
ADDRGP4 $1415
JUMPV
LABELV $1425
line 2508
;2507:
;2508:	if (tmpSkipWeapon[cg.weaponSelect]) {
ADDRGP4 cg+109148
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tmpSkipWeapon
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1428
line 2509
;2509:		cg.weaponOrderActive = qfalse;
ADDRGP4 cg+109156
CNSTI4 0
ASGNI4
line 2510
;2510:		memset(tmpSkipWeapon, 0, sizeof(tmpSkipWeapon));
ADDRGP4 tmpSkipWeapon
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2511
;2511:		cg.currentWeaponOrder = 0;
ADDRGP4 cg+109160
CNSTI4 0
ASGNI4
line 2512
;2512:		return;
ADDRGP4 $1415
JUMPV
LABELV $1428
line 2515
;2513:	}
;2514:
;2515:	tmpSkipWeapon[cg.weaponSelect] = qtrue;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 tmpSkipWeapon
ADDP4
CNSTI4 1
ASGNI4
line 2516
;2516:	cg.weaponManuallySet = qfalse;
ADDRGP4 cg+109152
CNSTI4 0
ASGNI4
line 2517
;2517:	CG_AutoSwitchToBestWeapon();
ADDRGP4 CG_AutoSwitchToBestWeapon
CALLV
pop
line 2518
;2518:}
LABELV $1415
endproc CG_SkipWeapon_f 0 12
export CG_NextWeaponOrder_f
proc CG_NextWeaponOrder_f 4 4
line 2525
;2519:
;2520:/*
;2521:===============
;2522:JUHOX: CG_NextWeaponOrder_f
;2523:===============
;2524:*/
;2525:void CG_NextWeaponOrder_f(void) {
line 2526
;2526:	if (!cg.snap) return;
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1436
ADDRGP4 $1435
JUMPV
LABELV $1436
line 2530
;2527:
;2528:	// JUHOX: select effect in lens flare editor
;2529:#if MAPLENSFLARES
;2530:	if (cgs.editMode == EM_mlf) {
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $1439
line 2531
;2531:		cg.lfEditor.selectedEffect++;
ADDRLP4 0
ADDRGP4 cg+109660+40
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2532
;2532:		if (cg.lfEditor.selectedEffect < 0) cg.lfEditor.selectedEffect = 0;
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 0
GEI4 $1444
ADDRGP4 cg+109660+40
CNSTI4 0
ASGNI4
LABELV $1444
line 2533
;2533:		if (cg.lfEditor.selectedEffect >= cgs.numLensFlareEffects) {
ADDRGP4 cg+109660+40
INDIRI4
ADDRGP4 cgs+162608
INDIRI4
LTI4 $1435
line 2534
;2534:			cg.lfEditor.selectedEffect = cgs.numLensFlareEffects - 1;
ADDRGP4 cg+109660+40
ADDRGP4 cgs+162608
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2535
;2535:		}
line 2536
;2536:		return;
ADDRGP4 $1435
JUMPV
LABELV $1439
line 2542
;2537:	}
;2538:#endif
;2539:
;2540:	// JUHOX: select segment in EFH debug mode
;2541:#if ESCAPE_MODE
;2542:	if (cgs.gametype == GT_EFH && cgs.debugEFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $1458
ADDRGP4 cgs+31864
INDIRI4
CNSTI4 0
EQI4 $1458
line 2543
;2543:		trap_SendClientCommand("efhdebugseg 1");
ADDRGP4 $1462
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2544
;2544:		return;
ADDRGP4 $1435
JUMPV
LABELV $1458
line 2548
;2545:	}
;2546:#endif
;2547:
;2548:	if (cg.snap->ps.pm_type == PM_SPECTATOR) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1463
ADDRGP4 $1435
JUMPV
LABELV $1463
line 2549
;2549:	if (cg.snap->ps.pm_flags & PMF_FOLLOW) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1466
ADDRGP4 $1435
JUMPV
LABELV $1466
line 2551
;2550:
;2551:	if (!cg.weaponOrderActive) {
ADDRGP4 cg+109156
INDIRI4
CNSTI4 0
NEI4 $1469
line 2552
;2552:		cg.weaponOrderActive = qtrue;
ADDRGP4 cg+109156
CNSTI4 1
ASGNI4
line 2553
;2553:		cg.currentWeaponOrder = -1;
ADDRGP4 cg+109160
CNSTI4 -1
ASGNI4
line 2554
;2554:	}
LABELV $1469
line 2556
;2555:
;2556:	cg.currentWeaponOrder++;
ADDRLP4 0
ADDRGP4 cg+109160
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2557
;2557:	if (cg.currentWeaponOrder >= NUM_WEAPONORDERS) cg.currentWeaponOrder = 0;
ADDRGP4 cg+109160
INDIRI4
CNSTI4 6
LTI4 $1475
ADDRGP4 cg+109160
CNSTI4 0
ASGNI4
LABELV $1475
line 2558
;2558:	CG_ManuallySwitchToBestWeapon(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_ManuallySwitchToBestWeapon
CALLV
pop
line 2559
;2559:}
LABELV $1435
endproc CG_NextWeaponOrder_f 4 4
export CG_PrevWeaponOrder_f
proc CG_PrevWeaponOrder_f 4 4
line 2566
;2560:
;2561:/*
;2562:===============
;2563:JUHOX: CG_PrevWeaponOrder_f
;2564:===============
;2565:*/
;2566:void CG_PrevWeaponOrder_f(void) {
line 2567
;2567:	if (!cg.snap) return;
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1480
ADDRGP4 $1479
JUMPV
LABELV $1480
line 2571
;2568:
;2569:	// JUHOX: select effect in lens flare editor
;2570:#if MAPLENSFLARES
;2571:	if (cgs.editMode == EM_mlf) {
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $1483
line 2572
;2572:		cg.lfEditor.selectedEffect--;
ADDRLP4 0
ADDRGP4 cg+109660+40
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2573
;2573:		if (cg.lfEditor.selectedEffect < 0) cg.lfEditor.selectedEffect = 0;
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 0
GEI4 $1488
ADDRGP4 cg+109660+40
CNSTI4 0
ASGNI4
LABELV $1488
line 2574
;2574:		if (cg.lfEditor.selectedEffect >= cgs.numLensFlareEffects) {
ADDRGP4 cg+109660+40
INDIRI4
ADDRGP4 cgs+162608
INDIRI4
LTI4 $1479
line 2575
;2575:			cg.lfEditor.selectedEffect = cgs.numLensFlareEffects - 1;
ADDRGP4 cg+109660+40
ADDRGP4 cgs+162608
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2576
;2576:		}
line 2577
;2577:		return;
ADDRGP4 $1479
JUMPV
LABELV $1483
line 2583
;2578:	}
;2579:#endif
;2580:
;2581:	// JUHOX: select segment in EFH debug mode
;2582:#if ESCAPE_MODE
;2583:	if (cgs.gametype == GT_EFH && cgs.debugEFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $1502
ADDRGP4 cgs+31864
INDIRI4
CNSTI4 0
EQI4 $1502
line 2584
;2584:		trap_SendClientCommand("efhdebugseg -1");
ADDRGP4 $1506
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2585
;2585:		return;
ADDRGP4 $1479
JUMPV
LABELV $1502
line 2589
;2586:	}
;2587:#endif
;2588:
;2589:	if (cg.snap->ps.pm_type == PM_SPECTATOR) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1507
ADDRGP4 $1479
JUMPV
LABELV $1507
line 2590
;2590:	if (cg.snap->ps.pm_flags & PMF_FOLLOW) return;
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1510
ADDRGP4 $1479
JUMPV
LABELV $1510
line 2592
;2591:
;2592:	if (!cg.weaponOrderActive) {
ADDRGP4 cg+109156
INDIRI4
CNSTI4 0
NEI4 $1513
line 2593
;2593:		cg.weaponOrderActive = qtrue;
ADDRGP4 cg+109156
CNSTI4 1
ASGNI4
line 2594
;2594:		cg.currentWeaponOrder = 1;
ADDRGP4 cg+109160
CNSTI4 1
ASGNI4
line 2595
;2595:	}
LABELV $1513
line 2597
;2596:
;2597:	cg.currentWeaponOrder--;
ADDRLP4 0
ADDRGP4 cg+109160
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2598
;2598:	if (cg.currentWeaponOrder < 0) cg.currentWeaponOrder = NUM_WEAPONORDERS-1;
ADDRGP4 cg+109160
INDIRI4
CNSTI4 0
GEI4 $1519
ADDRGP4 cg+109160
CNSTI4 5
ASGNI4
LABELV $1519
line 2599
;2599:	CG_ManuallySwitchToBestWeapon(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_ManuallySwitchToBestWeapon
CALLV
pop
line 2600
;2600:}
LABELV $1479
endproc CG_PrevWeaponOrder_f 4 4
export CG_NextWeapon_f
proc CG_NextWeapon_f 16 12
line 2607
;2601:
;2602:/*
;2603:===============
;2604:CG_NextWeapon_f
;2605:===============
;2606:*/
;2607:void CG_NextWeapon_f( void ) {
line 2611
;2608:	int		i;
;2609:	int		original;
;2610:
;2611:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1524
line 2612
;2612:		return;
ADDRGP4 $1523
JUMPV
LABELV $1524
line 2614
;2613:	}
;2614:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1527
line 2615
;2615:		return;
ADDRGP4 $1523
JUMPV
LABELV $1527
line 2621
;2616:	}
;2617:
;2618:
;2619:	// JUHOX: select effect in lens flare editor
;2620:#if MAPLENSFLARES
;2621:	if (cgs.editMode == EM_mlf) {
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $1530
line 2622
;2622:		cg.lfEditor.selectedEffect++;
ADDRLP4 8
ADDRGP4 cg+109660+40
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2623
;2623:		if (cg.lfEditor.selectedEffect < 0) cg.lfEditor.selectedEffect = 0;
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 0
GEI4 $1535
ADDRGP4 cg+109660+40
CNSTI4 0
ASGNI4
LABELV $1535
line 2624
;2624:		if (cg.lfEditor.selectedEffect >= cgs.numLensFlareEffects) {
ADDRGP4 cg+109660+40
INDIRI4
ADDRGP4 cgs+162608
INDIRI4
LTI4 $1523
line 2625
;2625:			cg.lfEditor.selectedEffect = cgs.numLensFlareEffects - 1;
ADDRGP4 cg+109660+40
ADDRGP4 cgs+162608
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2626
;2626:		}
line 2627
;2627:		return;
ADDRGP4 $1523
JUMPV
LABELV $1530
line 2633
;2628:	}
;2629:#endif
;2630:
;2631:	// JUHOX: select segment in EFH debug mode
;2632:#if ESCAPE_MODE
;2633:	if (cgs.gametype == GT_EFH && cgs.debugEFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $1549
ADDRGP4 cgs+31864
INDIRI4
CNSTI4 0
EQI4 $1549
line 2634
;2634:		trap_SendClientCommand("efhdebugseg 1");
ADDRGP4 $1462
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2635
;2635:		return;
ADDRGP4 $1523
JUMPV
LABELV $1549
line 2639
;2636:	}
;2637:#endif
;2638:
;2639:	cg.weaponManuallySet = qtrue;	// JUHOX
ADDRGP4 cg+109152
CNSTI4 1
ASGNI4
line 2640
;2640:	memset(tmpSkipWeapon, 0, sizeof(tmpSkipWeapon));	// JUHOX: not really needed i think
ADDRGP4 tmpSkipWeapon
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2644
;2641:
;2642:	// JUHOX: this is a workaround to the late server side weapon selection
;2643:#if 1
;2644:	if (cg.weaponSelect == WP_NONE) cg.weaponSelect = cg.snap->ps.weapon;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 0
NEI4 $1554
ADDRGP4 cg+109148
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
LABELV $1554
line 2647
;2645:#endif
;2646:
;2647:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+127988
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 2648
;2648:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109148
INDIRI4
ASGNI4
line 2650
;2649:
;2650:	for ( i = 0 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1562
line 2651
;2651:		cg.weaponSelect++;
ADDRLP4 8
ADDRGP4 cg+109148
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2652
;2652:		if ( cg.weaponSelect == 16 ) {
ADDRGP4 cg+109148
INDIRI4
CNSTI4 16
NEI4 $1567
line 2653
;2653:			cg.weaponSelect = 0;
ADDRGP4 cg+109148
CNSTI4 0
ASGNI4
line 2654
;2654:		}
LABELV $1567
line 2663
;2655:		// JUHOX: we now may cycle to gauntlet
;2656:#if 0
;2657:		if ( cg.weaponSelect == WP_GAUNTLET ) {
;2658:			continue;		// never cycle to gauntlet
;2659:		}
;2660:#endif
;2661:		// JUHOX: never cycle to the grappling hook
;2662:#if 1
;2663:		if (cg.weaponSelect == WP_GRAPPLING_HOOK) continue;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 10
NEI4 $1571
ADDRGP4 $1563
JUMPV
LABELV $1571
line 2665
;2664:#endif
;2665:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+109148
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1574
line 2666
;2666:			break;
ADDRGP4 $1564
JUMPV
LABELV $1574
line 2668
;2667:		}
;2668:	}
LABELV $1563
line 2650
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1562
LABELV $1564
line 2669
;2669:	if ( i == 16 ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1577
line 2670
;2670:		cg.weaponSelect = original;
ADDRGP4 cg+109148
ADDRLP4 4
INDIRI4
ASGNI4
line 2671
;2671:	}
LABELV $1577
line 2676
;2672:	// JUHOX: let spectator controlling timescale choose no weapon above #9
;2673:#if SCREENSHOT_TOOLS
;2674:	if (cg.snap->ps.pm_type == PM_SPECTATOR && cg.weaponSelect >= 10) cg.weaponSelect = original;
;2675:#endif
;2676:}
LABELV $1523
endproc CG_NextWeapon_f 16 12
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 16 12
line 2683
;2677:
;2678:/*
;2679:===============
;2680:CG_PrevWeapon_f
;2681:===============
;2682:*/
;2683:void CG_PrevWeapon_f( void ) {
line 2687
;2684:	int		i;
;2685:	int		original;
;2686:
;2687:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1581
line 2688
;2688:		return;
ADDRGP4 $1580
JUMPV
LABELV $1581
line 2690
;2689:	}
;2690:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1584
line 2691
;2691:		return;
ADDRGP4 $1580
JUMPV
LABELV $1584
line 2696
;2692:	}
;2693:
;2694:	// JUHOX: select effect in lens flare editor
;2695:#if MAPLENSFLARES
;2696:	if (cgs.editMode == EM_mlf) {
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $1587
line 2697
;2697:		cg.lfEditor.selectedEffect--;
ADDRLP4 8
ADDRGP4 cg+109660+40
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2698
;2698:		if (cg.lfEditor.selectedEffect < 0) cg.lfEditor.selectedEffect = 0;
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 0
GEI4 $1592
ADDRGP4 cg+109660+40
CNSTI4 0
ASGNI4
LABELV $1592
line 2699
;2699:		if (cg.lfEditor.selectedEffect >= cgs.numLensFlareEffects) {
ADDRGP4 cg+109660+40
INDIRI4
ADDRGP4 cgs+162608
INDIRI4
LTI4 $1580
line 2700
;2700:			cg.lfEditor.selectedEffect = cgs.numLensFlareEffects - 1;
ADDRGP4 cg+109660+40
ADDRGP4 cgs+162608
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2701
;2701:		}
line 2702
;2702:		return;
ADDRGP4 $1580
JUMPV
LABELV $1587
line 2708
;2703:	}
;2704:#endif
;2705:
;2706:	// JUHOX: select segment in EFH debug mode
;2707:#if ESCAPE_MODE
;2708:	if (cgs.gametype == GT_EFH && cgs.debugEFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $1606
ADDRGP4 cgs+31864
INDIRI4
CNSTI4 0
EQI4 $1606
line 2709
;2709:		trap_SendClientCommand("efhdebugseg -1");
ADDRGP4 $1506
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2710
;2710:		return;
ADDRGP4 $1580
JUMPV
LABELV $1606
line 2714
;2711:	}
;2712:#endif
;2713:
;2714:	cg.weaponManuallySet = qtrue;	// JUHOX
ADDRGP4 cg+109152
CNSTI4 1
ASGNI4
line 2715
;2715:	memset(tmpSkipWeapon, 0, sizeof(tmpSkipWeapon));	// JUHOX: not really needed i think
ADDRGP4 tmpSkipWeapon
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2719
;2716:
;2717:	// JUHOX: this is a workaround to the late server side weapon selection
;2718:#if 1
;2719:	if (cg.weaponSelect == WP_NONE) cg.weaponSelect = cg.snap->ps.weapon;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 0
NEI4 $1611
ADDRGP4 cg+109148
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
LABELV $1611
line 2722
;2720:#endif
;2721:
;2722:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+127988
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 2723
;2723:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+109148
INDIRI4
ASGNI4
line 2725
;2724:
;2725:	for ( i = 0 ; i < 16 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1619
line 2726
;2726:		cg.weaponSelect--;
ADDRLP4 8
ADDRGP4 cg+109148
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2727
;2727:		if ( cg.weaponSelect == -1 ) {
ADDRGP4 cg+109148
INDIRI4
CNSTI4 -1
NEI4 $1624
line 2728
;2728:			cg.weaponSelect = 15;
ADDRGP4 cg+109148
CNSTI4 15
ASGNI4
line 2729
;2729:		}
LABELV $1624
line 2738
;2730:		// JUHOX: we now may cycle to gauntlet
;2731:#if 0
;2732:		if ( cg.weaponSelect == WP_GAUNTLET ) {
;2733:			continue;		// never cycle to gauntlet
;2734:		}
;2735:#endif
;2736:		// JUHOX: never cycle to the grappling hook
;2737:#if 1
;2738:		if (cg.weaponSelect == WP_GRAPPLING_HOOK) continue;
ADDRGP4 cg+109148
INDIRI4
CNSTI4 10
NEI4 $1628
ADDRGP4 $1620
JUMPV
LABELV $1628
line 2740
;2739:#endif
;2740:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+109148
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1631
line 2741
;2741:			break;
ADDRGP4 $1621
JUMPV
LABELV $1631
line 2743
;2742:		}
;2743:	}
LABELV $1620
line 2725
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1619
LABELV $1621
line 2744
;2744:	if ( i == 16 ) {
ADDRLP4 0
INDIRI4
CNSTI4 16
NEI4 $1634
line 2745
;2745:		cg.weaponSelect = original;
ADDRGP4 cg+109148
ADDRLP4 4
INDIRI4
ASGNI4
line 2746
;2746:	}
LABELV $1634
line 2751
;2747:	// JUHOX: let spectator controlling timescale choose no weapon below #1
;2748:#if SCREENSHOT_TOOLS
;2749:	if (cg.snap->ps.pm_type == PM_SPECTATOR && cg.weaponSelect <= 0) cg.weaponSelect = original;
;2750:#endif
;2751:}
LABELV $1580
endproc CG_PrevWeapon_f 16 12
proc CG_AddLensFlareEntity 16 12
line 2759
;2752:
;2753:/*
;2754:===============
;2755:JUHOX: CG_AddLensFlareEntity
;2756:===============
;2757:*/
;2758:#if MAPLENSFLARES
;2759:static lensFlareEntity_t* CG_AddLensFlareEntity(const lensFlareEntity_t* model) {
line 2763
;2760:	int entnum;
;2761:	lensFlareEntity_t* lfent;
;2762:
;2763:	if (cgs.numLensFlareEntities >= MAX_LIGHTS_PER_MAP) return NULL;
ADDRGP4 cgs+562612
INDIRI4
CNSTI4 1024
LTI4 $1638
CNSTP4 0
RETP4
ADDRGP4 $1637
JUMPV
LABELV $1638
line 2765
;2764:
;2765:	entnum = cgs.numLensFlareEntities++;
ADDRLP4 12
ADDRGP4 cgs+562612
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 2766
;2766:	lfent = &cgs.lensFlareEntities[entnum];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 184
MULI4
ADDRGP4 cgs+562800
ADDP4
ASGNP4
line 2768
;2767:
;2768:	memset(lfent, 0, sizeof(*lfent));
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 184
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2769
;2769:	VectorCopy(cg.snap->ps.origin, lfent->origin);
ADDRLP4 0
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 2770
;2770:	if (model) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1644
line 2771
;2771:		lfent->radius = model->radius;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ASGNF4
line 2772
;2772:		lfent->lightRadius = model->lightRadius;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 2773
;2773:		lfent->lfeff = model->lfeff;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRP4
ASGNP4
line 2774
;2774:		VectorCopy(model->dir, lfent->dir);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2775
;2775:		lfent->angle = model->angle;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ASGNF4
line 2776
;2776:	}
ADDRGP4 $1645
JUMPV
LABELV $1644
line 2777
;2777:	else {
line 2778
;2778:		lfent->radius = 5.0;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1084227584
ASGNF4
line 2779
;2779:		lfent->lfeff = &cgs.lensFlareEffects[cg.lfEditor.selectedEffect];
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 2000
MULI4
ADDRGP4 cgs+162612
ADDP4
ASGNP4
line 2780
;2780:		lfent->dir[0] = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 1065353216
ASGNF4
line 2781
;2781:		lfent->angle = -1;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 3212836864
ASGNF4
line 2782
;2782:	}
LABELV $1645
line 2783
;2783:	CG_ComputeMaxVisAngle(lfent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_ComputeMaxVisAngle
CALLV
pop
line 2785
;2784:
;2785:	cg.lfEditor.originalLFEnt = *lfent;
ADDRGP4 cg+109660+48
ADDRLP4 0
INDIRP4
INDIRB
ASGNB 184
line 2787
;2786:
;2787:	return lfent;
ADDRLP4 0
INDIRP4
RETP4
LABELV $1637
endproc CG_AddLensFlareEntity 16 12
proc CG_DeleteLensFlareEntity 12 0
line 2797
;2788:}
;2789:#endif
;2790:
;2791:/*
;2792:===============
;2793:JUHOX: CG_DeleteLensFlareEntity
;2794:===============
;2795:*/
;2796:#if MAPLENSFLARES
;2797:static void CG_DeleteLensFlareEntity(lensFlareEntity_t* lfent) {
line 2801
;2798:	int lfentnum;
;2799:	int i;
;2800:
;2801:	lfentnum = lfent - cgs.lensFlareEntities;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cgs+562800
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 184
DIVI4
ASGNI4
line 2802
;2802:	if (lfentnum < 0) return;
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1653
ADDRGP4 $1651
JUMPV
LABELV $1653
line 2803
;2803:	if (lfentnum >= cgs.numLensFlareEntities) return;
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+562612
INDIRI4
LTI4 $1655
ADDRGP4 $1651
JUMPV
LABELV $1655
line 2805
;2804:
;2805:	for (i = lfentnum; i < cgs.numLensFlareEntities-1; i++) {
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $1661
JUMPV
LABELV $1658
line 2806
;2806:		cgs.lensFlareEntities[i] = cgs.lensFlareEntities[i+1];
ADDRLP4 0
INDIRI4
CNSTI4 184
MULI4
ADDRGP4 cgs+562800
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 184
MULI4
ADDRGP4 cgs+562800+184
ADDP4
INDIRB
ASGNB 184
line 2807
;2807:	}
LABELV $1659
line 2805
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1661
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+562612
INDIRI4
CNSTI4 1
SUBI4
LTI4 $1658
line 2808
;2808:	cgs.numLensFlareEntities--;
ADDRLP4 8
ADDRGP4 cgs+562612
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2809
;2809:}
LABELV $1651
endproc CG_DeleteLensFlareEntity 12 0
proc CG_FindNextEntityByEffect 20 0
line 2850
;2810:#endif
;2811:
;2812:/*
;2813:=========================
;2814:JUHOX: CG_NearestMover
;2815:=========================
;2816:*/
;2817:/*
;2818:#if MAPLENSFLARES
;2819:static centity_t* CG_NearestMover(const vec3_t pos) {
;2820:	int i;
;2821:	centity_t* nearestMover;
;2822:	float nearestDistanceSqr;
;2823:
;2824:	nearestMover = NULL;
;2825:	nearestDistanceSqr = Square(100000.0);
;2826:	for (i = MAX_CLIENTS; i < ENTITYNUM_WORLD; i++) {
;2827:		centity_t* cent;
;2828:		float distanceSqr;
;2829:
;2830:		cent = &cg_entities[i];
;2831:		if (cent->currentState.eType != ET_MOVER) continue;
;2832:
;2833:		distanceSqr = DistanceSquared(pos, cent->lerpOrigin);
;2834:		if (distanceSqr > nearestDistanceSqr) continue;
;2835:
;2836:		nearestDistanceSqr = distanceSqr;
;2837:		nearestMover = cent;
;2838:	}
;2839:	return nearestMover;
;2840:}
;2841:#endif
;2842:*/
;2843:
;2844:/*
;2845:=========================
;2846:JUHOX: CG_FindNextEntityByEffect
;2847:=========================
;2848:*/
;2849:#if MAPLENSFLARES
;2850:static int CG_FindNextEntityByEffect(void) {
line 2855
;2851:	const lensFlareEffect_t* lfeff;
;2852:	int start;
;2853:	int i;
;2854:
;2855:	lfeff = &cgs.lensFlareEffects[cg.lfEditor.selectedEffect];
ADDRLP4 8
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 2000
MULI4
ADDRGP4 cgs+162612
ADDP4
ASGNP4
line 2856
;2856:	start = -1;
ADDRLP4 4
CNSTI4 -1
ASGNI4
line 2857
;2857:	if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1671
line 2858
;2858:		start = cg.lfEditor.selectedLFEnt - cgs.lensFlareEntities;
ADDRLP4 4
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
ADDRGP4 cgs+562800
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 184
DIVI4
ASGNI4
line 2859
;2859:	}
LABELV $1671
line 2860
;2860:	for (i = 1; i <= cgs.numLensFlareEntities; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $1679
JUMPV
LABELV $1676
line 2864
;2861:		int j;
;2862:		const lensFlareEntity_t* lfent;
;2863:
;2864:		j = (start + i) % cgs.numLensFlareEntities;
ADDRLP4 12
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRGP4 cgs+562612
INDIRI4
MODI4
ASGNI4
line 2865
;2865:		lfent = &cgs.lensFlareEntities[j];
ADDRLP4 16
ADDRLP4 12
INDIRI4
CNSTI4 184
MULI4
ADDRGP4 cgs+562800
ADDP4
ASGNP4
line 2866
;2866:		if (lfent->lfeff == lfeff) return j;
ADDRLP4 16
INDIRP4
CNSTI4 44
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
NEU4 $1683
ADDRLP4 12
INDIRI4
RETI4
ADDRGP4 $1667
JUMPV
LABELV $1683
line 2867
;2867:	}
LABELV $1677
line 2860
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1679
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+562612
INDIRI4
LEI4 $1676
line 2868
;2868:	return -1;
CNSTI4 -1
RETI4
LABELV $1667
endproc CG_FindNextEntityByEffect 20 0
proc CG_EvaluateViewDir 20 0
line 2880
;2869:}
;2870:#endif
;2871:
;2872:/*
;2873:=========================
;2874:JUHOX: CG_EvaluateViewDir
;2875:=========================
;2876:*/
;2877:#if MAPLENSFLARES
;2878:#define MAX_VIEWTESTS 200
;2879:static vec3_t viewDirList[MAX_VIEWTESTS];
;2880:static float CG_EvaluateViewDir(const vec3_t viewDir, int listSize) {
line 2884
;2881:	float evaluation;
;2882:	int i;
;2883:
;2884:	evaluation = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 2885
;2885:	for (i = 0; i < listSize; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1689
JUMPV
LABELV $1686
line 2888
;2886:		float d;
;2887:
;2888:		d = DotProduct(viewDir, viewDirList[i]);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList
ADDP4
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2889
;2889:		if (d <= 0) continue;
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1692
ADDRGP4 $1687
JUMPV
LABELV $1692
line 2891
;2890:
;2891:		evaluation += d;
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ASGNF4
line 2892
;2892:	}
LABELV $1687
line 2885
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1689
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $1686
line 2893
;2893:	return evaluation;
ADDRLP4 4
INDIRF4
RETF4
LABELV $1685
endproc CG_EvaluateViewDir 20 0
proc CG_FindBestViewOrg 160 28
line 2903
;2894:}
;2895:#endif
;2896:
;2897:/*
;2898:=========================
;2899:JUHOX: CG_FindBestViewOrg
;2900:=========================
;2901:*/
;2902:#if MAPLENSFLARES
;2903:static void CG_FindBestViewOrg(const lensFlareEntity_t* lfent, vec3_t viewOrg) {
line 2911
;2904:	vec3_t origin;
;2905:	float viewDistance;
;2906:	int i;
;2907:	int listSize;
;2908:	float bestEvaluation;
;2909:	int bestDir;
;2910:
;2911:	CG_LFEntOrigin(lfent, origin);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_LFEntOrigin
CALLV
pop
line 2912
;2912:	VectorCopy(origin, viewOrg);
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 12
line 2914
;2913:
;2914:	viewDistance = 3 * lfent->radius + 100;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
CNSTF4 1077936128
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 2915
;2915:	listSize = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2917
;2916:
;2917:	for (i = 0; i < MAX_VIEWTESTS; i++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $1695
line 2925
;2918:		vec3_t dir;
;2919:		vec3_t start;
;2920:		vec3_t end;
;2921:		trace_t trace;
;2922:		vec3_t candidate;
;2923:		//float evaluation;
;2924:
;2925:		dir[0] = crandom();
ADDRLP4 136
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 32
ADDRLP4 136
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 136
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ASGNF4
line 2926
;2926:		dir[1] = crandom();
ADDRLP4 140
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 32+4
ADDRLP4 140
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 140
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ASGNF4
line 2927
;2927:		dir[2] = crandom();
ADDRLP4 144
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 32+8
ADDRLP4 144
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 144
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ASGNF4
line 2928
;2928:		if (VectorNormalize(dir) < 0.001) continue;
ADDRLP4 32
ARGP4
ADDRLP4 148
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 148
INDIRF4
CNSTF4 981668463
GEF4 $1701
ADDRGP4 $1696
JUMPV
LABELV $1701
line 2930
;2929:
;2930:		VectorMA(origin, lfent->radius, dir, start);
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2931
;2931:		VectorMA(origin, viewDistance, dir, end);
ADDRLP4 124
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 2932
;2932:		CG_Trace(&trace, start, NULL, NULL, end, -1, MASK_OPAQUE|CONTENTS_BODY);
ADDRLP4 44
ARGP4
ADDRLP4 112
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 124
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 33554457
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2933
;2933:		if (trace.fraction < 0.1) continue;
ADDRLP4 44+8
INDIRF4
CNSTF4 1036831949
GEF4 $1715
ADDRGP4 $1696
JUMPV
LABELV $1715
line 2935
;2934:		
;2935:		VectorMA(trace.endpos, -10, dir, candidate);
ADDRLP4 100
ADDRLP4 44+12
INDIRF4
ADDRLP4 32
INDIRF4
CNSTF4 3240099840
MULF4
ADDF4
ASGNF4
ADDRLP4 100+4
ADDRLP4 44+12+4
INDIRF4
ADDRLP4 32+4
INDIRF4
CNSTF4 3240099840
MULF4
ADDF4
ASGNF4
ADDRLP4 100+8
ADDRLP4 44+12+8
INDIRF4
ADDRLP4 32+8
INDIRF4
CNSTF4 3240099840
MULF4
ADDF4
ASGNF4
line 2936
;2936:		CG_Trace(&trace, candidate, NULL, NULL, start, -1, MASK_OPAQUE|CONTENTS_BODY);
ADDRLP4 44
ARGP4
ADDRLP4 100
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 112
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 33554457
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2937
;2937:		if (trace.fraction < 1) continue;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
GEF4 $1727
ADDRGP4 $1696
JUMPV
LABELV $1727
line 2939
;2938:
;2939:		VectorSubtract(candidate, origin, viewDirList[listSize]);
ADDRLP4 16
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList
ADDP4
ADDRLP4 100
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+4
ADDP4
ADDRLP4 100+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+8
ADDP4
ADDRLP4 100+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 2940
;2940:		listSize++;	// CAUTION: don't add this to the line above -- VectorSubtract() is a macro!
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2941
;2941:	}
LABELV $1696
line 2917
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 200
LTI4 $1695
line 2943
;2942:
;2943:	bestEvaluation = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 2944
;2944:	bestDir = -1;
ADDRLP4 28
CNSTI4 -1
ASGNI4
line 2945
;2945:	for (i = 0; i < listSize; i++) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $1739
JUMPV
LABELV $1736
line 2948
;2946:		float evaluation;
;2947:
;2948:		evaluation = CG_EvaluateViewDir(viewDirList[i], listSize);
ADDRLP4 12
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_EvaluateViewDir
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 36
INDIRF4
ASGNF4
line 2949
;2949:		if (evaluation <= bestEvaluation) continue;
ADDRLP4 32
INDIRF4
ADDRLP4 24
INDIRF4
GTF4 $1740
ADDRGP4 $1737
JUMPV
LABELV $1740
line 2951
;2950:
;2951:		bestEvaluation = evaluation;
ADDRLP4 24
ADDRLP4 32
INDIRF4
ASGNF4
line 2952
;2952:		bestDir = i;
ADDRLP4 28
ADDRLP4 12
INDIRI4
ASGNI4
line 2953
;2953:	}
LABELV $1737
line 2945
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1739
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $1736
line 2955
;2954:
;2955:	if (bestDir >= 0) {
ADDRLP4 28
INDIRI4
CNSTI4 0
LTI4 $1742
line 2956
;2956:		VectorAdd(origin, viewDirList[bestDir], viewOrg);
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 12
MULI4
ADDRGP4 viewDirList+8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 2957
;2957:	}
LABELV $1742
line 2958
;2958:}
LABELV $1694
endproc CG_FindBestViewOrg 160 28
proc CG_NextMover 8 0
line 2967
;2959:#endif
;2960:
;2961:/*
;2962:=========================
;2963:JUHOX: CG_NextMover
;2964:=========================
;2965:*/
;2966:#if MAPLENSFLARES
;2967:static centity_t* CG_NextMover(centity_t* current) {
line 2970
;2968:	int start, i;
;2969:
;2970:	if (!current) current = &cg_entities[0];
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1749
ADDRFP4 0
ADDRGP4 cg_entities
ASGNP4
LABELV $1749
line 2972
;2971:
;2972:	start = current - cg_entities;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 880
DIVI4
ASGNI4
line 2973
;2973:	for (i = 1; i <= MAX_GENTITIES; i++) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1751
line 2974
;2974:		current = &cg_entities[(start + i) % MAX_GENTITIES];
ADDRFP4 0
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
CNSTI4 1024
MODI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 2975
;2975:		if (current->currentState.eType != ET_MOVER) continue;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 4
EQI4 $1755
ADDRGP4 $1752
JUMPV
LABELV $1755
line 2976
;2976:		if (!current->currentValid) continue;
ADDRFP4 0
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1757
ADDRGP4 $1752
JUMPV
LABELV $1757
line 2978
;2977:
;2978:		return current;
ADDRFP4 0
INDIRP4
RETP4
ADDRGP4 $1748
JUMPV
LABELV $1752
line 2973
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1024
LEI4 $1751
line 2980
;2979:	}
;2980:	return NULL;
CNSTP4 0
RETP4
LABELV $1748
endproc CG_NextMover 8 0
proc CG_HandleCopyOptions 24 0
line 2990
;2981:}
;2982:#endif
;2983:
;2984:/*
;2985:=========================
;2986:JUHOX: CG_HandleCopyOptions
;2987:=========================
;2988:*/
;2989:#if MAPLENSFLARES
;2990:static void CG_HandleCopyOptions(int command) {
line 2991
;2991:	switch (command) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1760
ADDRLP4 0
INDIRI4
CNSTI4 6
GTI4 $1760
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1780-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $1780
address $1762
address $1765
address $1768
address $1771
address $1774
address $1777
code
LABELV $1762
line 2993
;2992:	case 1:	// cancel
;2993:		cg.lfEditor.cmdMode = LFECM_main;
ADDRGP4 cg+109660+256
CNSTI4 0
ASGNI4
line 2994
;2994:		break;
ADDRGP4 $1761
JUMPV
LABELV $1765
line 2996
;2995:	case 2:	// effect
;2996:		cg.lfEditor.copyOptions ^= LFECO_EFFECT;
ADDRLP4 4
ADDRGP4 cg+109660+260
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 2997
;2997:		break;
ADDRGP4 $1761
JUMPV
LABELV $1768
line 2999
;2998:	case 3:	// vis radius
;2999:		cg.lfEditor.copyOptions ^= LFECO_VISRADIUS;
ADDRLP4 8
ADDRGP4 cg+109660+260
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 2
BXORI4
ASGNI4
line 3000
;3000:		break;
ADDRGP4 $1761
JUMPV
LABELV $1771
line 3002
;3001:	case 4:	// light radius
;3002:		cg.lfEditor.copyOptions ^= LFECO_LIGHTRADIUS;
ADDRLP4 12
ADDRGP4 cg+109660+260
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 3003
;3003:		break;
ADDRGP4 $1761
JUMPV
LABELV $1774
line 3005
;3004:	case 5:	// spot light direction
;3005:		cg.lfEditor.copyOptions ^= LFECO_SPOT_DIR;
ADDRLP4 16
ADDRGP4 cg+109660+260
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 8
BXORI4
ASGNI4
line 3006
;3006:		break;
ADDRGP4 $1761
JUMPV
LABELV $1777
line 3008
;3007:	case 6:	// spot light entity angle
;3008:		cg.lfEditor.copyOptions ^= LFECO_SPOT_ANGLE;
ADDRLP4 20
ADDRGP4 cg+109660+260
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 16
BXORI4
ASGNI4
line 3009
;3009:		break;
LABELV $1760
LABELV $1761
line 3011
;3010:	}
;3011:}
LABELV $1759
endproc CG_HandleCopyOptions 24 0
export CG_Weapon_f
proc CG_Weapon_f 2028 32
line 3019
;3012:#endif
;3013:
;3014:/*
;3015:===============
;3016:CG_Weapon_f
;3017:===============
;3018:*/
;3019:void CG_Weapon_f( void ) {
line 3022
;3020:	int		num;
;3021:
;3022:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1783
line 3023
;3023:		return;
ADDRGP4 $1782
JUMPV
LABELV $1783
line 3025
;3024:	}
;3025:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1786
line 3026
;3026:		return;
ADDRGP4 $1782
JUMPV
LABELV $1786
line 3029
;3027:	}
;3028:
;3029:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 3031
;3030:
;3031:	if ( num < 1 || num > 15 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1791
ADDRLP4 0
INDIRI4
CNSTI4 15
LEI4 $1789
LABELV $1791
line 3032
;3032:		return;
ADDRGP4 $1782
JUMPV
LABELV $1789
line 3037
;3033:	}
;3034:
;3035:	// JUHOX: in lens flare editor weapon chooses a command
;3036:#if MAPLENSFLARES
;3037:	if (cgs.editMode == EM_mlf) {
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $1792
line 3038
;3038:		if (num != 3) cg.lfEditor.delAck = qfalse;
ADDRLP4 0
INDIRI4
CNSTI4 3
EQI4 $1795
ADDRGP4 cg+109660+36
CNSTI4 0
ASGNI4
LABELV $1795
line 3040
;3039:
;3040:		if (cg.lfEditor.cmdMode == LFECM_copyOptions) {
ADDRGP4 cg+109660+256
INDIRI4
CNSTI4 1
NEI4 $1799
line 3041
;3041:			CG_HandleCopyOptions(num);
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_HandleCopyOptions
CALLV
pop
line 3042
;3042:			return;
ADDRGP4 $1782
JUMPV
LABELV $1799
line 3045
;3043:		}
;3044:
;3045:		switch (num) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $1782
ADDRLP4 0
INDIRI4
CNSTI4 9
GTI4 $1782
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2089-4
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2089
address $1805
address $1815
address $1838
address $1866
address $1917
address $1955
address $1973
address $2039
address $2059
code
LABELV $1805
line 3047
;3046:		case 1:	// cancel
;3047:			if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1806
line 3048
;3048:				*cg.lfEditor.selectedLFEnt = cg.lfEditor.originalLFEnt;
ADDRGP4 cg+109660
INDIRP4
ADDRGP4 cg+109660+48
INDIRB
ASGNB 184
line 3049
;3049:			}
LABELV $1806
line 3050
;3050:			cg.lfEditor.selectedLFEnt = NULL;
ADDRGP4 cg+109660
CNSTP4 0
ASGNP4
line 3051
;3051:			cg.lfEditor.editMode = LFEEM_none;
ADDRGP4 cg+109660+8
CNSTI4 0
ASGNI4
line 3052
;3052:			CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3053
;3053:			break;
ADDRGP4 $1782
JUMPV
LABELV $1815
line 3055
;3054:		case 2:	// add lens flare entity / switch mover state
;3055:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1816
line 3056
;3056:				if (cg.lfEditor.editMode == LFEEM_none) {
ADDRGP4 cg+109660+8
INDIRI4
CNSTI4 0
NEI4 $1782
line 3057
;3057:					cg.lfEditor.selectedLFEnt = CG_AddLensFlareEntity(cg.lfEditor.selectedLFEnt);
ADDRGP4 cg+109660
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_AddLensFlareEntity
CALLP4
ASGNP4
ADDRGP4 cg+109660
ADDRLP4 20
INDIRP4
ASGNP4
line 3058
;3058:					if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3059
;3059:						cg.lfEditor.editMode = LFEEM_pos;
ADDRGP4 cg+109660+8
CNSTI4 1
ASGNI4
line 3060
;3060:						CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3061
;3061:					}
line 3062
;3062:				}
line 3063
;3063:			}
ADDRGP4 $1782
JUMPV
LABELV $1816
line 3064
;3064:			else {
line 3065
;3065:				cg.lfEditor.moversStopped = !cg.lfEditor.moversStopped;
ADDRGP4 cg+109660+448
INDIRI4
CNSTI4 0
NEI4 $1836
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $1837
JUMPV
LABELV $1836
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $1837
ADDRGP4 cg+109660+448
ADDRLP4 20
INDIRI4
ASGNI4
line 3066
;3066:			}
line 3067
;3067:			break;
ADDRGP4 $1782
JUMPV
LABELV $1838
line 3069
;3068:		case 3: // delete lens flare entity / select mover
;3069:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1839
line 3070
;3070:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3071
;3071:					if (!cg.lfEditor.delAck) {
ADDRGP4 cg+109660+36
INDIRI4
CNSTI4 0
NEI4 $1846
line 3072
;3072:						cg.lfEditor.delAck = qtrue;
ADDRGP4 cg+109660+36
CNSTI4 1
ASGNI4
line 3073
;3073:					}
ADDRGP4 $1782
JUMPV
LABELV $1846
line 3074
;3074:					else {
line 3075
;3075:						cg.lfEditor.delAck = qfalse;
ADDRGP4 cg+109660+36
CNSTI4 0
ASGNI4
line 3076
;3076:						CG_DeleteLensFlareEntity(cg.lfEditor.selectedLFEnt);
ADDRGP4 cg+109660
INDIRP4
ARGP4
ADDRGP4 CG_DeleteLensFlareEntity
CALLV
pop
line 3077
;3077:						cg.lfEditor.selectedLFEnt = NULL;
ADDRGP4 cg+109660
CNSTP4 0
ASGNP4
line 3078
;3078:						cg.lfEditor.editMode = LFEEM_none;
ADDRGP4 cg+109660+8
CNSTI4 0
ASGNI4
line 3079
;3079:						CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3080
;3080:					}
line 3081
;3081:				}
line 3082
;3082:			}
ADDRGP4 $1782
JUMPV
LABELV $1839
line 3083
;3083:			else if (cg.lfEditor.moversStopped) {
ADDRGP4 cg+109660+448
INDIRI4
CNSTI4 0
EQI4 $1782
line 3084
;3084:				cg.lfEditor.selectedMover = CG_NextMover(cg.lfEditor.selectedMover);
ADDRGP4 cg+109660+452
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_NextMover
CALLP4
ASGNP4
ADDRGP4 cg+109660+452
ADDRLP4 20
INDIRP4
ASGNP4
line 3085
;3085:			}
line 3086
;3086:			break;
ADDRGP4 $1782
JUMPV
LABELV $1866
line 3088
;3087:		case 4:	// edit position & vis radius / lock to mover
;3088:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1867
line 3089
;3089:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3090
;3090:					if (cg.lfEditor.editMode == LFEEM_pos) {
ADDRGP4 cg+109660+8
INDIRI4
CNSTI4 1
NEI4 $1874
line 3091
;3091:						cg.lfEditor.editMode = LFEEM_none;
ADDRGP4 cg+109660+8
CNSTI4 0
ASGNI4
line 3092
;3092:						CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3093
;3093:					}
ADDRGP4 $1782
JUMPV
LABELV $1874
line 3094
;3094:					else {
line 3095
;3095:						cg.lfEditor.editMode = LFEEM_pos;
ADDRGP4 cg+109660+8
CNSTI4 1
ASGNI4
line 3096
;3096:						CG_SetLFEdMoveMode(LFEMM_fine);
CNSTI4 1
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3097
;3097:					}
line 3098
;3098:				}
line 3099
;3099:			}
ADDRGP4 $1782
JUMPV
LABELV $1867
line 3100
;3100:			else if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3101
;3101:				if (cg.lfEditor.selectedLFEnt->lock) {
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1885
line 3102
;3102:					VectorAdd(
ADDRGP4 cg+109660
INDIRP4
ADDRGP4 cg+109660
INDIRP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 728
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 732
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 736
ADDP4
INDIRF4
ADDF4
ASGNF4
line 3107
;3103:						cg.lfEditor.selectedLFEnt->origin,
;3104:						cg.lfEditor.selectedLFEnt->lock->lerpOrigin,
;3105:						cg.lfEditor.selectedLFEnt->origin
;3106:					);
;3107:					cg.lfEditor.selectedLFEnt->lock = NULL;
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
CNSTP4 0
ASGNP4
line 3108
;3108:				}
ADDRGP4 $1782
JUMPV
LABELV $1885
line 3109
;3109:				else {
line 3110
;3110:					if (cg.lfEditor.selectedMover && cg.lfEditor.moversStopped) {
ADDRGP4 cg+109660+452
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1898
ADDRGP4 cg+109660+448
INDIRI4
CNSTI4 0
EQI4 $1898
line 3111
;3111:						cg.lfEditor.selectedLFEnt->lock = cg.lfEditor.selectedMover;
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+109660+452
INDIRP4
ASGNP4
line 3112
;3112:						VectorSubtract(
ADDRGP4 cg+109660
INDIRP4
ADDRGP4 cg+109660
INDIRP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 728
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 732
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 cg+109660
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CNSTI4 736
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3117
;3113:							cg.lfEditor.selectedLFEnt->origin,
;3114:							cg.lfEditor.selectedLFEnt->lock->lerpOrigin,
;3115:							cg.lfEditor.selectedLFEnt->origin
;3116:						);
;3117:					}
ADDRGP4 $1782
JUMPV
LABELV $1898
line 3118
;3118:					else {
line 3119
;3119:						CG_Printf("no mover selected\n");
ADDRGP4 $1916
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 3120
;3120:					}
line 3121
;3121:				}
line 3122
;3122:			}
line 3123
;3123:			break;
ADDRGP4 $1782
JUMPV
LABELV $1917
line 3125
;3124:		case 5:	// edit target & angle / search entity
;3125:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1918
line 3126
;3126:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3127
;3127:					if (cg.lfEditor.editMode == LFEEM_target) {
ADDRGP4 cg+109660+8
INDIRI4
CNSTI4 2
NEI4 $1925
line 3128
;3128:						cg.lfEditor.editMode = LFEEM_none;
ADDRGP4 cg+109660+8
CNSTI4 0
ASGNI4
line 3129
;3129:						CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3130
;3130:					}
ADDRGP4 $1782
JUMPV
LABELV $1925
line 3131
;3131:					else {
line 3132
;3132:						cg.lfEditor.editMode = LFEEM_target;
ADDRGP4 cg+109660+8
CNSTI4 2
ASGNI4
line 3133
;3133:						CG_SetLFEdMoveMode(LFEMM_fine);
CNSTI4 1
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3134
;3134:						cg.lfEditor.editTarget = qtrue;
ADDRGP4 cg+109660+240
CNSTI4 1
ASGNI4
line 3135
;3135:					}
line 3136
;3136:				}
line 3137
;3137:			}
ADDRGP4 $1782
JUMPV
LABELV $1918
line 3138
;3138:			else {
line 3141
;3139:				int nextLFEnt;
;3140:
;3141:				nextLFEnt = CG_FindNextEntityByEffect();
ADDRLP4 24
ADDRGP4 CG_FindNextEntityByEffect
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 3142
;3142:				if (nextLFEnt >= 0) {
ADDRLP4 20
INDIRI4
CNSTI4 0
LTI4 $1935
line 3148
;3143:					const lensFlareEntity_t* lfent;
;3144:					vec3_t viewOrg;
;3145:					vec3_t dir;
;3146:					vec3_t angles;
;3147:
;3148:					CG_SelectLFEnt(nextLFEnt);
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_SelectLFEnt
CALLV
pop
line 3150
;3149:					
;3150:					lfent = &cgs.lensFlareEntities[nextLFEnt];
ADDRLP4 64
ADDRLP4 20
INDIRI4
CNSTI4 184
MULI4
ADDRGP4 cgs+562800
ADDP4
ASGNP4
line 3151
;3151:					CG_FindBestViewOrg(lfent, viewOrg);
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 CG_FindBestViewOrg
CALLV
pop
line 3152
;3152:					CG_LFEntOrigin(lfent, dir);
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CG_LFEntOrigin
CALLV
pop
line 3153
;3153:					VectorSubtract(dir, viewOrg, dir);
ADDRLP4 28
ADDRLP4 28
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 40+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 40+8
INDIRF4
SUBF4
ASGNF4
line 3154
;3154:					vectoangles(dir, angles);
ADDRLP4 28
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 3155
;3155:					trap_SendClientCommand(
ADDRGP4 $1944
ARGP4
ADDRGP4 cg+109660+12
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40+4
INDIRF4
ARGF4
ADDRLP4 40+8
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52+4
INDIRF4
ARGF4
ADDRLP4 52+12
INDIRF4
ARGF4
ADDRLP4 68
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 3163
;3156:						va(
;3157:							"lfemm %d %f %f %f %f %f %f",
;3158:							cg.lfEditor.moveMode,
;3159:							viewOrg[0], viewOrg[1], viewOrg[2],
;3160:							angles[0], angles[1], angles[3]
;3161:						)
;3162:					);
;3163:				}
ADDRGP4 $1782
JUMPV
LABELV $1935
line 3164
;3164:				else {
line 3165
;3165:					CG_Printf("No flare entity found with '%s'\n", cgs.lensFlareEffects[cg.lfEditor.selectedEffect]);
ADDRGP4 $1951
ARGP4
ADDRLP4 28
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 2000
MULI4
ADDRGP4 cgs+162612
ADDP4
INDIRB
ASGNB 2000
ADDRLP4 28
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 3166
;3166:				}
line 3167
;3167:			}
line 3168
;3168:			break;
ADDRGP4 $1782
JUMPV
LABELV $1955
line 3170
;3169:		case 6:	// edit light size & vis radius / copy options
;3170:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1956
line 3171
;3171:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3172
;3172:					if (cg.lfEditor.editMode == LFEEM_radius) {
ADDRGP4 cg+109660+8
INDIRI4
CNSTI4 3
NEI4 $1963
line 3173
;3173:						cg.lfEditor.editMode = LFEEM_none;
ADDRGP4 cg+109660+8
CNSTI4 0
ASGNI4
line 3174
;3174:						CG_SetLFEdMoveMode(LFEMM_coarse);
CNSTI4 0
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3175
;3175:					}
ADDRGP4 $1782
JUMPV
LABELV $1963
line 3176
;3176:					else {
line 3177
;3177:						cg.lfEditor.editMode = LFEEM_radius;
ADDRGP4 cg+109660+8
CNSTI4 3
ASGNI4
line 3178
;3178:						CG_SetLFEdMoveMode(LFEMM_fine);
CNSTI4 1
ARGI4
ADDRGP4 CG_SetLFEdMoveMode
CALLV
pop
line 3179
;3179:					}
line 3180
;3180:				}
line 3181
;3181:			}
ADDRGP4 $1782
JUMPV
LABELV $1956
line 3182
;3182:			else {
line 3183
;3183:				cg.lfEditor.cmdMode = LFECM_copyOptions;
ADDRGP4 cg+109660+256
CNSTI4 1
ASGNI4
line 3184
;3184:			}
line 3185
;3185:			break;
ADDRGP4 $1782
JUMPV
LABELV $1973
line 3187
;3186:		case 7:	// assign effect / paste lf entity
;3187:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1974
line 3189
;3188:				if (
;3189:					cg.lfEditor.selectedLFEnt &&
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 0
LTI4 $1782
ADDRGP4 cg+109660+40
INDIRI4
ADDRGP4 cgs+162608
INDIRI4
GEI4 $1782
line 3192
;3190:					cg.lfEditor.selectedEffect >= 0 &&
;3191:					cg.lfEditor.selectedEffect < cgs.numLensFlareEffects
;3192:				) {
line 3193
;3193:					cg.lfEditor.selectedLFEnt->lfeff = &cgs.lensFlareEffects[cg.lfEditor.selectedEffect];
ADDRGP4 cg+109660
INDIRP4
CNSTI4 44
ADDP4
ADDRGP4 cg+109660+40
INDIRI4
CNSTI4 2000
MULI4
ADDRGP4 cgs+162612
ADDP4
ASGNP4
line 3194
;3194:					CG_ComputeMaxVisAngle(cg.lfEditor.selectedLFEnt);
ADDRGP4 cg+109660
INDIRP4
ARGP4
ADDRGP4 CG_ComputeMaxVisAngle
CALLV
pop
line 3195
;3195:				}
line 3196
;3196:			}
ADDRGP4 $1782
JUMPV
LABELV $1974
line 3197
;3197:			else if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3200
;3198:				lensFlareEntity_t* lfent;
;3199:
;3200:				lfent = cg.lfEditor.selectedLFEnt;
ADDRLP4 20
ADDRGP4 cg+109660
INDIRP4
ASGNP4
line 3201
;3201:				if (cg.lfEditor.copyOptions & LFECO_EFFECT) {
ADDRGP4 cg+109660+260
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1995
line 3202
;3202:					if (cg.lfEditor.copiedLFEnt.lfeff) {
ADDRGP4 cg+109660+264+44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1999
line 3203
;3203:						lfent->lfeff = cg.lfEditor.copiedLFEnt.lfeff;
ADDRLP4 20
INDIRP4
CNSTI4 44
ADDP4
ADDRGP4 cg+109660+264+44
INDIRP4
ASGNP4
line 3204
;3204:						CG_ComputeMaxVisAngle(lfent);
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 CG_ComputeMaxVisAngle
CALLV
pop
line 3205
;3205:					}
LABELV $1999
line 3206
;3206:				}
LABELV $1995
line 3207
;3207:				if (cg.lfEditor.copyOptions & LFECO_VISRADIUS) {
ADDRGP4 cg+109660+260
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $2007
line 3208
;3208:					lfent->radius = cg.lfEditor.copiedLFEnt.radius;
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+109660+264+16
INDIRF4
ASGNF4
line 3209
;3209:					if (lfent->lightRadius > lfent->radius) {
ADDRLP4 24
ADDRLP4 20
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
LEF4 $2014
line 3210
;3210:						lfent->lightRadius = lfent->radius;
ADDRLP4 28
ADDRLP4 20
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ASGNF4
line 3211
;3211:					}
LABELV $2014
line 3212
;3212:				}
LABELV $2007
line 3213
;3213:				if (cg.lfEditor.copyOptions & LFECO_LIGHTRADIUS) {
ADDRGP4 cg+109660+260
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $2016
line 3214
;3214:					lfent->lightRadius = cg.lfEditor.copiedLFEnt.lightRadius;
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+109660+264+20
INDIRF4
ASGNF4
line 3215
;3215:					if (lfent->radius < lfent->lightRadius) {
ADDRLP4 24
ADDRLP4 20
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
GEF4 $2023
line 3216
;3216:						lfent->radius = lfent->lightRadius;
ADDRLP4 28
ADDRLP4 20
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 3217
;3217:					}
LABELV $2023
line 3218
;3218:				}
LABELV $2016
line 3219
;3219:				if (cg.lfEditor.copyOptions & LFECO_SPOT_DIR) {
ADDRGP4 cg+109660+260
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $2025
line 3220
;3220:					VectorCopy(cg.lfEditor.copiedLFEnt.dir, lfent->dir);
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
ADDRGP4 cg+109660+264+24
INDIRB
ASGNB 12
line 3221
;3221:				}
LABELV $2025
line 3222
;3222:				if (cg.lfEditor.copyOptions & LFECO_SPOT_ANGLE) {
ADDRGP4 cg+109660+260
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1782
line 3223
;3223:					lfent->angle = cg.lfEditor.copiedLFEnt.angle;
ADDRLP4 20
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109660+264+36
INDIRF4
ASGNF4
line 3224
;3224:				}
line 3225
;3225:			}
line 3226
;3226:			break;
ADDRGP4 $1782
JUMPV
LABELV $2039
line 3228
;3227:		case 8:	// note effect / copy lf entity
;3228:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $2040
line 3230
;3229:				if (
;3230:					cg.lfEditor.selectedLFEnt &&
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
ADDRGP4 cg+109660
INDIRP4
CNSTI4 44
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
ADDRGP4 cgs+162608
INDIRI4
CNSTI4 0
LEI4 $1782
line 3233
;3231:					cg.lfEditor.selectedLFEnt->lfeff &&
;3232:					cgs.numLensFlareEffects > 0
;3233:				) {
line 3234
;3234:					cg.lfEditor.selectedEffect = cg.lfEditor.selectedLFEnt->lfeff - cgs.lensFlareEffects;
ADDRGP4 cg+109660+40
ADDRGP4 cg+109660
INDIRP4
CNSTI4 44
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 cgs+162612
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2000
DIVI4
ASGNI4
line 3235
;3235:				}
line 3236
;3236:			}
ADDRGP4 $1782
JUMPV
LABELV $2040
line 3237
;3237:			else {
line 3238
;3238:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3239
;3239:					cg.lfEditor.copiedLFEnt = *(cg.lfEditor.selectedLFEnt);
ADDRGP4 cg+109660+264
ADDRGP4 cg+109660
INDIRP4
INDIRB
ASGNB 184
line 3240
;3240:				}
line 3241
;3241:			}
line 3242
;3242:			break;
ADDRGP4 $1782
JUMPV
LABELV $2059
line 3244
;3243:		case 9:	// draw mode / cursor size
;3244:			if (!(cg.lfEditor.oldButtons & BUTTON_WALKING)) {
ADDRGP4 cg+109660+232
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $2060
line 3245
;3245:				cg.lfEditor.drawMode++;
ADDRLP4 20
ADDRGP4 cg+109660+4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3246
;3246:				if (cg.lfEditor.drawMode < 0 || cg.lfEditor.drawMode > LFEDM_none) {
ADDRGP4 cg+109660+4
INDIRI4
CNSTI4 0
LTI4 $2072
ADDRGP4 cg+109660+4
INDIRI4
CNSTI4 2
LEI4 $1782
LABELV $2072
line 3247
;3247:					cg.lfEditor.drawMode = 0;
ADDRGP4 cg+109660+4
CNSTI4 0
ASGNI4
line 3248
;3248:				}
line 3249
;3249:			}
ADDRGP4 $1782
JUMPV
LABELV $2060
line 3250
;3250:			else {
line 3251
;3251:				if (cg.lfEditor.selectedLFEnt) {
ADDRGP4 cg+109660
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1782
line 3252
;3252:					cg.lfEditor.cursorSize++;
ADDRLP4 20
ADDRGP4 cg+109660+16
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3253
;3253:					if (cg.lfEditor.cursorSize < 0 || cg.lfEditor.cursorSize > LFECS_visRadius) {
ADDRGP4 cg+109660+16
INDIRI4
CNSTI4 0
LTI4 $2086
ADDRGP4 cg+109660+16
INDIRI4
CNSTI4 2
LEI4 $1782
LABELV $2086
line 3254
;3254:						cg.lfEditor.cursorSize = 0;
ADDRGP4 cg+109660+16
CNSTI4 0
ASGNI4
line 3255
;3255:					}
line 3256
;3256:				}
line 3257
;3257:			}
line 3258
;3258:			break;
line 3260
;3259:		}
;3260:		return;
ADDRGP4 $1782
JUMPV
LABELV $1792
line 3264
;3261:	}
;3262:#endif
;3263:
;3264:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+127988
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 3266
;3265:
;3266:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $2093
line 3267
;3267:		return;		// don't have the weapon
ADDRGP4 $1782
JUMPV
LABELV $2093
line 3270
;3268:	}
;3269:
;3270:	cg.weaponManuallySet = qtrue;	// JUHOX
ADDRGP4 cg+109152
CNSTI4 1
ASGNI4
line 3271
;3271:	memset(tmpSkipWeapon, 0, sizeof(tmpSkipWeapon));	// JUHOX
ADDRGP4 tmpSkipWeapon
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 3273
;3272:
;3273:	cg.weaponSelect = num;
ADDRGP4 cg+109148
ADDRLP4 0
INDIRI4
ASGNI4
line 3274
;3274:}
LABELV $1782
endproc CG_Weapon_f 2028 32
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 0 4
line 3283
;3275:
;3276:/*
;3277:===================
;3278:CG_OutOfAmmoChange
;3279:
;3280:The current weapon has just run out of ammo
;3281:===================
;3282:*/
;3283:void CG_OutOfAmmoChange( void ) {
line 3286
;3284:	//int		i;	// JUHOX: no longer needed
;3285:
;3286:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+127988
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 3296
;3287:
;3288:#if 0	// JUHOX: new out-of-ammo-weapon-selection scheme
;3289:	for ( i = 15 ; i > 0 ; i-- ) {
;3290:		if ( CG_WeaponSelectable( i ) ) {
;3291:			cg.weaponSelect = i;
;3292:			break;
;3293:		}
;3294:	}
;3295:#else
;3296:	CG_ManuallySwitchToBestWeapon(-1);
CNSTI4 -1
ARGI4
ADDRGP4 CG_ManuallySwitchToBestWeapon
CALLV
pop
line 3298
;3297:#endif
;3298:}
LABELV $2098
endproc CG_OutOfAmmoChange 0 4
export CG_FireWeapon
proc CG_FireWeapon 28 16
line 3317
;3299:
;3300:
;3301:
;3302:/*
;3303:===================================================================================================
;3304:
;3305:WEAPON EVENTS
;3306:
;3307:===================================================================================================
;3308:*/
;3309:
;3310:/*
;3311:================
;3312:CG_FireWeapon
;3313:
;3314:Caused by an EV_FIRE_WEAPON event
;3315:================
;3316:*/
;3317:void CG_FireWeapon( centity_t *cent ) {
line 3322
;3318:	entityState_t *ent;
;3319:	int				c;
;3320:	weaponInfo_t	*weap;
;3321:
;3322:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 3325
;3323:	// JUHOX: use gauntlet hit sound for predator weapon
;3324:#if MONSTER_MODE
;3325:	if (ent->eType == ET_PLAYER) {
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2102
line 3326
;3326:		switch (ent->clientNum) {
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 64
LTI4 $2104
ADDRLP4 12
INDIRI4
CNSTI4 68
GTI4 $2104
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2112-256
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2112
address $2107
address $2104
address $2110
address $2107
address $2107
code
LABELV $2107
line 3330
;3327:		case CLIENTNUM_MONSTER_PREDATOR:
;3328:		case CLIENTNUM_MONSTER_PREDATOR_RED:
;3329:		case CLIENTNUM_MONSTER_PREDATOR_BLUE:
;3330:			trap_S_StartSound(NULL, ent->number, CHAN_WEAPON, cg_weapons[WP_GAUNTLET].flashSound[0]);
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 cg_weapons+136+52
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3331
;3331:			return;
ADDRGP4 $2101
JUMPV
LABELV $2110
line 3333
;3332:		case CLIENTNUM_MONSTER_TITAN:
;3333:			trap_S_StartSound(NULL, ent->number, CHAN_WEAPON, trap_S_RegisterSound("sound/weapons/rocket/rocklf1a.wav", qfalse));
ADDRGP4 $561
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3334
;3334:			trap_S_StartLocalSound(trap_S_RegisterSound("sound/earthquake1000.wav", qfalse), CHAN_WEAPON);
ADDRGP4 $2111
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 3335
;3335:			return;
ADDRGP4 $2101
JUMPV
LABELV $2104
line 3337
;3336:		}
;3337:	}
LABELV $2102
line 3339
;3338:#endif
;3339:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2114
line 3340
;3340:		return;
ADDRGP4 $2101
JUMPV
LABELV $2114
line 3342
;3341:	}
;3342:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 12
LTI4 $2116
line 3343
;3343:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $2118
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 3344
;3344:		return;
ADDRGP4 $2101
JUMPV
LABELV $2116
line 3346
;3345:	}
;3346:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 136
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 3350
;3347:
;3348:	// mark the entity as muzzle flashing, so when it is added it will
;3349:	// append the flash to the weapon model
;3350:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 3353
;3351:
;3352:	// lightning gun only does this this on initial press
;3353:	if ( ent->weapon == WP_LIGHTNING ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 6
NEI4 $2120
line 3354
;3354:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2122
line 3355
;3355:			return;
ADDRGP4 $2101
JUMPV
LABELV $2122
line 3357
;3356:		}
;3357:	}
LABELV $2120
line 3368
;3358:
;3359:	// JUHOX: no quad sound
;3360:#if 0
;3361:	// play quad sound if needed
;3362:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
;3363:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
;3364:	}
;3365:#endif
;3366:
;3367:	// play a sound
;3368:	for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2124
line 3369
;3369:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2128
line 3370
;3370:			break;
ADDRGP4 $2126
JUMPV
LABELV $2128
line 3372
;3371:		}
;3372:	}
LABELV $2125
line 3368
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $2124
LABELV $2126
line 3373
;3373:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $2130
line 3374
;3374:		c = rand() % c;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 3375
;3375:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2132
line 3376
;3376:		{
line 3377
;3377:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3378
;3378:		}
LABELV $2132
line 3379
;3379:	}
LABELV $2130
line 3382
;3380:
;3381:	// do brass ejection
;3382:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $2134
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $2134
line 3383
;3383:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 3384
;3384:	}
LABELV $2134
line 3385
;3385:}
LABELV $2101
endproc CG_FireWeapon 28 16
export CG_MissileHitWall
proc CG_MissileHitWall 104 44
line 3395
;3386:
;3387:
;3388:/*
;3389:=================
;3390:CG_MissileHitWall
;3391:
;3392:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;3393:=================
;3394:*/
;3395:void CG_MissileHitWall( int weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 3411
;3396:	qhandle_t		mod;
;3397:	qhandle_t		mark;
;3398:	qhandle_t		shader;
;3399:	sfxHandle_t		sfx;
;3400:	float			radius;
;3401:	float			light;
;3402:	vec3_t			lightColor;
;3403:	localEntity_t	*le;
;3404:	int				r;
;3405:	qboolean		alphaFade;
;3406:	qboolean		isSprite;
;3407:	int				duration;
;3408:	vec3_t			sprOrg;
;3409:	vec3_t			sprVel;
;3410:
;3411:	mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3412
;3412:	radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 3413
;3413:	sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 3414
;3414:	mod = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 3415
;3415:	shader = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 3416
;3416:	light = 0;
ADDRLP4 32
CNSTF4 0
ASGNF4
line 3417
;3417:	lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 3418
;3418:	lightColor[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 3419
;3419:	lightColor[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 3422
;3420:
;3421:	// set defaults
;3422:	isSprite = qfalse;
ADDRLP4 40
CNSTI4 0
ASGNI4
line 3423
;3423:	duration = 600;
ADDRLP4 48
CNSTI4 600
ASGNI4
line 3425
;3424:
;3425:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 2
LTI4 $2140
ADDRLP4 80
INDIRI4
CNSTI4 10
GTI4 $2140
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2246-8
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $2246
address $2229
address $2222
address $2162
address $2171
address $2149
address $2190
address $2199
address $2208
address $2142
code
LABELV $2142
line 3428
;3426:#if GRAPPLE_ROPE	// JUHOX: add sound for grapple
;3427:	case WP_GRAPPLING_HOOK:
;3428:		if (rand() & 1) {
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $2143
line 3429
;3429:			sfx = cgs.media.hgrenb1aSound;
ADDRLP4 16
ADDRGP4 cgs+751220+1504
INDIRI4
ASGNI4
line 3430
;3430:		} else {
ADDRGP4 $2141
JUMPV
LABELV $2143
line 3431
;3431:			sfx = cgs.media.hgrenb2aSound;
ADDRLP4 16
ADDRGP4 cgs+751220+1508
INDIRI4
ASGNI4
line 3432
;3432:		}
line 3433
;3433:		break;
ADDRGP4 $2141
JUMPV
LABELV $2140
LABELV $2149
line 3451
;3434:#endif
;3435:	default:
;3436:#ifdef MISSIONPACK
;3437:	case WP_NAILGUN:
;3438:		if( soundType == IMPACTSOUND_FLESH ) {
;3439:			sfx = cgs.media.sfx_nghitflesh;
;3440:		} else if( soundType == IMPACTSOUND_METAL ) {
;3441:			sfx = cgs.media.sfx_nghitmetal;
;3442:		} else {
;3443:			sfx = cgs.media.sfx_nghit;
;3444:		}
;3445:		mark = cgs.media.holeMarkShader;
;3446:		radius = 12;
;3447:		break;
;3448:#endif
;3449:	case WP_LIGHTNING:
;3450:		// no explosion at LG impact, it is added with the beam
;3451:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3452
;3452:		if ( r < 2 ) {
ADDRLP4 52
INDIRI4
CNSTI4 2
GEI4 $2150
line 3453
;3453:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 16
ADDRGP4 cgs+751220+968
INDIRI4
ASGNI4
line 3454
;3454:		} else if ( r == 2 ) {
ADDRGP4 $2151
JUMPV
LABELV $2150
ADDRLP4 52
INDIRI4
CNSTI4 2
NEI4 $2154
line 3455
;3455:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 16
ADDRGP4 cgs+751220+964
INDIRI4
ASGNI4
line 3456
;3456:		} else {
ADDRGP4 $2155
JUMPV
LABELV $2154
line 3457
;3457:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 16
ADDRGP4 cgs+751220+972
INDIRI4
ASGNI4
line 3458
;3458:		}
LABELV $2155
LABELV $2151
line 3459
;3459:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+596
INDIRI4
ASGNI4
line 3460
;3460:		radius = 12;
ADDRLP4 24
CNSTF4 1094713344
ASGNF4
line 3462
;3461:#if SPECIAL_VIEW_MODES
;3462:		CG_CheckStrongLight(origin, 200, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1128792064
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3464
;3463:#endif
;3464:		break;
ADDRGP4 $2141
JUMPV
LABELV $2162
line 3477
;3465:#ifdef MISSIONPACK
;3466:	case WP_PROX_LAUNCHER:
;3467:		mod = cgs.media.dishFlashModel;
;3468:		shader = cgs.media.grenadeExplosionShader;
;3469:		sfx = cgs.media.sfx_proxexp;
;3470:		mark = cgs.media.burnMarkShader;
;3471:		radius = 64;
;3472:		light = 300;
;3473:		isSprite = qtrue;
;3474:		break;
;3475:#endif
;3476:	case WP_GRENADE_LAUNCHER:
;3477:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+684
INDIRI4
ASGNI4
line 3478
;3478:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+708
INDIRI4
ASGNI4
line 3479
;3479:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+751220+992
INDIRI4
ASGNI4
line 3480
;3480:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+592
INDIRI4
ASGNI4
line 3481
;3481:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 3482
;3482:		light = 300;
ADDRLP4 32
CNSTF4 1133903872
ASGNF4
line 3483
;3483:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 3485
;3484:#if SPECIAL_VIEW_MODES
;3485:		CG_CheckStrongLight(origin, 600, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1142292480
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3488
;3486:#endif
;3487:#if EARTHQUAKE_SYSTEM	// JUHOX: grenade
;3488:		CG_AddEarthquake(origin, 600, 0.5, 0, 0.5, 200);
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1142292480
ARGF4
CNSTF4 1056964608
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1056964608
ARGF4
CNSTF4 1128792064
ARGF4
ADDRGP4 CG_AddEarthquake
CALLV
pop
line 3490
;3489:#endif
;3490:		break;
ADDRGP4 $2141
JUMPV
LABELV $2171
line 3492
;3491:	case WP_ROCKET_LAUNCHER:
;3492:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+684
INDIRI4
ASGNI4
line 3493
;3493:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+704
INDIRI4
ASGNI4
line 3494
;3494:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+751220+992
INDIRI4
ASGNI4
line 3495
;3495:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+592
INDIRI4
ASGNI4
line 3496
;3496:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 3497
;3497:		light = 300;
ADDRLP4 32
CNSTF4 1133903872
ASGNF4
line 3498
;3498:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 3499
;3499:		duration = 1000;
ADDRLP4 48
CNSTI4 1000
ASGNI4
line 3500
;3500:		lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 3501
;3501:		lightColor[1] = 0.75;
ADDRLP4 4+4
CNSTF4 1061158912
ASGNF4
line 3502
;3502:		lightColor[2] = 0.0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 3504
;3503://		CG_BigExplode( origin );
;3504:		if (cg_oldRocket.integer == 0) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $2182
line 3506
;3505:			// explosion sprite animation
;3506:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1103101952
MULF4
ADDF4
ASGNF4
line 3507
;3507:			VectorScale( dir, 64, sprVel );
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
ADDRLP4 68+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1115684864
MULF4
ASGNF4
line 3509
;3508:
;3509:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $2189
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 3510
;3510:		}
LABELV $2182
line 3512
;3511:#if SPECIAL_VIEW_MODES
;3512:		CG_CheckStrongLight(origin, 600, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1142292480
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3515
;3513:#endif
;3514:#if EARTHQUAKE_SYSTEM	// JUHOX: rocket
;3515:		CG_AddEarthquake(origin, 400, 0.4, 0, 0.4, 300);
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1137180672
ARGF4
CNSTF4 1053609165
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1053609165
ARGF4
CNSTF4 1133903872
ARGF4
ADDRGP4 CG_AddEarthquake
CALLV
pop
line 3517
;3516:#endif
;3517:		break;
ADDRGP4 $2141
JUMPV
LABELV $2190
line 3519
;3518:	case WP_RAILGUN:
;3519:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+680
INDIRI4
ASGNI4
line 3520
;3520:		shader = cgs.media.railExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+692
INDIRI4
ASGNI4
line 3521
;3521:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+751220+996
INDIRI4
ASGNI4
line 3522
;3522:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+600
INDIRI4
ASGNI4
line 3523
;3523:		radius = 24;
ADDRLP4 24
CNSTF4 1103101952
ASGNF4
line 3525
;3524:#if SPECIAL_VIEW_MODES
;3525:		CG_CheckStrongLight(origin, 150, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1125515264
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3528
;3526:#endif
;3527:#if EARTHQUAKE_SYSTEM	// JUHOX: railgun
;3528:		CG_AddEarthquake(origin, 400, 0.2, 0, 0.2, 400);
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1137180672
ARGF4
CNSTF4 1045220557
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1045220557
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 CG_AddEarthquake
CALLV
pop
line 3530
;3529:#endif
;3530:		break;
ADDRGP4 $2141
JUMPV
LABELV $2199
line 3532
;3531:	case WP_PLASMAGUN:
;3532:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+680
INDIRI4
ASGNI4
line 3533
;3533:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+696
INDIRI4
ASGNI4
line 3534
;3534:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+751220+996
INDIRI4
ASGNI4
line 3535
;3535:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+600
INDIRI4
ASGNI4
line 3536
;3536:		radius = 16;
ADDRLP4 24
CNSTF4 1098907648
ASGNF4
line 3538
;3537:#if SPECIAL_VIEW_MODES
;3538:		CG_CheckStrongLight(origin, 200, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1128792064
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3540
;3539:#endif
;3540:		break;
ADDRGP4 $2141
JUMPV
LABELV $2208
line 3542
;3541:	case WP_BFG:
;3542:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+684
INDIRI4
ASGNI4
line 3543
;3543:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+712
INDIRI4
ASGNI4
line 3544
;3544:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+751220+992
INDIRI4
ASGNI4
line 3545
;3545:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+592
INDIRI4
ASGNI4
line 3546
;3546:		radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 3547
;3547:		isSprite = qtrue;
ADDRLP4 40
CNSTI4 1
ASGNI4
line 3550
;3548:		// JUHOX: add light for the bfg explosion
;3549:#if 1
;3550:		if (cg_BFGsuperExpl.integer) {
ADDRGP4 cg_BFGsuperExpl+12
INDIRI4
CNSTI4 0
EQI4 $2217
line 3551
;3551:			light = 300;
ADDRLP4 32
CNSTF4 1133903872
ASGNF4
line 3552
;3552:			lightColor[0] = 0.25;
ADDRLP4 4
CNSTF4 1048576000
ASGNF4
line 3553
;3553:			lightColor[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 3554
;3554:			lightColor[2] = 0.5;
ADDRLP4 4+8
CNSTF4 1056964608
ASGNF4
line 3555
;3555:		}
LABELV $2217
line 3558
;3556:#endif
;3557:#if SPECIAL_VIEW_MODES
;3558:		CG_CheckStrongLight(origin, 800, colorWhite);	// JUHOX
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1145569280
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 CG_CheckStrongLight
CALLV
pop
line 3561
;3559:#endif
;3560:#if EARTHQUAKE_SYSTEM	// JUHOX: bfg
;3561:		CG_AddEarthquake(origin, 1000, 0.5, 0, 0.5, 400);
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1148846080
ARGF4
CNSTF4 1056964608
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1056964608
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 CG_AddEarthquake
CALLV
pop
line 3563
;3562:#endif
;3563:		break;
ADDRGP4 $2141
JUMPV
LABELV $2222
line 3565
;3564:	case WP_SHOTGUN:
;3565:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+676
INDIRI4
ASGNI4
line 3566
;3566:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+700
INDIRI4
ASGNI4
line 3567
;3567:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+588
INDIRI4
ASGNI4
line 3568
;3568:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 3569
;3569:		radius = 4;
ADDRLP4 24
CNSTF4 1082130432
ASGNF4
line 3570
;3570:		break;
ADDRGP4 $2141
JUMPV
LABELV $2229
line 3598
;3571:
;3572:#ifdef MISSIONPACK
;3573:	case WP_CHAINGUN:
;3574:		mod = cgs.media.bulletFlashModel;
;3575:		if( soundType == IMPACTSOUND_FLESH ) {
;3576:			sfx = cgs.media.sfx_chghitflesh;
;3577:		} else if( soundType == IMPACTSOUND_METAL ) {
;3578:			sfx = cgs.media.sfx_chghitmetal;
;3579:		} else {
;3580:			sfx = cgs.media.sfx_chghit;
;3581:		}
;3582:		mark = cgs.media.bulletMarkShader;
;3583:
;3584:		r = rand() & 3;
;3585:		if ( r < 2 ) {
;3586:			sfx = cgs.media.sfx_ric1;
;3587:		} else if ( r == 2 ) {
;3588:			sfx = cgs.media.sfx_ric2;
;3589:		} else {
;3590:			sfx = cgs.media.sfx_ric3;
;3591:		}
;3592:
;3593:		radius = 8;
;3594:		break;
;3595:#endif
;3596:
;3597:	case WP_MACHINEGUN:
;3598:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+751220+676
INDIRI4
ASGNI4
line 3599
;3599:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+751220+700
INDIRI4
ASGNI4
line 3600
;3600:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+751220+588
INDIRI4
ASGNI4
line 3602
;3601:
;3602:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3603
;3603:		if ( r == 0 ) {
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $2236
line 3604
;3604:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+751220+976
INDIRI4
ASGNI4
line 3605
;3605:		} else if ( r == 1 ) {
ADDRGP4 $2237
JUMPV
LABELV $2236
ADDRLP4 52
INDIRI4
CNSTI4 1
NEI4 $2240
line 3606
;3606:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+751220+980
INDIRI4
ASGNI4
line 3607
;3607:		} else {
ADDRGP4 $2241
JUMPV
LABELV $2240
line 3608
;3608:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+751220+984
INDIRI4
ASGNI4
line 3609
;3609:		}
LABELV $2241
LABELV $2237
line 3611
;3610:
;3611:		radius = 8;
ADDRLP4 24
CNSTF4 1090519040
ASGNF4
line 3612
;3612:		break;
LABELV $2141
line 3615
;3613:	}
;3614:
;3615:	if ( sfx ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $2248
line 3616
;3616:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3617
;3617:	}
LABELV $2248
line 3624
;3618:
;3619:	//
;3620:	// create the explosion
;3621:	//
;3622:	// JUHOX: handle new bfg super explosion
;3623:#if 1
;3624:	if (weapon == WP_BFG && cg_BFGsuperExpl.integer) {
ADDRFP4 0
INDIRI4
CNSTI4 9
NEI4 $2250
ADDRGP4 cg_BFGsuperExpl+12
INDIRI4
CNSTI4 0
EQI4 $2250
line 3625
;3625:		CG_BFGsuperExpl(origin);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_BFGsuperExpl
CALLV
pop
line 3626
;3626:	}
LABELV $2250
line 3628
;3627:#endif
;3628:	if ( mod ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $2253
line 3629
;3629:		le = CG_MakeExplosion( origin, dir, 
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 84
INDIRP4
ASGNP4
line 3634
;3630:							   mod,	shader,
;3631:							   duration, isSprite );
;3632:	// JUHOX FIXME: no dlights in EFH
;3633:#if ESCAPE_MODE
;3634:	if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $2255
line 3635
;3635:		light = 0;
ADDRLP4 32
CNSTF4 0
ASGNF4
line 3636
;3636:	}
LABELV $2255
line 3638
;3637:#endif
;3638:		le->light = light;
ADDRLP4 44
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 3639
;3639:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 44
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 3640
;3640:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2258
line 3642
;3641:			// colorize with client color
;3642:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 44
INDIRP4
CNSTI4 136
ADDP4
ADDRFP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+96
ADDP4
INDIRB
ASGNB 12
line 3643
;3643:		}
LABELV $2258
line 3644
;3644:	}
LABELV $2253
line 3646
;3645:
;3646:	if (!mark) return;	// JUHOX
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $2262
ADDRGP4 $2137
JUMPV
LABELV $2262
line 3651
;3647:
;3648:	//
;3649:	// impact mark
;3650:	//
;3651:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+751220+600
INDIRI4
NEI4 $2267
ADDRLP4 84
CNSTI4 1
ASGNI4
ADDRGP4 $2268
JUMPV
LABELV $2267
ADDRLP4 84
CNSTI4 0
ASGNI4
LABELV $2268
ADDRLP4 36
ADDRLP4 84
INDIRI4
ASGNI4
line 3652
;3652:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $2269
line 3656
;3653:		float	*color;
;3654:
;3655:		// colorize with client color
;3656:		color = cgs.clientinfo[clientNum].color2;
ADDRLP4 88
ADDRFP4 4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320+108
ADDP4
ASGNP4
line 3657
;3657:		CG_ImpactMark( mark, origin, dir, random()*360, color[0],color[1], color[2],1, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 92
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 92
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 867434496
MULF4
ARGF4
ADDRLP4 96
ADDRLP4 88
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
INDIRF4
ARGF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3658
;3658:	} else {
ADDRGP4 $2270
JUMPV
LABELV $2269
line 3659
;3659:		CG_ImpactMark( mark, origin, dir, random()*360, 1,1,1,1, alphaFade, radius, qfalse );
ADDRLP4 88
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 88
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 88
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 867434496
MULF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3660
;3660:	}
LABELV $2270
line 3661
;3661:}
LABELV $2137
endproc CG_MissileHitWall 104 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 4 20
line 3669
;3662:
;3663:
;3664:/*
;3665:=================
;3666:CG_MissileHitPlayer
;3667:=================
;3668:*/
;3669:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 3670
;3670:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 3674
;3671:
;3672:	// some weapons will make an explosion with the blood, while
;3673:	// others will just make the blood
;3674:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
EQI4 $2276
ADDRLP4 0
INDIRI4
CNSTI4 5
EQI4 $2276
ADDRGP4 $2275
JUMPV
LABELV $2276
line 3682
;3675:	case WP_GRENADE_LAUNCHER:
;3676:	case WP_ROCKET_LAUNCHER:
;3677:#ifdef MISSIONPACK
;3678:	case WP_NAILGUN:
;3679:	case WP_CHAINGUN:
;3680:	case WP_PROX_LAUNCHER:
;3681:#endif
;3682:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3683
;3683:		break;
line 3685
;3684:	default:
;3685:		break;
LABELV $2275
line 3687
;3686:	}
;3687:}
LABELV $2273
endproc CG_MissileHitPlayer 4 20
proc CG_ShotgunPellet 128 28
line 3704
;3688:
;3689:
;3690:
;3691:/*
;3692:============================================================================
;3693:
;3694:SHOTGUN TRACING
;3695:
;3696:============================================================================
;3697:*/
;3698:
;3699:/*
;3700:================
;3701:CG_ShotgunPellet
;3702:================
;3703:*/
;3704:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 3708
;3705:	trace_t		tr;
;3706:	int sourceContentType, destContentType;
;3707:
;3708:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 3710
;3709:
;3710:	sourceContentType = trap_CM_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
ASGNI4
line 3711
;3711:	destContentType = trap_CM_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 68
INDIRI4
ASGNI4
line 3714
;3712:
;3713:	// FIXME: should probably move this cruft into CG_BubbleTrail
;3714:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $2279
line 3715
;3715:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2280
line 3716
;3716:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3717
;3717:		}
line 3718
;3718:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $2280
JUMPV
LABELV $2279
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2284
line 3721
;3719:		trace_t trace;
;3720:
;3721:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3722
;3722:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3723
;3723:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $2285
JUMPV
LABELV $2284
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2287
line 3726
;3724:		trace_t trace;
;3725:
;3726:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 72
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3727
;3727:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 72+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3728
;3728:	}
LABELV $2287
LABELV $2285
LABELV $2280
line 3730
;3729:
;3730:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2291
line 3731
;3731:		return;
ADDRGP4 $2277
JUMPV
LABELV $2291
line 3734
;3732:	}
;3733:
;3734:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
ADDRLP4 0+52
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2294
line 3735
;3735:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 3736
;3736:	} else {
ADDRGP4 $2295
JUMPV
LABELV $2294
line 3737
;3737:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2301
line 3739
;3738:			// SURF_NOIMPACT will not make a flame puff or a mark
;3739:			return;
ADDRGP4 $2277
JUMPV
LABELV $2301
line 3741
;3740:		}
;3741:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2304
line 3742
;3742:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3743
;3743:		} else {
ADDRGP4 $2305
JUMPV
LABELV $2304
line 3744
;3744:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3745
;3745:		}
LABELV $2305
line 3746
;3746:	}
LABELV $2295
line 3747
;3747:}
LABELV $2277
endproc CG_ShotgunPellet 128 28
proc CG_ShotgunPattern 80 12
line 3757
;3748:
;3749:/*
;3750:================
;3751:CG_ShotgunPattern
;3752:
;3753:Perform the same traces the server did to locate the
;3754:hit splashes
;3755:================
;3756:*/
;3757:static void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 3765
;3758:	int			i;
;3759:	float		r, u;
;3760:	vec3_t		end;
;3761:	vec3_t		forward, right, up;
;3762:
;3763:	// derive the right and up vectors from the forward vector, because
;3764:	// the client won't have any other information
;3765:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 3766
;3766:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 3767
;3767:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 3770
;3768:
;3769:	// generate the "random" spread pattern
;3770:	for ( i = 0 ; i < DEFAULT_SHOTGUN_COUNT ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $2312
line 3771
;3771:		r = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 60
INDIRF4
CNSTF4 1182400512
MULF4
ASGNF4
line 3772
;3772:		u = Q_crandom( &seed ) * DEFAULT_SHOTGUN_SPREAD * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 64
INDIRF4
CNSTF4 1182400512
MULF4
ASGNF4
line 3773
;3773:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 20
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
CNSTF4 1207959552
MULF4
ADDF4
ASGNF4
line 3774
;3774:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 3775
;3775:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 3777
;3776:
;3777:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 3778
;3778:	}
LABELV $2313
line 3770
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 15
LTI4 $2312
line 3779
;3779:}
LABELV $2311
endproc CG_ShotgunPattern 80 12
export CG_ShotgunFire
proc CG_ShotgunFire 44 48
line 3786
;3780:
;3781:/*
;3782:==============
;3783:CG_ShotgunFire
;3784:==============
;3785:*/
;3786:void CG_ShotgunFire( entityState_t *es ) {
line 3790
;3787:	vec3_t	v;
;3788:	int		contents;
;3789:
;3790:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3791
;3791:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3792
;3792:	VectorScale( v, 32, v );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
MULF4
ASGNF4
line 3793
;3793:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 3794
;3794:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $2343
line 3798
;3795:		// ragepro can't alpha fade, so don't even bother with smoke
;3796:		vec3_t			up;
;3797:
;3798:		contents = trap_CM_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 3799
;3799:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $2347
line 3800
;3800:			VectorSet( up, 0, 0, 8 );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 28+4
CNSTF4 0
ASGNF4
ADDRLP4 28+8
CNSTF4 1090519040
ASGNF4
line 3801
;3801:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1107296256
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+107656
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+751220+452
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 3802
;3802:		}
LABELV $2347
line 3803
;3803:	}
LABELV $2343
line 3804
;3804:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 3805
;3805:}
LABELV $2332
endproc CG_ShotgunFire 44 48
export CG_Tracer
proc CG_Tracer 216 16
line 3821
;3806:
;3807:/*
;3808:============================================================================
;3809:
;3810:BULLETS
;3811:
;3812:============================================================================
;3813:*/
;3814:
;3815:
;3816:/*
;3817:===============
;3818:CG_Tracer
;3819:===============
;3820:*/
;3821:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 3830
;3822:	vec3_t		forward, right;
;3823:	polyVert_t	verts[4];
;3824:	vec3_t		line;
;3825:	float		len, begin, end;
;3826:	vec3_t		start, finish;
;3827:	vec3_t		midpoint;
;3828:
;3829:	// tracer
;3830:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3831
;3831:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 188
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 188
INDIRF4
ASGNF4
line 3834
;3832:
;3833:	// start at least a little ways from the muzzle
;3834:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $2357
line 3835
;3835:		return;
ADDRGP4 $2354
JUMPV
LABELV $2357
line 3837
;3836:	}
;3837:	begin = 50 + random() * (len - 60);
ADDRLP4 192
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 160
ADDRLP4 192
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 192
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 3838
;3838:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 3839
;3839:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $2360
line 3840
;3840:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 3841
;3841:	}
LABELV $2360
line 3842
;3842:	VectorMA( source, begin, forward, start );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 196
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 3843
;3843:	VectorMA( source, end, forward, finish );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 3845
;3844:
;3845:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109260+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109260+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109260+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3846
;3846:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109260+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109260+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109260+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3848
;3847:
;3848:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109260+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109260+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109260+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 3849
;3849:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 212
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109260+36+24
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109260+36+24+4
INDIRF4
ADDRLP4 212
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109260+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3850
;3850:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3852
;3851:
;3852:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3853
;3853:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 3854
;3854:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 3855
;3855:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 3856
;3856:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 3857
;3857:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 3858
;3858:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 3860
;3859:
;3860:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3861
;3861:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 3862
;3862:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 3863
;3863:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 3864
;3864:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 3865
;3865:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 3866
;3866:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 3868
;3867:
;3868:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3869
;3869:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 3870
;3870:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 3871
;3871:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 3872
;3872:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 3873
;3873:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 3874
;3874:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 3876
;3875:
;3876:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3877
;3877:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 3878
;3878:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 3879
;3879:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 3880
;3880:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 3881
;3881:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 3882
;3882:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 3884
;3883:
;3884:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+751220+388
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 3886
;3885:
;3886:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3887
;3887:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3888
;3888:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
CNSTF4 1056964608
MULF4
ASGNF4
line 3891
;3889:
;3890:	// add the tracer sound
;3891:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+751220+836
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound_fixed
CALLV
pop
line 3893
;3892:
;3893:}
LABELV $2354
endproc CG_Tracer 216 16
proc CG_CalcMuzzlePoint 36 16
line 3901
;3894:
;3895:
;3896:/*
;3897:======================
;3898:CG_CalcMuzzlePoint
;3899:======================
;3900:*/
;3901:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 3906
;3902:	vec3_t		forward;
;3903:	centity_t	*cent;
;3904:	int			anim;
;3905:
;3906:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $2542
line 3907
;3907:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 3908
;3908:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 3909
;3909:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3910
;3910:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 3911
;3911:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $2541
JUMPV
LABELV $2542
line 3914
;3912:	}
;3913:
;3914:	cent = &cg_entities[entityNum];
ADDRLP4 12
ADDRFP4 0
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 3915
;3915:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2550
line 3916
;3916:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2541
JUMPV
LABELV $2550
line 3919
;3917:	}
;3918:
;3919:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 3921
;3920:
;3921:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3922
;3922:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 3923
;3923:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $2554
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $2552
LABELV $2554
line 3924
;3924:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 3925
;3925:	} else {
ADDRGP4 $2553
JUMPV
LABELV $2552
line 3926
;3926:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 3927
;3927:	}
LABELV $2553
line 3929
;3928:
;3929:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1096810496
MULF4
ADDF4
ASGNF4
line 3931
;3930:
;3931:	return qtrue;
CNSTI4 1
RETI4
LABELV $2541
endproc CG_CalcMuzzlePoint 36 16
export CG_Bullet
proc CG_Bullet 96 28
line 3942
;3932:
;3933:}
;3934:
;3935:/*
;3936:======================
;3937:CG_Bullet
;3938:
;3939:Renders bullet effects.
;3940:======================
;3941:*/
;3942:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 3949
;3943:	trace_t trace;
;3944:	int sourceContentType, destContentType;
;3945:	vec3_t		start;
;3946:
;3947:	// if the shooter is currently valid, calc a source point and possibly
;3948:	// do trail effects
;3949:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $2558
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $2558
line 3950
;3950:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $2561
line 3951
;3951:			sourceContentType = trap_CM_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 3952
;3952:			destContentType = trap_CM_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 84
INDIRI4
ASGNI4
line 3955
;3953:
;3954:			// do a complete bubble trail if necessary
;3955:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $2563
ADDRLP4 88
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2563
line 3956
;3956:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3957
;3957:			}
ADDRGP4 $2564
JUMPV
LABELV $2563
line 3959
;3958:			// bubble trail from water into air
;3959:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2565
line 3960
;3960:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3961
;3961:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 0
ARGP4
ADDRLP4 20+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3962
;3962:			}
ADDRGP4 $2566
JUMPV
LABELV $2565
line 3964
;3963:			// bubble trail from air into water
;3964:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 16
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2568
line 3965
;3965:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 20
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3966
;3966:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 20+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3967
;3967:			}
LABELV $2568
LABELV $2566
LABELV $2564
line 3970
;3968:
;3969:			// draw a tracer
;3970:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 92
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 92
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 92
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $2571
line 3971
;3971:				CG_Tracer( start, end );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 3972
;3972:			}
LABELV $2571
line 3973
;3973:		}
LABELV $2561
line 3974
;3974:	}
LABELV $2558
line 3977
;3975:
;3976:	// impact splash and mark
;3977:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $2574
line 3978
;3978:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 3979
;3979:	} else {
ADDRGP4 $2575
JUMPV
LABELV $2574
line 3980
;3980:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3981
;3981:	}
LABELV $2575
line 3983
;3982:
;3983:}
LABELV $2557
endproc CG_Bullet 96 28
bss
align 4
LABELV viewDirList
skip 2400
align 4
LABELV tmpSkipWeapon
skip 64
import CG_AdjustParticles
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_CheckMouseEvents
import CG_TSS_CheckKeyEvents
import CG_TSS_MouseEvent
import CG_TSS_KeyEvent
import CG_TSS_CloseInterface
import CG_TSS_OpenInterface
import CG_TSS_DrawInterface
import CG_TSS_SPrintTacticalMeasure
import CG_TSS_Update
import CG_TSS_SaveInterface
import CG_TSS_LoadInterface
import CG_TSS_InitInterface
import TSS_SetPalette
import TSS_GetPalette
import CG_TSS_StrategyNameChanged
import CG_TSS_SetSearchPattern
import CG_TSS_CreateNewStrategy
import CG_TSS_FreePaletteSlot
import CG_TSS_SavePaletteSlotIfNeeded
import CG_TSS_LoadPaletteSlot
import CG_TSS_GetSortIndexByID
import CG_TSS_GetSortedSlot
import CG_TSS_GetSlotByName
import CG_TSS_GetSlotByID
import CG_TSS_NumStrategiesInStock
import TSSFS_SaveStrategyStock
import TSSFS_LoadStrategyStock
import TSSFS_LoadStrategy
import TSSFS_SaveStrategy
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_BFGsuperExpl
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_DrawLightBlobs
import CG_CheckStrongLight
import CG_AddLightningMarks
import CG_AddNearbox
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $2189
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $2118
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $2111
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 101
byte 1 97
byte 1 114
byte 1 116
byte 1 104
byte 1 113
byte 1 117
byte 1 97
byte 1 107
byte 1 101
byte 1 49
byte 1 48
byte 1 48
byte 1 48
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1951
byte 1 78
byte 1 111
byte 1 32
byte 1 102
byte 1 108
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 10
byte 1 0
align 1
LABELV $1944
byte 1 108
byte 1 102
byte 1 101
byte 1 109
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 37
byte 1 102
byte 1 32
byte 1 37
byte 1 102
byte 1 32
byte 1 37
byte 1 102
byte 1 32
byte 1 37
byte 1 102
byte 1 32
byte 1 37
byte 1 102
byte 1 32
byte 1 37
byte 1 102
byte 1 0
align 1
LABELV $1916
byte 1 110
byte 1 111
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 32
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1506
byte 1 101
byte 1 102
byte 1 104
byte 1 100
byte 1 101
byte 1 98
byte 1 117
byte 1 103
byte 1 115
byte 1 101
byte 1 103
byte 1 32
byte 1 45
byte 1 49
byte 1 0
align 1
LABELV $1462
byte 1 101
byte 1 102
byte 1 104
byte 1 100
byte 1 101
byte 1 98
byte 1 117
byte 1 103
byte 1 115
byte 1 101
byte 1 103
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $1111
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $1075
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $1062
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $915
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 71
byte 1 108
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $842
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 103
byte 1 115
byte 1 112
byte 1 105
byte 1 110
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $840
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 103
byte 1 115
byte 1 112
byte 1 105
byte 1 110
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $830
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 103
byte 1 115
byte 1 112
byte 1 105
byte 1 110
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $666
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 95
byte 1 108
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $662
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 95
byte 1 115
byte 1 109
byte 1 97
byte 1 108
byte 1 108
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $646
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $639
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $636
byte 1 98
byte 1 102
byte 1 103
byte 1 83
byte 1 117
byte 1 112
byte 1 101
byte 1 114
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 0
align 1
LABELV $633
byte 1 98
byte 1 102
byte 1 103
byte 1 76
byte 1 70
byte 1 76
byte 1 105
byte 1 110
byte 1 101
byte 1 0
align 1
LABELV $630
byte 1 98
byte 1 102
byte 1 103
byte 1 76
byte 1 70
byte 1 83
byte 1 116
byte 1 97
byte 1 114
byte 1 0
align 1
LABELV $627
byte 1 98
byte 1 102
byte 1 103
byte 1 76
byte 1 70
byte 1 82
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $624
byte 1 98
byte 1 102
byte 1 103
byte 1 76
byte 1 70
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $621
byte 1 98
byte 1 102
byte 1 103
byte 1 76
byte 1 70
byte 1 71
byte 1 108
byte 1 97
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $618
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $615
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $614
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $612
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $605
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $602
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $601
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $599
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $596
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $593
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $592
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $590
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 47
byte 1 115
byte 1 101
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $587
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $584
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 47
byte 1 98
byte 1 97
byte 1 108
byte 1 108
byte 1 37
byte 1 99
byte 1 37
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $572
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 47
byte 1 109
byte 1 111
byte 1 110
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 108
byte 1 102
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $571
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 117
byte 1 112
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 47
byte 1 115
byte 1 109
byte 1 97
byte 1 108
byte 1 108
byte 1 95
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $569
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $566
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $564
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $561
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $560
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $559
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $557
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $555
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $552
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 103
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $550
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 82
byte 1 111
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $547
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $544
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 112
byte 1 117
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $541
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 114
byte 1 101
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $538
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $535
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 101
byte 1 97
byte 1 115
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $532
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $529
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $526
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $524
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 100
byte 1 105
byte 1 115
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $521
byte 1 100
byte 1 105
byte 1 115
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $518
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $515
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $512
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $509
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $506
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 72
byte 1 117
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $503
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $502
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $501
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $499
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $498
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $494
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $491
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $490
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $489
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $475
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $373
byte 1 102
byte 1 108
byte 1 97
byte 1 109
byte 1 101
byte 1 49
byte 1 0
