code
proc CG_DrawClientScore 1080 36
file "..\..\..\..\code\cgame\cg_scoreboard.c"
line 72
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_scoreboard -- draw the scoreboard on top of the game screen
;4:#include "cg_local.h"
;5:
;6:
;7:#define	SCOREBOARD_X		(0)
;8:
;9:#if !RESPAWN_DELAY	// JUHOX: make room for the "respawning in x ..." message
;10:#define SB_HEADER			86
;11:#else
;12:#define SB_HEADER			107
;13:#endif
;14:#define SB_TOP				(SB_HEADER+32)
;15:
;16:// Where the status bar starts, so we don't overwrite it
;17:#define SB_STATUSBAR		420
;18:
;19:#define SB_NORMAL_HEIGHT	40
;20:#define SB_INTER_HEIGHT		16 // interleaved height
;21:
;22:#define SB_MAXCLIENTS_NORMAL  ((SB_STATUSBAR - SB_TOP) / SB_NORMAL_HEIGHT)
;23:#define SB_MAXCLIENTS_INTER   ((SB_STATUSBAR - SB_TOP) / SB_INTER_HEIGHT - 1)
;24:
;25:// Used when interleaved
;26:
;27:
;28:
;29:#define SB_LEFT_BOTICON_X	(SCOREBOARD_X+0)
;30:#define SB_LEFT_HEAD_X		(SCOREBOARD_X+32)
;31:#define SB_RIGHT_BOTICON_X	(SCOREBOARD_X+64)
;32:#define SB_RIGHT_HEAD_X		(SCOREBOARD_X+96)
;33:// Normal
;34:#define SB_BOTICON_X		(SCOREBOARD_X+32)
;35:#define SB_HEAD_X			(SCOREBOARD_X+64)
;36:
;37:#define SB_SCORELINE_X		112
;38:
;39:#define SB_RATING_WIDTH	    (6 * BIGCHAR_WIDTH) // width 6
;40:#if 0	// JUHOX: new header positions
;41:#define SB_SCORE_X			(SB_SCORELINE_X + BIGCHAR_WIDTH) // width 6
;42:#define SB_RATING_X			(SB_SCORELINE_X + 6 * BIGCHAR_WIDTH) // width 6
;43:#define SB_PING_X			(SB_SCORELINE_X + 12 * BIGCHAR_WIDTH + 8) // width 5
;44:#define SB_TIME_X			(SB_SCORELINE_X + 17 * BIGCHAR_WIDTH + 8) // width 5
;45:#define SB_NAME_X			(SB_SCORELINE_X + 22 * BIGCHAR_WIDTH) // width 15
;46:#else
;47:#define SB_SCORE_X			(SB_SCORELINE_X + 1.5 * BIGCHAR_WIDTH) // width 6
;48:#define SB_PING_X			(SB_SCORELINE_X + 14.5 * BIGCHAR_WIDTH) // width 5
;49:#define SB_TIME_X			(SB_SCORELINE_X + 19.5 * BIGCHAR_WIDTH) // width 5
;50:#define SB_NAME_X			(SB_SCORELINE_X + 24 * BIGCHAR_WIDTH) // width 15
;51:#endif
;52:
;53:// The new and improved score board
;54://
;55:// In cases where the number of clients is high, the score board heads are interleaved
;56:// here's the layout
;57:
;58://
;59://	0   32   80  112  144   240  320  400   <-- pixel position
;60://  bot head bot head score ping time name
;61://  
;62://  wins/losses are drawn on bot icon now
;63:
;64:static qboolean localClient; // true if local client has been displayed
;65:
;66:
;67:							 /*
;68:=================
;69:CG_DrawScoreboard
;70:=================
;71:*/
;72:static void CG_DrawClientScore( int y, score_t *score, float *color, float fade, qboolean largeFormat ) {
line 79
;73:	char	string[1024];
;74:	vec3_t	headAngles;
;75:	clientInfo_t	*ci;
;76:	int iconx, headx;
;77:	int xx;	// JUHOX
;78:
;79:	if ( score->client < 0 || score->client >= cgs.maxclients ) {
ADDRLP4 1052
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 0
LTI4 $128
ADDRLP4 1052
INDIRI4
ADDRGP4 cgs+31480
INDIRI4
LTI4 $125
LABELV $128
line 80
;80:		Com_Printf( "Bad score->client: %i\n", score->client );
ADDRGP4 $129
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 81
;81:		return;
ADDRGP4 $124
JUMPV
LABELV $125
line 85
;82:	}
;83:	
;84:#if 1	// JUHOX: STU scoreboard
;85:	xx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 87
;86:#if MONSTER_MODE
;87:	if (cgs.gametype >= GT_STU) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
LTI4 $130
line 88
;88:		xx = 4 * BIGCHAR_WIDTH;
ADDRLP4 16
CNSTI4 64
ASGNI4
line 89
;89:	}
LABELV $130
line 93
;90:#endif
;91:#endif
;92:
;93:	ci = &cgs.clientinfo[score->client];
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 94
;94:	if (cg.intermissionMusicStarted) ci->powerups = 0;	// JUHOX: remove flags
ADDRGP4 cg+118720
INDIRI4
CNSTI4 0
EQI4 $134
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
CNSTI4 0
ASGNI4
LABELV $134
line 96
;95:
;96:	iconx = SB_BOTICON_X + (SB_RATING_WIDTH / 2);
ADDRLP4 20
CNSTI4 80
ASGNI4
line 97
;97:	headx = SB_HEAD_X + (SB_RATING_WIDTH / 2);
ADDRLP4 1048
CNSTI4 112
ASGNI4
line 99
;98:
;99:	iconx -= xx;	// JUHOX
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
ASGNI4
line 100
;100:	headx -= xx;	// JUHOX
ADDRLP4 1048
ADDRLP4 1048
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
ASGNI4
line 103
;101:
;102:	// draw the handicap or bot skill marker (unless player has flag)
;103:	if ( ci->powerups & ( 1 << PW_NEUTRALFLAG ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $137
line 104
;104:		if( largeFormat ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $139
line 105
;105:			CG_DrawFlagModel( iconx, y - ( 32 - BIGCHAR_HEIGHT ) / 2, 32, 32, TEAM_FREE, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 106
;106:		}
ADDRGP4 $138
JUMPV
LABELV $139
line 107
;107:		else {
line 108
;108:			CG_DrawFlagModel( iconx, y, 16, 16, TEAM_FREE, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 109
;109:		}
line 110
;110:	} else if ( ci->powerups & ( 1 << PW_REDFLAG ) ) {
ADDRGP4 $138
JUMPV
LABELV $137
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $141
line 111
;111:		if( largeFormat ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $143
line 112
;112:			CG_DrawFlagModel( iconx, y - ( 32 - BIGCHAR_HEIGHT ) / 2, 32, 32, TEAM_RED, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 113
;113:		}
ADDRGP4 $142
JUMPV
LABELV $143
line 114
;114:		else {
line 115
;115:			CG_DrawFlagModel( iconx, y, 16, 16, TEAM_RED, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 1
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 116
;116:		}
line 117
;117:	} else if ( ci->powerups & ( 1 << PW_BLUEFLAG ) ) {
ADDRGP4 $142
JUMPV
LABELV $141
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $145
line 118
;118:		if( largeFormat ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $147
line 119
;119:			CG_DrawFlagModel( iconx, y - ( 32 - BIGCHAR_HEIGHT ) / 2, 32, 32, TEAM_BLUE, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 120
;120:		}
ADDRGP4 $146
JUMPV
LABELV $147
line 121
;121:		else {
line 122
;122:			CG_DrawFlagModel( iconx, y, 16, 16, TEAM_BLUE, qfalse );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
CNSTI4 2
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawFlagModel
CALLV
pop
line 123
;123:		}
line 124
;124:	} else {
ADDRGP4 $146
JUMPV
LABELV $145
line 125
;125:		if ( ci->botSkill > 0 && ci->botSkill <= 5 ) {
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
LEI4 $149
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 5
GTI4 $149
line 126
;126:			if ( cg_drawIcons.integer ) {
ADDRGP4 cg_drawIcons+12
INDIRI4
CNSTI4 0
EQI4 $150
line 127
;127:				if( largeFormat ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $154
line 128
;128:					CG_DrawPic( iconx, y - ( 32 - BIGCHAR_HEIGHT ) / 2, 32, 32, cgs.media.botSkillShaders[ ci->botSkill - 1 ] );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+751220+556-4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 129
;129:				}
ADDRGP4 $150
JUMPV
LABELV $154
line 130
;130:				else {
line 131
;131:					CG_DrawPic( iconx, y, 16, 16, cgs.media.botSkillShaders[ ci->botSkill - 1 ] );
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+751220+556-4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 132
;132:				}
line 133
;133:			}
line 134
;134:		} else if ( ci->handicap < 100 ) {
ADDRGP4 $150
JUMPV
LABELV $149
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 100
GEI4 $162
line 135
;135:			Com_sprintf( string, sizeof( string ), "%i", ci->handicap );
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $164
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 136
;136:			if ( cgs.gametype == GT_TOURNAMENT )
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
NEI4 $165
line 137
;137:				CG_DrawSmallStringColor( iconx, y - SMALLCHAR_HEIGHT/2, string, color );
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 8
SUBI4
ARGI4
ADDRLP4 24
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
ADDRGP4 $166
JUMPV
LABELV $165
line 139
;138:			else
;139:				CG_DrawSmallStringColor( iconx, y, string, color );
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
LABELV $166
line 140
;140:		}
LABELV $162
LABELV $150
line 143
;141:
;142:		// draw the wins / losses
;143:		if ( cgs.gametype == GT_TOURNAMENT ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
NEI4 $168
line 144
;144:			Com_sprintf( string, sizeof( string ), "%i/%i", ci->wins, ci->losses );
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $171
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 145
;145:			if( ci->handicap < 100 && !ci->botSkill ) {
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 100
GEI4 $172
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
NEI4 $172
line 146
;146:				CG_DrawSmallStringColor( iconx, y + SMALLCHAR_HEIGHT/2, string, color );
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 24
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 147
;147:			}
ADDRGP4 $173
JUMPV
LABELV $172
line 148
;148:			else {
line 149
;149:				CG_DrawSmallStringColor( iconx, y, string, color );
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawSmallStringColor
CALLV
pop
line 150
;150:			}
LABELV $173
line 151
;151:		}
LABELV $168
line 152
;152:	}
LABELV $146
LABELV $142
LABELV $138
line 155
;153:
;154:	// draw the face
;155:	VectorClear( headAngles );
ADDRLP4 1056
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 1056
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 1056
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 1056
INDIRF4
ASGNF4
line 156
;156:	headAngles[YAW] = 180;
ADDRLP4 4+4
CNSTF4 1127481344
ASGNF4
line 157
;157:	if( largeFormat ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $177
line 158
;158:		CG_DrawHead( headx, y - ( ICON_SIZE - BIGCHAR_HEIGHT ) / 2, ICON_SIZE, ICON_SIZE, 
ADDRLP4 1048
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 16
SUBI4
CVIF4 4
ARGF4
CNSTF4 1111490560
ARGF4
CNSTF4 1111490560
ARGF4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 160
;159:			score->client, headAngles );
;160:	}
ADDRGP4 $178
JUMPV
LABELV $177
line 161
;161:	else {
line 162
;162:		CG_DrawHead( headx, y, 16, 16, score->client, headAngles );
ADDRLP4 1048
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1098907648
ARGF4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 163
;163:	}
LABELV $178
line 189
;164:
;165:#ifdef MISSIONPACK
;166:	// draw the team task
;167:	if ( ci->teamTask != TEAMTASK_NONE ) {
;168:		if ( ci->teamTask == TEAMTASK_OFFENSE ) {
;169:			CG_DrawPic( headx + 48, y, 16, 16, cgs.media.assaultShader );
;170:		}
;171:		else if ( ci->teamTask == TEAMTASK_DEFENSE ) {
;172:			CG_DrawPic( headx + 48, y, 16, 16, cgs.media.defendShader );
;173:		}
;174:	}
;175:#endif
;176:	// draw the score line
;177:#if 0	// JUHOX: draw the new score line (extended by the 'killed'-count)
;178:	if ( score->ping == -1 ) {
;179:		Com_sprintf(string, sizeof(string),
;180:			" connecting    %s", ci->name);
;181:	} else if ( ci->team == TEAM_SPECTATOR ) {
;182:		Com_sprintf(string, sizeof(string),
;183:			" SPECT %3i %4i %s", score->ping, score->time, ci->name);
;184:	} else {
;185:		Com_sprintf(string, sizeof(string),
;186:			"%5i %4i %4i %s", score->score, score->ping, score->time, ci->name);
;187:	}
;188:#else
;189:	if (score->ping == -1) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $179
line 190
;190:		Com_sprintf(
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $181
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 193
;191:			string, sizeof(string), " connecting      %s", ci->name
;192:		);
;193:	}
ADDRGP4 $180
JUMPV
LABELV $179
line 194
;194:	else if (ci->team == TEAM_SPECTATOR) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 3
NEI4 $182
line 195
;195:		Com_sprintf(
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $184
ARGP4
ADDRLP4 1060
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 1060
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 1060
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 198
;196:			string, sizeof(string), " SPECT  %4i %4i %s", score->ping, score->time, ci->name
;197:		);
;198:	}
ADDRGP4 $183
JUMPV
LABELV $182
line 200
;199:#if MONSTER_MODE
;200:	else if (cgs.gametype >= GT_STU) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
LTI4 $185
line 201
;201:		Com_sprintf(
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $188
ARGP4
ADDRLP4 1060
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 1060
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 1060
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 1060
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 1060
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 206
;202:			string, sizeof(string), "%7i:%-3i %4i %4i %s",
;203:			score->score, score->killed,
;204:			score->ping, score->time, ci->name
;205:		);		
;206:	}
ADDRGP4 $186
JUMPV
LABELV $185
line 208
;207:#endif
;208:	else {
line 209
;209:		Com_sprintf(
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $189
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $194
ADDRLP4 1060
ADDRGP4 $191
ASGNP4
ADDRGP4 $195
JUMPV
LABELV $194
ADDRLP4 1060
ADDRGP4 $192
ASGNP4
LABELV $195
ADDRLP4 1060
INDIRP4
ARGP4
ADDRLP4 1064
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 1064
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 1064
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 1064
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 214
;210:			string, sizeof(string), "%3i%s%-3i %4i %4i %s",
;211:			score->score, cgs.gametype < GT_TEAM? ":" : "-", score->killed,
;212:			score->ping, score->time, ci->name
;213:		);
;214:	}
LABELV $186
LABELV $183
LABELV $180
line 218
;215:#endif
;216:
;217:	// highlight your position
;218:	if ( score->client == cg.snap->ps.clientNum ) {
ADDRFP4 4
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $196
line 222
;219:		float	hcolor[4];
;220:		int		rank;
;221:
;222:		localClient = qtrue;
ADDRGP4 localClient
CNSTI4 1
ASGNI4
line 224
;223:
;224:		if ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR 
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $203
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $199
LABELV $203
line 225
;225:			|| cgs.gametype >= GT_TEAM ) {
line 226
;226:			rank = -1;
ADDRLP4 1076
CNSTI4 -1
ASGNI4
line 227
;227:		} else {
ADDRGP4 $200
JUMPV
LABELV $199
line 228
;228:			rank = cg.snap->ps.persistant[PERS_RANK] & ~RANK_TIED_FLAG;
ADDRLP4 1076
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 229
;229:		}
LABELV $200
line 230
;230:		if ( rank == 0 ) {
ADDRLP4 1076
INDIRI4
CNSTI4 0
NEI4 $205
line 231
;231:			hcolor[0] = 0;
ADDRLP4 1060
CNSTF4 0
ASGNF4
line 232
;232:			hcolor[1] = 0;
ADDRLP4 1060+4
CNSTF4 0
ASGNF4
line 233
;233:			hcolor[2] = 0.7f;
ADDRLP4 1060+8
CNSTF4 1060320051
ASGNF4
line 234
;234:		} else if ( rank == 1 ) {
ADDRGP4 $206
JUMPV
LABELV $205
ADDRLP4 1076
INDIRI4
CNSTI4 1
NEI4 $209
line 235
;235:			hcolor[0] = 0.7f;
ADDRLP4 1060
CNSTF4 1060320051
ASGNF4
line 236
;236:			hcolor[1] = 0;
ADDRLP4 1060+4
CNSTF4 0
ASGNF4
line 237
;237:			hcolor[2] = 0;
ADDRLP4 1060+8
CNSTF4 0
ASGNF4
line 238
;238:		} else if ( rank == 2 ) {
ADDRGP4 $210
JUMPV
LABELV $209
ADDRLP4 1076
INDIRI4
CNSTI4 2
NEI4 $213
line 239
;239:			hcolor[0] = 0.7f;
ADDRLP4 1060
CNSTF4 1060320051
ASGNF4
line 240
;240:			hcolor[1] = 0.7f;
ADDRLP4 1060+4
CNSTF4 1060320051
ASGNF4
line 241
;241:			hcolor[2] = 0;
ADDRLP4 1060+8
CNSTF4 0
ASGNF4
line 242
;242:		} else {
ADDRGP4 $214
JUMPV
LABELV $213
line 243
;243:			hcolor[0] = 0.7f;
ADDRLP4 1060
CNSTF4 1060320051
ASGNF4
line 244
;244:			hcolor[1] = 0.7f;
ADDRLP4 1060+4
CNSTF4 1060320051
ASGNF4
line 245
;245:			hcolor[2] = 0.7f;
ADDRLP4 1060+8
CNSTF4 1060320051
ASGNF4
line 246
;246:		}
LABELV $214
LABELV $210
LABELV $206
line 248
;247:
;248:		hcolor[3] = fade * 0.7;
ADDRLP4 1060+12
ADDRFP4 12
INDIRF4
CNSTF4 1060320051
MULF4
ASGNF4
line 253
;249:#if 0	// JUHOX: draw a longer bar
;250:		CG_FillRect( SB_SCORELINE_X + BIGCHAR_WIDTH + (SB_RATING_WIDTH / 2), y, 
;251:			640 - SB_SCORELINE_X - BIGCHAR_WIDTH, BIGCHAR_HEIGHT+1, hcolor );
;252:#else
;253:		CG_FillRect( SB_SCORELINE_X + (SB_RATING_WIDTH / 2) - xx, y, 
CNSTI4 160
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1140850688
ARGF4
CNSTF4 1099431936
ARGF4
ADDRLP4 1060
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 256
;254:			640 - SB_SCORELINE_X - BIGCHAR_WIDTH, BIGCHAR_HEIGHT+1, hcolor );
;255:#endif
;256:	}
LABELV $196
line 261
;257:
;258:#if 0	// JUHOX: use another color for dead players
;259:	CG_DrawBigString( SB_SCORELINE_X + (SB_RATING_WIDTH / 2), y, string, fade );
;260:#else
;261:	if (score->time < 0) {
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
GEI4 $220
line 264
;262:		vec4_t dcolor;
;263:
;264:		dcolor[0] = 1;
ADDRLP4 1060
CNSTF4 1065353216
ASGNF4
line 265
;265:		dcolor[1] = 0.7;
ADDRLP4 1060+4
CNSTF4 1060320051
ASGNF4
line 266
;266:		dcolor[2] = 0;
ADDRLP4 1060+8
CNSTF4 0
ASGNF4
line 267
;267:		dcolor[3] = fade;
ADDRLP4 1060+12
ADDRFP4 12
INDIRF4
ASGNF4
line 268
;268:		CG_DrawBigStringColor(SB_SCORELINE_X + (SB_RATING_WIDTH / 2) - xx, y, string, dcolor);
CNSTI4 160
ADDRLP4 16
INDIRI4
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 1060
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 269
;269:	}
ADDRGP4 $221
JUMPV
LABELV $220
line 270
;270:	else {
line 271
;271:		CG_DrawBigString( SB_SCORELINE_X + (SB_RATING_WIDTH / 2) - xx, y, string, fade );
CNSTI4 160
ADDRLP4 16
INDIRI4
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 272
;272:	}
LABELV $221
line 281
;273:#endif
;274:
;275:	// add the "ready" marker for intermission exiting
;276:#if 0	// JUHOX: STAT_CLIENTS_READY now done via configstring
;277:	if ( cg.snap->ps.stats[ STAT_CLIENTS_READY ] & ( 1 << score->client ) ) {
;278:		CG_DrawBigStringColor( iconx, y, "READY", color );
;279:	}
;280:#else
;281:	{
line 284
;282:		const char* cs;
;283:
;284:		cs = CG_ConfigString(CS_CLIENTS_READY);
CNSTI4 712
ARGI4
ADDRLP4 1064
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 1060
ADDRLP4 1064
INDIRP4
ASGNP4
line 285
;285:		if (strlen(cs) >= MAX_CLIENTS/4) {
ADDRLP4 1060
INDIRP4
ARGP4
ADDRLP4 1068
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 1068
INDIRI4
CNSTI4 16
LTI4 $225
line 288
;286:			int cl;
;287:
;288:			cl = score->client;
ADDRLP4 1072
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 289
;289:			if ((cs[cl/4] - 'A') & (1 << (cl & 3))) {
ADDRLP4 1076
ADDRLP4 1072
INDIRI4
ASGNI4
ADDRLP4 1076
INDIRI4
CNSTI4 4
DIVI4
ADDRLP4 1060
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 65
SUBI4
CNSTI4 1
ADDRLP4 1076
INDIRI4
CNSTI4 3
BANDI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $227
line 290
;290:				CG_DrawBigStringColor(iconx, y, "READY", color);
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $229
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 291
;291:				return;
ADDRGP4 $124
JUMPV
LABELV $227
line 293
;292:			}
;293:		}
LABELV $225
line 294
;294:	}
line 297
;295:#endif
;296:#if 1	// JUHOX: draw the glass cloaking marker
;297:	/*else*/ if (ci->usesGlassCloaking) {
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
EQI4 $230
line 298
;298:		CG_DrawBigStringColor(iconx, y, "GC", color);
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 $232
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 299
;299:	}
LABELV $230
line 301
;300:#endif
;301:}
LABELV $124
endproc CG_DrawClientScore 1080 36
proc CG_TeamScoreboard 44 20
line 308
;302:
;303:/*
;304:=================
;305:CG_TeamScoreboard
;306:=================
;307:*/
;308:static int CG_TeamScoreboard( int y, team_t team, float fade, int maxClients, int lineHeight ) {
line 315
;309:	int		i;
;310:	score_t	*score;
;311:	float	color[4];
;312:	int		count;
;313:	clientInfo_t	*ci;
;314:
;315:	color[0] = color[1] = color[2] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 16+8
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 32
INDIRF4
ASGNF4
line 316
;316:	color[3] = fade;
ADDRLP4 16+12
ADDRFP4 8
INDIRF4
ASGNF4
line 318
;317:
;318:	count = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 319
;319:	for ( i = 0 ; i < cg.numScores && count < maxClients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $240
JUMPV
LABELV $237
line 320
;320:		score = &cg.scores[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+113528
ADDP4
ASGNP4
line 321
;321:		ci = &cgs.clientinfo[ score->client ];
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 323
;322:
;323:		if ( team != ci->team ) {
ADDRFP4 4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
EQI4 $244
line 324
;324:			continue;
ADDRGP4 $238
JUMPV
LABELV $244
line 327
;325:		}
;326:
;327:		CG_DrawClientScore( y + lineHeight * count, score, color, fade, lineHeight == SB_NORMAL_HEIGHT );
ADDRLP4 40
ADDRFP4 16
INDIRI4
ASGNI4
ADDRFP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRFP4 8
INDIRF4
ARGF4
ADDRLP4 40
INDIRI4
CNSTI4 40
NEI4 $247
ADDRLP4 36
CNSTI4 1
ASGNI4
ADDRGP4 $248
JUMPV
LABELV $247
ADDRLP4 36
CNSTI4 0
ASGNI4
LABELV $248
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 CG_DrawClientScore
CALLV
pop
line 329
;328:
;329:		count++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 330
;330:	}
LABELV $238
line 319
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $240
ADDRLP4 4
INDIRI4
ADDRGP4 cg+113512
INDIRI4
GEI4 $249
ADDRLP4 0
INDIRI4
ADDRFP4 12
INDIRI4
LTI4 $237
LABELV $249
line 332
;331:
;332:	return count;
ADDRLP4 0
INDIRI4
RETI4
LABELV $233
endproc CG_TeamScoreboard 44 20
data
align 4
LABELV $433
byte 4 0
byte 4 0
byte 4 0
byte 4 1056964608
align 4
LABELV $618
byte 4 1065353216
byte 4 1060320051
byte 4 0
byte 4 1065353216
export CG_DrawOldScoreboard
code
proc CG_DrawOldScoreboard 880 36
line 342
;333:}
;334:
;335:/*
;336:=================
;337:CG_DrawScoreboard
;338:
;339:Draw the normal in-game scoreboard
;340:=================
;341:*/
;342:qboolean CG_DrawOldScoreboard( void ) {
line 356
;343:	int		x, y, w, i, n1, n2;
;344:	float	fade;
;345:	float	*fadeColor;
;346:#if 0	// JUHOX
;347:	char	*s;
;348:#else
;349:	const char* s;
;350:#endif
;351:	int maxClients;
;352:	int lineHeight;
;353:	int topBorderSize, bottomBorderSize;
;354:
;355:#if MAPLENSFLARES	// JUHOX: don't draw scoreboard in lens flare editor
;356:	if (cgs.editMode == EM_mlf) return qfalse;
ADDRGP4 cgs+31684
INDIRI4
CNSTI4 1
NEI4 $251
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $251
line 360
;357:#endif
;358:
;359:	// don't draw amuthing if the menu or console is up
;360:	if ( cg_paused.integer ) {
ADDRGP4 cg_paused+12
INDIRI4
CNSTI4 0
EQI4 $254
line 361
;361:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 362
;362:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $254
line 365
;363:	}
;364:
;365:	if ( cgs.gametype == GT_SINGLE_PLAYER && cg.predictedPlayerState.pm_type == PM_INTERMISSION ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 2
NEI4 $258
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $258
line 366
;366:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 367
;367:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $258
line 371
;368:	}
;369:
;370:#if 1	// JUHOX: if at the intermission play an appropriate music
;371:	if (cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $264
line 372
;372:		if (!cg.intermissionMusicStarted) {
ADDRGP4 cg+118720
INDIRI4
CNSTI4 0
NEI4 $265
line 375
;373:			qboolean winning, loosing;
;374:			
;375:			winning = loosing = qfalse;
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
ADDRLP4 60
INDIRI4
ASGNI4
ADDRLP4 52
ADDRLP4 60
INDIRI4
ASGNI4
line 376
;376:			if (cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $271
line 377
;377:				if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $272
line 378
;378:					if (cg.snap->ps.persistant[PERS_RANK] <= 0) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 0
GTI4 $277
line 379
;379:						winning = qtrue;
ADDRLP4 52
CNSTI4 1
ASGNI4
line 380
;380:					}
ADDRGP4 $272
JUMPV
LABELV $277
line 381
;381:					else {
line 382
;382:						loosing = qtrue;
ADDRLP4 56
CNSTI4 1
ASGNI4
line 383
;383:					}
line 384
;384:				}
line 385
;385:			}
ADDRGP4 $272
JUMPV
LABELV $271
line 387
;386:#if MONSTER_MODE
;387:			else if (cgs.gametype == GT_STU) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
NEI4 $280
line 388
;388:				if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $281
line 389
;389:					if (cgs.artefacts > 0 && cgs.artefacts < 999) {
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 0
LEI4 $286
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 999
GEI4 $286
line 390
;390:						winning = (cgs.scores1 >= cgs.artefacts);
ADDRGP4 cgs+35124
INDIRI4
ADDRGP4 cgs+31848
INDIRI4
LTI4 $293
ADDRLP4 64
CNSTI4 1
ASGNI4
ADDRGP4 $294
JUMPV
LABELV $293
ADDRLP4 64
CNSTI4 0
ASGNI4
LABELV $294
ADDRLP4 52
ADDRLP4 64
INDIRI4
ASGNI4
line 391
;391:						loosing = !winning;
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $296
ADDRLP4 68
CNSTI4 1
ASGNI4
ADDRGP4 $297
JUMPV
LABELV $296
ADDRLP4 68
CNSTI4 0
ASGNI4
LABELV $297
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 392
;392:					}
ADDRGP4 $281
JUMPV
LABELV $286
line 393
;393:					else if (CG_ConfigString(CS_HIGHSCORETEXT)[0]) {
CNSTI4 710
ARGI4
ADDRLP4 64
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $281
line 394
;394:						winning = qtrue;
ADDRLP4 52
CNSTI4 1
ASGNI4
line 395
;395:					}
line 396
;396:				}
line 397
;397:			}
ADDRGP4 $281
JUMPV
LABELV $280
line 400
;398:#endif
;399:#if ESCAPE_MODE
;400:			else if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $300
line 403
;401:				long limit;
;402:
;403:				limit = atoi(CG_ConfigString(CS_EFH_GOAL_DISTANCE));
CNSTI4 718
ARGI4
ADDRLP4 68
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 64
ADDRLP4 72
INDIRI4
ASGNI4
line 404
;404:				if (limit <= 0) {
ADDRLP4 64
INDIRI4
CNSTI4 0
GTI4 $303
line 405
;405:					limit = cgs.distanceLimit;
ADDRLP4 64
ADDRGP4 cgs+31860
INDIRI4
ASGNI4
line 406
;406:				}
LABELV $303
line 408
;407:
;408:				if (limit > 0) {
ADDRLP4 64
INDIRI4
CNSTI4 0
LEI4 $306
line 410
;409:					if (
;410:						atoi(CG_ConfigString(CS_EFH_COVERED_DISTANCE)) >= limit
CNSTI4 722
ARGI4
ADDRLP4 76
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 64
INDIRI4
LTI4 $308
line 411
;411:					) {
line 412
;412:						winning = qtrue;
ADDRLP4 52
CNSTI4 1
ASGNI4
line 413
;413:					}
ADDRGP4 $301
JUMPV
LABELV $308
line 414
;414:					else {
line 415
;415:						loosing = qtrue;
ADDRLP4 56
CNSTI4 1
ASGNI4
line 416
;416:					}
line 417
;417:				}
ADDRGP4 $301
JUMPV
LABELV $306
line 418
;418:				else if (CG_ConfigString(CS_HIGHSCORETEXT)[0]) {
CNSTI4 710
ARGI4
ADDRLP4 76
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 76
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $301
line 419
;419:					winning = qtrue;
ADDRLP4 52
CNSTI4 1
ASGNI4
line 420
;420:				}
line 421
;421:			}
ADDRGP4 $301
JUMPV
LABELV $300
line 423
;422:#endif
;423:			else if (cgs.scores1 != cgs.scores2) {
ADDRGP4 cgs+35124
INDIRI4
ADDRGP4 cgs+35128
INDIRI4
EQI4 $312
line 426
;424:				int winningTeam;
;425:
;426:				winningTeam = cgs.scores1>cgs.scores2? TEAM_RED : TEAM_BLUE;
ADDRGP4 cgs+35124
INDIRI4
ADDRGP4 cgs+35128
INDIRI4
LEI4 $319
ADDRLP4 68
CNSTI4 1
ASGNI4
ADDRGP4 $320
JUMPV
LABELV $319
ADDRLP4 68
CNSTI4 2
ASGNI4
LABELV $320
ADDRLP4 64
ADDRLP4 68
INDIRI4
ASGNI4
line 427
;427:				if (cg.snap->ps.persistant[PERS_TEAM] == winningTeam) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
NEI4 $321
line 428
;428:					winning = qtrue;
ADDRLP4 52
CNSTI4 1
ASGNI4
line 429
;429:				}
ADDRGP4 $322
JUMPV
LABELV $321
line 430
;430:				else if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $324
line 431
;431:					loosing = qtrue;
ADDRLP4 56
CNSTI4 1
ASGNI4
line 432
;432:				}
LABELV $324
LABELV $322
line 433
;433:			}
LABELV $312
LABELV $301
LABELV $281
LABELV $272
line 434
;434:			if (winning) {
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $327
line 436
;435:#if PLAYLIST
;436:				CG_StopPlayList();
ADDRGP4 CG_StopPlayList
CALLV
pop
line 438
;437:#endif
;438:				{
line 442
;439:					int len;
;440:					fileHandle_t f;
;441:
;442:					len = trap_FS_FOpenFile("music/hunt_victory.wav", &f, FS_READ);
ADDRGP4 $329
ARGP4
ADDRLP4 64
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 72
INDIRI4
ASGNI4
line 443
;443:					if (f) trap_FS_FCloseFile(f);
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $330
ADDRLP4 64
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
LABELV $330
line 445
;444:					
;445:					if (len > 0) {
ADDRLP4 68
INDIRI4
CNSTI4 0
LEI4 $332
line 446
;446:						trap_S_StartBackgroundTrack("music/hunt_victory.wav", "");
ADDRGP4 $329
ARGP4
ADDRGP4 $334
ARGP4
ADDRGP4 trap_S_StartBackgroundTrack
CALLV
pop
line 447
;447:					}
ADDRGP4 $328
JUMPV
LABELV $332
line 448
;448:					else {
line 449
;449:						trap_S_StartBackgroundTrack("music/win.wav", "");
ADDRGP4 $335
ARGP4
ADDRGP4 $334
ARGP4
ADDRGP4 trap_S_StartBackgroundTrack
CALLV
pop
line 450
;450:					}
line 451
;451:				}
line 452
;452:			}
ADDRGP4 $328
JUMPV
LABELV $327
line 453
;453:			else if (loosing) {
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $336
line 455
;454:#if PLAYLIST
;455:				CG_StopPlayList();
ADDRGP4 CG_StopPlayList
CALLV
pop
line 457
;456:#endif
;457:				trap_S_StartBackgroundTrack("music/loss.wav", "");
ADDRGP4 $338
ARGP4
ADDRGP4 $334
ARGP4
ADDRGP4 trap_S_StartBackgroundTrack
CALLV
pop
line 458
;458:			}
LABELV $336
LABELV $328
line 459
;459:			cg.intermissionMusicStarted = qtrue;
ADDRGP4 cg+118720
CNSTI4 1
ASGNI4
line 461
;460:
;461:			cg.killerName[0] = 0;
ADDRGP4 cg+117636
CNSTI1 0
ASGNI1
line 462
;462:		}
line 463
;463:	}
ADDRGP4 $265
JUMPV
LABELV $264
line 464
;464:	else {
line 465
;465:		if (cg.intermissionMusicStarted) {
ADDRGP4 cg+118720
INDIRI4
CNSTI4 0
EQI4 $341
line 469
;466:#if !PLAYLIST
;467:			trap_S_StopBackgroundTrack();
;468:#else
;469:			CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 471
;470:#endif
;471:			cg.intermissionMusicStarted = qfalse;
ADDRGP4 cg+118720
CNSTI4 0
ASGNI4
line 472
;472:		}
LABELV $341
line 473
;473:	}
LABELV $265
line 477
;474:#endif
;475:
;476:	// don't draw scoreboard during death while warmup up
;477:	if ( cg.warmup && !cg.showScores ) {
ADDRGP4 cg+127968
INDIRI4
CNSTI4 0
EQI4 $345
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $345
line 478
;478:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $345
line 481
;479:	}
;480:
;481:	if ( cg.showScores || cg.predictedPlayerState.pm_type == PM_DEAD ||
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $363
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 3
EQI4 $363
ADDRGP4 cg+107688+184
INDIRI4
CNSTI4 0
LEI4 $363
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 7
EQI4 $363
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $349
LABELV $363
line 486
;482:		cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ||	// JUHOX
;483:#if MEETING	// JUHOX: show scoreboard during meeting
;484:		cg.predictedPlayerState.pm_type == PM_MEETING ||
;485:#endif
;486:		 cg.predictedPlayerState.pm_type == PM_INTERMISSION ) {
line 487
;487:		fade = 1.0;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 488
;488:		fadeColor = colorWhite;
ADDRLP4 36
ADDRGP4 colorWhite
ASGNP4
line 489
;489:	} else {
ADDRGP4 $350
JUMPV
LABELV $349
line 501
;490:#if 0	// JUHOX: don't fade scoreboard
;491:		fadeColor = CG_FadeColor( cg.scoreFadeTime, FADE_TIME );
;492:		
;493:		if ( !fadeColor ) {
;494:			// next time scoreboard comes up, don't print killer
;495:			cg.deferredPlayerLoading = 0;
;496:			cg.killerName[0] = 0;
;497:			return qfalse;
;498:		}
;499:		fade = *fadeColor;
;500:#else
;501:		cg.deferredPlayerLoading = 0;
ADDRGP4 cg+16
CNSTI4 0
ASGNI4
line 502
;502:		cg.killerName[0] = 0;
ADDRGP4 cg+117636
CNSTI1 0
ASGNI1
line 503
;503:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $350
line 509
;504:#endif
;505:	}
;506:
;507:
;508:	// fragged by ... line
;509:	if ( cg.killerName[0] ) {
ADDRGP4 cg+117636
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $366
line 510
;510:		s = va("Fragged by %s", cg.killerName );
ADDRGP4 $369
ARGP4
ADDRGP4 cg+117636
ARGP4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 511
;511:		w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 512
;512:		x = ( SCREEN_WIDTH - w ) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 513
;513:		y = 40;
ADDRLP4 0
CNSTI4 40
ASGNI4
line 514
;514:		CG_DrawBigString( x, y, s, fade );
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 515
;515:	}
LABELV $366
line 518
;516:
;517:#if MEETING	// JUHOX: meeting instructions
;518:	if (cg.predictedPlayerState.pm_type == PM_MEETING) {
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 7
NEI4 $371
line 519
;519:		if (cg.time % 1000 < 700) {
ADDRGP4 cg+107656
INDIRI4
CNSTI4 1000
MODI4
CNSTI4 700
GEI4 $375
line 520
;520:			s = "Waiting for players...";
ADDRLP4 12
ADDRGP4 $378
ASGNP4
line 521
;521:			w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 522
;522:			x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 523
;523:			y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 524
;524:			CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 525
;525:		}
LABELV $375
line 527
;526:
;527:		s = "Hit <ATTACK> to toggle ready status.";
ADDRLP4 12
ADDRGP4 $379
ASGNP4
line 528
;528:		w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 529
;529:		x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 530
;530:		y = 62 + BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 78
ASGNI4
line 531
;531:		CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 532
;532:	}
ADDRGP4 $372
JUMPV
LABELV $371
line 538
;533:	else	// don't draw rank during meeting
;534:#endif
;535:
;536:	// current rank
;537:#if MONSTER_MODE	// JUHOX: team rank different in STU
;538:	if (cgs.gametype == GT_STU) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
NEI4 $380
line 539
;539:		if (cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $381
line 540
;540:			if (cgs.artefacts <= 0 || cgs.artefacts >= 999 || cgs.scores1 >= cgs.artefacts) {
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 0
LEI4 $394
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 999
GEI4 $394
ADDRGP4 cgs+35124
INDIRI4
ADDRGP4 cgs+31848
INDIRI4
LTI4 $387
LABELV $394
line 541
;541:				s = va("Score: %s    Time: %s", CG_ConfigString(CS_STU_SCORE), CG_ConfigString(CS_TIME_PLAYED));
CNSTI4 715
ARGI4
ADDRLP4 52
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
CNSTI4 716
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $395
ARGP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 60
INDIRP4
ASGNP4
line 542
;542:				w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 64
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 543
;543:				x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 544
;544:				y = 62 + BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 78
ASGNI4
line 545
;545:				CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 547
;546:				
;547:				if (cgs.artefacts <= 0) {
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 0
GTI4 $396
line 548
;548:					s = "";
ADDRLP4 12
ADDRGP4 $334
ASGNP4
line 549
;549:				}
ADDRGP4 $388
JUMPV
LABELV $396
line 550
;550:				else if (cgs.artefacts >= 999) {
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 999
LTI4 $399
line 551
;551:					s = va("%d artefact%s collected", cgs.scores1, cgs.scores1 != 1? "s" : "");
ADDRGP4 $402
ARGP4
ADDRGP4 cgs+35124
INDIRI4
ARGI4
ADDRGP4 cgs+35124
INDIRI4
CNSTI4 1
EQI4 $407
ADDRLP4 68
ADDRGP4 $405
ASGNP4
ADDRGP4 $408
JUMPV
LABELV $407
ADDRLP4 68
ADDRGP4 $334
ASGNP4
LABELV $408
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 72
INDIRP4
ASGNP4
line 552
;552:				}
ADDRGP4 $388
JUMPV
LABELV $399
line 553
;553:				else {
line 554
;554:					if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $409
line 555
;555:						s = "The Universe has been saved!";
ADDRLP4 12
ADDRGP4 $412
ASGNP4
line 556
;556:					}
ADDRGP4 $388
JUMPV
LABELV $409
line 557
;557:					else {
line 558
;558:						s = "You saved the Universe!";
ADDRLP4 12
ADDRGP4 $413
ASGNP4
line 559
;559:					}
line 560
;560:				}
line 561
;561:			}
ADDRGP4 $388
JUMPV
LABELV $387
line 562
;562:			else {
line 563
;563:				s = va("%d of %d artefact%s collected", cgs.scores1, cgs.artefacts, cgs.artefacts != 1? "s" : "");
ADDRGP4 $414
ARGP4
ADDRGP4 cgs+35124
INDIRI4
ARGI4
ADDRGP4 cgs+31848
INDIRI4
ARGI4
ADDRGP4 cgs+31848
INDIRI4
CNSTI4 1
EQI4 $419
ADDRLP4 52
ADDRGP4 $405
ASGNP4
ADDRGP4 $420
JUMPV
LABELV $419
ADDRLP4 52
ADDRGP4 $334
ASGNP4
LABELV $420
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 56
INDIRP4
ASGNP4
line 564
;564:				w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 60
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 565
;565:				x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 566
;566:				y = 62 + BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 78
ASGNI4
line 567
;567:				CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 569
;568:
;569:				if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $421
line 570
;570:					s = "Mission failed!";
ADDRLP4 12
ADDRGP4 $424
ASGNP4
line 571
;571:				}
ADDRGP4 $422
JUMPV
LABELV $421
line 573
;572:				else
;573:				{
line 574
;574:					s = "Mission failed! Report to HQ!";
ADDRLP4 12
ADDRGP4 $425
ASGNP4
line 575
;575:				}
LABELV $422
line 576
;576:			}
LABELV $388
line 577
;577:			w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 578
;578:			x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 579
;579:			y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 580
;580:			CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 581
;581:		}
line 583
;582:		// NOTE: no team rank message if not in the intermission
;583:	}
ADDRGP4 $381
JUMPV
LABELV $380
line 587
;584:	else
;585:#endif
;586:#if ESCAPE_MODE	// JUHOX: team rank in EFH
;587:	if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $426
line 588
;588:		if (cg.predictedPlayerState.pm_type == PM_INTERMISSION) {
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $427
line 599
;589:			char s1[256];
;590:			char s2[256];
;591:			char s3[256];
;592:			int w1, w2, w3;
;593:			long dist;
;594:			long distlimit;
;595:			static const vec4_t backColor = {
;596:				0, 0, 0, 0.5
;597:			};
;598:
;599:			distlimit = atoi(CG_ConfigString(CS_EFH_GOAL_DISTANCE));
CNSTI4 718
ARGI4
ADDRLP4 840
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 840
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 844
INDIRI4
ASGNI4
line 600
;600:			if (distlimit <= 0) {
ADDRLP4 52
INDIRI4
CNSTI4 0
GTI4 $434
line 601
;601:				distlimit = cgs.distanceLimit;
ADDRLP4 52
ADDRGP4 cgs+31860
INDIRI4
ASGNI4
line 602
;602:			}
LABELV $434
line 604
;603:
;604:			dist = atoi(CG_ConfigString(CS_EFH_COVERED_DISTANCE));
CNSTI4 722
ARGI4
ADDRLP4 848
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 848
INDIRP4
ARGP4
ADDRLP4 852
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 832
ADDRLP4 852
INDIRI4
ASGNI4
line 606
;605:
;606:			if (distlimit > 0) {
ADDRLP4 52
INDIRI4
CNSTI4 0
LEI4 $437
line 607
;607:				if (cgs.timelimit > 0) {
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
LEI4 $439
line 610
;608:					long timelimit;
;609:
;610:					timelimit = 60000 * cgs.timelimit;
ADDRLP4 856
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 60000
MULI4
ASGNI4
line 611
;611:					if (cgs.distanceLimit > 0) {
ADDRGP4 cgs+31860
INDIRI4
CNSTI4 0
LEI4 $443
line 612
;612:						timelimit += ((distlimit - cgs.distanceLimit) * timelimit) / cgs.distanceLimit;
ADDRLP4 860
ADDRLP4 856
INDIRI4
ASGNI4
ADDRLP4 856
ADDRLP4 860
INDIRI4
ADDRLP4 52
INDIRI4
ADDRGP4 cgs+31860
INDIRI4
SUBI4
ADDRLP4 860
INDIRI4
MULI4
ADDRGP4 cgs+31860
INDIRI4
DIVI4
ADDI4
ASGNI4
line 613
;613:					}
LABELV $443
line 615
;614:
;615:					s = va(
CNSTI4 716
ARGI4
ADDRLP4 860
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $448
ARGP4
ADDRLP4 864
ADDRLP4 832
INDIRI4
ASGNI4
ADDRLP4 864
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 864
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 868
ADDRLP4 52
INDIRI4
ASGNI4
ADDRLP4 868
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 868
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 860
INDIRP4
ARGP4
ADDRLP4 872
ADDRLP4 856
INDIRI4
ASGNI4
ADDRLP4 872
INDIRI4
CNSTI4 60000
DIVI4
ARGI4
ADDRLP4 872
INDIRI4
CNSTI4 1000
DIVI4
CNSTI4 60
MODI4
ARGI4
ADDRLP4 872
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 876
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 876
INDIRP4
ASGNP4
line 622
;616:						" Distance: %d.%03d/%d.%03dkm    Time: %s/%d:%02d.%03d ",
;617:						dist / 1000, dist % 1000,
;618:						distlimit / 1000, distlimit % 1000,
;619:						CG_ConfigString(CS_TIME_PLAYED),
;620:						timelimit / 60000, (timelimit / 1000) % 60, timelimit % 1000
;621:					);
;622:				}
ADDRGP4 $438
JUMPV
LABELV $439
line 623
;623:				else {
line 624
;624:					s = va(
CNSTI4 716
ARGI4
ADDRLP4 856
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $449
ARGP4
ADDRLP4 860
ADDRLP4 832
INDIRI4
ASGNI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 864
ADDRLP4 52
INDIRI4
ASGNI4
ADDRLP4 864
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 864
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 856
INDIRP4
ARGP4
ADDRLP4 868
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 868
INDIRP4
ASGNP4
line 630
;625:						" Distance: %d.%03d/%d.%03dkm    Time: %s ",
;626:						dist / 1000, dist % 1000,
;627:						distlimit / 1000, distlimit % 1000,
;628:						CG_ConfigString(CS_TIME_PLAYED)
;629:					);
;630:				}
line 631
;631:			}
ADDRGP4 $438
JUMPV
LABELV $437
line 632
;632:			else {
line 633
;633:				if (cgs.timelimit > 0) {
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 0
LEI4 $450
line 634
;634:					s = va(
CNSTI4 716
ARGI4
ADDRLP4 856
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $453
ARGP4
ADDRLP4 860
ADDRLP4 832
INDIRI4
ASGNI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 856
INDIRP4
ARGP4
ADDRGP4 cgs+31476
INDIRI4
ARGI4
ADDRLP4 864
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 864
INDIRP4
ASGNP4
line 640
;635:						" Distance: %d.%03dkm    Time: %s/%d:00 ",
;636:						dist / 1000, dist % 1000,
;637:						CG_ConfigString(CS_TIME_PLAYED),
;638:						cgs.timelimit
;639:					);
;640:				}
ADDRGP4 $451
JUMPV
LABELV $450
line 641
;641:				else {
line 642
;642:					s = va(
CNSTI4 716
ARGI4
ADDRLP4 856
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $455
ARGP4
ADDRLP4 860
ADDRLP4 832
INDIRI4
ASGNI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRLP4 860
INDIRI4
CNSTI4 1000
MODI4
ARGI4
ADDRLP4 856
INDIRP4
ARGP4
ADDRLP4 864
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 864
INDIRP4
ASGNP4
line 647
;643:						" Distance: %d.%03dkm    Time: %s ",
;644:						dist / 1000, dist % 1000,
;645:						CG_ConfigString(CS_TIME_PLAYED)
;646:					);
;647:				}
LABELV $451
line 648
;648:			}
LABELV $438
line 649
;649:			Q_strncpyz(s2, s, sizeof(s2));
ADDRLP4 312
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 650
;650:			w2 = CG_DrawStrlen(s2) * SMALLCHAR_WIDTH;
ADDRLP4 312
ARGP4
ADDRLP4 856
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 824
ADDRLP4 856
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 653
;651:
;652:
;653:			s = va(
CNSTI4 715
ARGI4
ADDRLP4 860
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
CNSTI4 719
ARGI4
ADDRLP4 864
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $456
ARGP4
ADDRLP4 860
INDIRP4
ARGP4
ADDRLP4 864
INDIRP4
ARGP4
ADDRLP4 868
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 868
INDIRP4
ASGNP4
line 658
;654:				" Score: %s      Speed: %s metres per minute ",
;655:				CG_ConfigString(CS_STU_SCORE),
;656:				CG_ConfigString(CS_EFH_SPEED)
;657:			);
;658:			Q_strncpyz(s3, s, sizeof(s3));
ADDRLP4 568
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 659
;659:			w3 = CG_DrawStrlen(s3) * SMALLCHAR_WIDTH;
ADDRLP4 568
ARGP4
ADDRLP4 872
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 828
ADDRLP4 872
INDIRI4
CNSTI4 3
LSHI4
ASGNI4
line 662
;660:
;661:
;662:			if (distlimit <= 0) {
ADDRLP4 52
INDIRI4
CNSTI4 0
GTI4 $457
line 663
;663:				s = "";
ADDRLP4 12
ADDRGP4 $334
ASGNP4
line 664
;664:			}
ADDRGP4 $458
JUMPV
LABELV $457
line 665
;665:			else if (dist < distlimit) {
ADDRLP4 832
INDIRI4
ADDRLP4 52
INDIRI4
GEI4 $459
line 666
;666:				s = " Hell didn't play fair... ";
ADDRLP4 12
ADDRGP4 $461
ASGNP4
line 667
;667:			}
ADDRGP4 $460
JUMPV
LABELV $459
line 668
;668:			else {
line 669
;669:				if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
NEI4 $462
line 670
;670:					s = " Successful escape! ";
ADDRLP4 12
ADDRGP4 $465
ASGNP4
line 671
;671:				}
ADDRGP4 $463
JUMPV
LABELV $462
line 672
;672:				else {
line 673
;673:					s = " You escaped from hell! ";
ADDRLP4 12
ADDRGP4 $466
ASGNP4
line 674
;674:				}
LABELV $463
line 675
;675:			}
LABELV $460
LABELV $458
line 676
;676:			Q_strncpyz(s1, s, sizeof(s1));
ADDRLP4 56
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 677
;677:			w1 = CG_DrawStrlen(s1) * BIGCHAR_WIDTH;
ADDRLP4 56
ARGP4
ADDRLP4 876
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 836
ADDRLP4 876
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 680
;678:
;679:
;680:			w = w1;
ADDRLP4 24
ADDRLP4 836
INDIRI4
ASGNI4
line 681
;681:			if (w2 > w) w = w2;
ADDRLP4 824
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $467
ADDRLP4 24
ADDRLP4 824
INDIRI4
ASGNI4
LABELV $467
line 682
;682:			if (w3 > w) w = w3;
ADDRLP4 828
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $469
ADDRLP4 24
ADDRLP4 828
INDIRI4
ASGNI4
LABELV $469
line 683
;683:			x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 684
;684:			y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 685
;685:			CG_FillRect(x, y, w, BIGCHAR_HEIGHT + 2*SMALLCHAR_HEIGHT + 2, backColor);
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112014848
ARGF4
ADDRGP4 $433
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 687
;686:
;687:			x = (SCREEN_WIDTH - w1) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 836
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 688
;688:			y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 689
;689:			CG_DrawBigString(x, y, s1, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 691
;690:
;691:			x = (SCREEN_WIDTH - w2) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 824
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 692
;692:			y = 62 + BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 78
ASGNI4
line 693
;693:			CG_DrawStringExt(x, y, s2, colorWhite, qfalse, qtrue, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 312
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
CNSTI4 8
ARGI4
CNSTI4 16
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 695
;694:			
;695:			x = (SCREEN_WIDTH - w3) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 828
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 696
;696:			y = 62 + BIGCHAR_HEIGHT + SMALLCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 94
ASGNI4
line 697
;697:			CG_DrawStringExt(x, y, s3, colorWhite, qfalse, qtrue, SMALLCHAR_WIDTH, SMALLCHAR_HEIGHT, 0);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 568
ARGP4
ADDRGP4 colorWhite
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
CNSTI4 8
ARGI4
CNSTI4 16
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 698
;698:		}
line 699
;699:	}
ADDRGP4 $427
JUMPV
LABELV $426
line 702
;700:	else
;701:#endif
;702:	if ( cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $471
line 703
;703:		if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $472
line 704
;704:			s = va("%s place with %i",
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_PlaceString
CALLP4
ASGNP4
ADDRGP4 $477
ARGP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 56
INDIRP4
ASGNP4
line 707
;705:				CG_PlaceString( cg.snap->ps.persistant[PERS_RANK] + 1 ),
;706:				cg.snap->ps.persistant[PERS_SCORE] );
;707:			w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 60
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 708
;708:			x = ( SCREEN_WIDTH - w ) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 709
;709:			y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 710
;710:			CG_DrawBigString( x, y, s, fade );
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 711
;711:		}
line 712
;712:	} else {
ADDRGP4 $472
JUMPV
LABELV $471
line 714
;713:#if 1	// JUHOX: cgs.scoresX is more up to date than cg.teamScores[]
;714:		cg.teamScores[0] = cgs.scores1;
ADDRGP4 cg+113520
ADDRGP4 cgs+35124
INDIRI4
ASGNI4
line 715
;715:		cg.teamScores[1] = cgs.scores2;
ADDRGP4 cg+113520+4
ADDRGP4 cgs+35128
INDIRI4
ASGNI4
line 717
;716:#endif
;717:		if ( cg.teamScores[0] == cg.teamScores[1] ) {
ADDRGP4 cg+113520
INDIRI4
ADDRGP4 cg+113520+4
INDIRI4
NEI4 $485
line 718
;718:			s = va("Teams are tied at %i", cg.teamScores[0] );
ADDRGP4 $490
ARGP4
ADDRGP4 cg+113520
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 719
;719:		} else if ( cg.teamScores[0] >= cg.teamScores[1] ) {
ADDRGP4 $486
JUMPV
LABELV $485
ADDRGP4 cg+113520
INDIRI4
ADDRGP4 cg+113520+4
INDIRI4
LTI4 $492
line 720
;720:			s = va("Red leads %i to %i",cg.teamScores[0], cg.teamScores[1] );
ADDRGP4 $497
ARGP4
ADDRGP4 cg+113520
INDIRI4
ARGI4
ADDRGP4 cg+113520+4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 721
;721:		} else {
ADDRGP4 $493
JUMPV
LABELV $492
line 722
;722:			s = va("Blue leads %i to %i",cg.teamScores[1], cg.teamScores[0] );
ADDRGP4 $501
ARGP4
ADDRGP4 cg+113520+4
INDIRI4
ARGI4
ADDRGP4 cg+113520
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 723
;723:		}
LABELV $493
LABELV $486
line 725
;724:
;725:		w = CG_DrawStrlen( s ) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 726
;726:		x = ( SCREEN_WIDTH - w ) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 727
;727:		y = 60;
ADDRLP4 0
CNSTI4 60
ASGNI4
line 728
;728:		CG_DrawBigString( x, y, s, fade );
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 729
;729:	}
LABELV $472
LABELV $427
LABELV $381
LABELV $372
line 733
;730:
;731:#if RESPAWN_DELAY	// JUHOX: draw "respawning in x ..." message
;732:	if (
;733:		cg.snap->ps.stats[STAT_HEALTH] > 0 ||
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
GTI4 $513
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 7
EQI4 $513
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $505
LABELV $513
line 738
;734:#if MEETING
;735:		cg.predictedPlayerState.pm_type == PM_MEETING ||
;736:#endif
;737:		cg.predictedPlayerState.pm_type == PM_INTERMISSION
;738:	) {
line 739
;739:		cg.oldRespawnTimer = 0;
ADDRGP4 cg+118724
CNSTI4 0
ASGNI4
line 740
;740:	}
ADDRGP4 $506
JUMPV
LABELV $505
line 741
;741:	else if ((cg.snap->ps.stats[STAT_RESPAWN_INFO] >> 2) > 0) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 2
RSHI4
CNSTI4 0
LEI4 $515
line 744
;742:		int respawnTimer;
;743:
;744:		respawnTimer = cg.snap->ps.stats[STAT_RESPAWN_INFO] >> 2;
ADDRLP4 52
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 2
RSHI4
ASGNI4
line 746
;745:
;746:		s = va("Respawning in %d ...", respawnTimer);
ADDRGP4 $519
ARGP4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 56
INDIRP4
ASGNP4
line 747
;747:		w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 60
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 748
;748:		x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 749
;749:		y = 83;
ADDRLP4 0
CNSTI4 83
ASGNI4
line 750
;750:		CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 752
;751:		if (
;752:			cg.oldRespawnTimer != respawnTimer &&
ADDRLP4 64
ADDRLP4 52
INDIRI4
ASGNI4
ADDRGP4 cg+118724
INDIRI4
ADDRLP4 64
INDIRI4
EQI4 $520
ADDRLP4 64
INDIRI4
CNSTI4 3
GTI4 $520
line 754
;753:			respawnTimer <= 3
;754:		) {
line 755
;755:			trap_S_StartLocalSound(cgs.media.respawnWarnSound, CHAN_ANNOUNCER);
ADDRGP4 cgs+751220+1056
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 756
;756:		}
LABELV $520
line 757
;757:		cg.oldRespawnTimer = respawnTimer;
ADDRGP4 cg+118724
ADDRLP4 52
INDIRI4
ASGNI4
line 758
;758:		if (!cg.showScores && cgs.gametype >= GT_TEAM) {
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $516
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $516
line 759
;759:			switch (cg.snap->ps.stats[STAT_RESPAWN_INFO] & 3) {
ADDRLP4 68
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
LTI4 $530
ADDRLP4 68
INDIRI4
CNSTI4 3
GTI4 $530
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $540
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $540
address $536
address $538
address $534
address $534
code
LABELV $534
LABELV $530
line 763
;760:			case RLT_invalid:
;761:			case RLT_regular:
;762:			default:
;763:				s = "respawn normally";
ADDRLP4 12
ADDRGP4 $535
ASGNP4
line 764
;764:				break;
ADDRGP4 $531
JUMPV
LABELV $536
line 766
;765:			case RLT_here:
;766:				s = "respawn here";
ADDRLP4 12
ADDRGP4 $537
ASGNP4
line 767
;767:				break;
ADDRGP4 $531
JUMPV
LABELV $538
line 769
;768:			case RLT_atPOD:
;769:				s = "respawn at point of death";
ADDRLP4 12
ADDRGP4 $539
ASGNP4
line 770
;770:				break;
LABELV $531
line 772
;771:			}
;772:			w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 76
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 773
;773:			x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 774
;774:			y += BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 775
;775:			CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 776
;776:		}
line 777
;777:	}
ADDRGP4 $516
JUMPV
LABELV $515
line 778
;778:	else if ((cg.snap->ps.stats[STAT_RESPAWN_INFO] >> 2) == 0) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 2
RSHI4
CNSTI4 0
NEI4 $541
line 781
;779:		char* s2;
;780:
;781:		switch (cg.snap->ps.stats[STAT_RESPAWN_INFO] & 3) {
ADDRLP4 56
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
LTI4 $544
ADDRLP4 56
INDIRI4
CNSTI4 3
GTI4 $544
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $555
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $555
address $550
address $553
address $548
address $548
code
LABELV $548
LABELV $544
line 785
;782:		case RLT_invalid:
;783:		case RLT_regular:
;784:		default:
;785:			s = "press <ATTACK> or <USE> to respawn";
ADDRLP4 12
ADDRGP4 $549
ASGNP4
line 786
;786:			s2 = NULL;
ADDRLP4 52
CNSTP4 0
ASGNP4
line 787
;787:			break;
ADDRGP4 $545
JUMPV
LABELV $550
line 789
;788:		case RLT_here:
;789:			s = "press <ATTACK> to respawn here";
ADDRLP4 12
ADDRGP4 $551
ASGNP4
line 790
;790:			s2 = "press <USE> to respawn normally";
ADDRLP4 52
ADDRGP4 $552
ASGNP4
line 791
;791:			break;
ADDRGP4 $545
JUMPV
LABELV $553
line 793
;792:		case RLT_atPOD:
;793:			s = "press <ATTACK> to respawn at POD";
ADDRLP4 12
ADDRGP4 $554
ASGNP4
line 794
;794:			s2 = "press <USE> to respawn normally";
ADDRLP4 52
ADDRGP4 $552
ASGNP4
line 795
;795:			break;
LABELV $545
line 797
;796:		}
;797:		w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 64
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 798
;798:		x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 799
;799:		y = 83;
ADDRLP4 0
CNSTI4 83
ASGNI4
line 800
;800:		CG_DrawBigString(x, y, s, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 802
;801:
;802:		if (s2 && !cg.showScores) {
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $556
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $556
line 803
;803:			w = CG_DrawStrlen(s2) * BIGCHAR_WIDTH;
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 68
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 804
;804:			x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 805
;805:			y += BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 806
;806:			CG_DrawBigString(x, y, s2, fade);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 CG_DrawBigString
CALLV
pop
line 807
;807:		}
LABELV $556
line 808
;808:	}
LABELV $541
LABELV $516
LABELV $506
line 813
;809:#endif
;810:
;811:#if 1	// JUHOX: remove the scoreboard for dead spectators
;812:	if (
;813:		!cg.showScores &&
ADDRGP4 cg+117624
INDIRI4
CNSTI4 0
NEI4 $559
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
GTI4 $559
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 7
EQI4 $559
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
EQI4 $559
line 819
;814:		cg.snap->ps.stats[STAT_HEALTH] <= 0 &&
;815:#if MEETING
;816:		cg.predictedPlayerState.pm_type != PM_MEETING &&
;817:#endif
;818:		cg.predictedPlayerState.pm_type != PM_INTERMISSION
;819:	) {
line 820
;820:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $250
JUMPV
LABELV $559
line 826
;821:	}
;822:#endif
;823:
;824:#if 1	// JUHOX: draw the hunt title above the intermission scoreboard
;825:	if (
;826:		cg.predictedPlayerState.pm_type == PM_INTERMISSION
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
EQI4 $573
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 7
NEI4 $567
LABELV $573
line 830
;827:#if MEETING
;828:		|| cg.predictedPlayerState.pm_type == PM_MEETING
;829:#endif
;830:	) {
line 831
;831:		CG_DrawPic(30, 15, 580, 36, cgs.media.huntNameShader);
CNSTF4 1106247680
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1141964800
ARGF4
CNSTF4 1108344832
ARGF4
ADDRGP4 cgs+751220+348
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 832
;832:	}
LABELV $567
line 836
;833:#endif
;834:
;835:	// scoreboard
;836:	y = SB_HEADER;
ADDRLP4 0
CNSTI4 107
ASGNI4
line 838
;837:
;838:	CG_DrawPic( SB_SCORE_X + (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardScore );
CNSTF4 1127743488
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+751220+748
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 839
;839:	CG_DrawPic( SB_PING_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardPing );
CNSTF4 1133772800
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+751220+744
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 840
;840:	CG_DrawPic( SB_TIME_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardTime );
CNSTF4 1136394240
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+751220+752
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 841
;841:	CG_DrawPic( SB_NAME_X - (SB_RATING_WIDTH / 2), y, 64, 32, cgs.media.scoreboardName );
CNSTF4 1138753536
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1115684864
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+751220+740
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 843
;842:
;843:	y = SB_TOP;
ADDRLP4 0
CNSTI4 139
ASGNI4
line 846
;844:
;845:	// If there are more than SB_MAXCLIENTS_NORMAL, use the interleaved scores
;846:	if ( cg.numScores > SB_MAXCLIENTS_NORMAL ) {
ADDRGP4 cg+113512
INDIRI4
CNSTI4 7
LEI4 $584
line 847
;847:		maxClients = SB_MAXCLIENTS_INTER;
ADDRLP4 32
CNSTI4 16
ASGNI4
line 848
;848:		lineHeight = SB_INTER_HEIGHT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 849
;849:		topBorderSize = 8;
ADDRLP4 44
CNSTI4 8
ASGNI4
line 850
;850:		bottomBorderSize = 16;
ADDRLP4 48
CNSTI4 16
ASGNI4
line 851
;851:	} else {
ADDRGP4 $585
JUMPV
LABELV $584
line 852
;852:		maxClients = SB_MAXCLIENTS_NORMAL;
ADDRLP4 32
CNSTI4 7
ASGNI4
line 853
;853:		lineHeight = SB_NORMAL_HEIGHT;
ADDRLP4 8
CNSTI4 40
ASGNI4
line 854
;854:		topBorderSize = 16;
ADDRLP4 44
CNSTI4 16
ASGNI4
line 855
;855:		bottomBorderSize = 16;
ADDRLP4 48
CNSTI4 16
ASGNI4
line 856
;856:	}
LABELV $585
line 858
;857:
;858:	localClient = qfalse;
ADDRGP4 localClient
CNSTI4 0
ASGNI4
line 861
;859:
;860:#if MONSTER_MODE	// JUHOX: draw STU scoreboard
;861:	if (cgs.gametype >= GT_STU) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 8
LTI4 $587
line 863
;862:		// draw similar to FFA (but use TEAM_RED)
;863:		n1 = CG_TeamScoreboard(y, TEAM_RED, fade, maxClients, lineHeight);
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 864
;864:		y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 865
;865:		n2 = CG_TeamScoreboard(y, TEAM_SPECTATOR, fade, maxClients - n1, lineHeight);
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 56
INDIRI4
ASGNI4
line 866
;866:		y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 867
;867:	}
ADDRGP4 $588
JUMPV
LABELV $587
line 870
;868:	else
;869:#endif
;870:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $590
line 874
;871:		//
;872:		// teamplay scoreboard
;873:		//
;874:		y += lineHeight/2;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
ASGNI4
line 876
;875:
;876:		if ( cg.teamScores[0] >= cg.teamScores[1] ) {
ADDRGP4 cg+113520
INDIRI4
ADDRGP4 cg+113520+4
INDIRI4
LTI4 $593
line 877
;877:			n1 = CG_TeamScoreboard( y, TEAM_RED, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 878
;878:			CG_DrawTeamBackground( 0, y - topBorderSize, 640, n1 * lineHeight + bottomBorderSize, 0.33f, TEAM_RED );
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 879
;879:			y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 880
;880:			maxClients -= n1;
ADDRLP4 32
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 881
;881:			n2 = CG_TeamScoreboard( y, TEAM_BLUE, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 56
INDIRI4
ASGNI4
line 882
;882:			CG_DrawTeamBackground( 0, y - topBorderSize, 640, n2 * lineHeight + bottomBorderSize, 0.33f, TEAM_BLUE );
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 883
;883:			y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 884
;884:			maxClients -= n2;
ADDRLP4 32
ADDRLP4 32
INDIRI4
ADDRLP4 40
INDIRI4
SUBI4
ASGNI4
line 885
;885:		} else {
ADDRGP4 $594
JUMPV
LABELV $593
line 886
;886:			n1 = CG_TeamScoreboard( y, TEAM_BLUE, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 887
;887:			CG_DrawTeamBackground( 0, y - topBorderSize, 640, n1 * lineHeight + bottomBorderSize, 0.33f, TEAM_BLUE );
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 2
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 888
;888:			y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 889
;889:			maxClients -= n1;
ADDRLP4 32
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 890
;890:			n2 = CG_TeamScoreboard( y, TEAM_RED, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 56
INDIRI4
ASGNI4
line 891
;891:			CG_DrawTeamBackground( 0, y - topBorderSize, 640, n2 * lineHeight + bottomBorderSize, 0.33f, TEAM_RED );
CNSTI4 0
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
ARGI4
CNSTI4 640
ARGI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
CNSTF4 1051260355
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 892
;892:			y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 893
;893:			maxClients -= n2;
ADDRLP4 32
ADDRLP4 32
INDIRI4
ADDRLP4 40
INDIRI4
SUBI4
ASGNI4
line 894
;894:		}
LABELV $594
line 895
;895:		n1 = CG_TeamScoreboard( y, TEAM_SPECTATOR, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 896
;896:		y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 898
;897:
;898:	} else {
ADDRGP4 $591
JUMPV
LABELV $590
line 902
;899:		//
;900:		// free for all scoreboard
;901:		//
;902:		n1 = CG_TeamScoreboard( y, TEAM_FREE, fade, maxClients, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 903
;903:		y += (n1 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 904
;904:		n2 = CG_TeamScoreboard( y, TEAM_SPECTATOR, fade, maxClients - n1, lineHeight );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_TeamScoreboard
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 56
INDIRI4
ASGNI4
line 905
;905:		y += (n2 * lineHeight) + BIGCHAR_HEIGHT;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 16
ADDI4
ADDI4
ASGNI4
line 906
;906:	}
LABELV $591
LABELV $588
line 908
;907:
;908:	if (!localClient) {
ADDRGP4 localClient
INDIRI4
CNSTI4 0
NEI4 $598
line 910
;909:		// draw local client at the bottom
;910:		for ( i = 0 ; i < cg.numScores ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $603
JUMPV
LABELV $600
line 911
;911:			if ( cg.scores[i].client == cg.snap->ps.clientNum ) {
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+113528
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $605
line 912
;912:				CG_DrawClientScore( y, &cg.scores[i], fadeColor, fade, lineHeight == SB_NORMAL_HEIGHT );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+113528
ADDP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 40
NEI4 $611
ADDRLP4 52
CNSTI4 1
ASGNI4
ADDRGP4 $612
JUMPV
LABELV $611
ADDRLP4 52
CNSTI4 0
ASGNI4
LABELV $612
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawClientScore
CALLV
pop
line 913
;913:				break;
ADDRGP4 $602
JUMPV
LABELV $605
line 915
;914:			}
;915:		}
LABELV $601
line 910
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $603
ADDRLP4 4
INDIRI4
ADDRGP4 cg+113512
INDIRI4
LTI4 $600
LABELV $602
line 916
;916:	}
LABELV $598
line 921
;917:
;918:	// JUHOX: draw highscore message
;919:#if 1
;920:	if (
;921:		cg.predictedPlayerState.pm_type == PM_INTERMISSION &&
ADDRGP4 cg+107688+4
INDIRI4
CNSTI4 5
NEI4 $613
ADDRGP4 cg+107656
INDIRI4
CNSTI4 1500
MODI4
CNSTI4 1000
GEI4 $613
line 923
;922:		cg.time % 1500 < 1000
;923:	) {
line 926
;924:		static vec4_t color = {1, 0.7, 0, 1};
;925:
;926:		s = CG_ConfigString(CS_HIGHSCORETEXT);
CNSTI4 710
ARGI4
ADDRLP4 52
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 52
INDIRP4
ASGNP4
line 927
;927:		w = CG_DrawStrlen(s) * BIGCHAR_WIDTH;
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 56
INDIRI4
CNSTI4 4
LSHI4
ASGNI4
line 928
;928:		x = (SCREEN_WIDTH - w) / 2;
ADDRLP4 20
CNSTI4 640
ADDRLP4 24
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 929
;929:		y = 62 + 2*BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 94
ASGNI4
line 931
;930:#if ESCAPE_MODE
;931:		if (cgs.gametype == GT_EFH) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 9
NEI4 $619
line 932
;932:			y = 480 - 1.5*BIGCHAR_HEIGHT;
ADDRLP4 0
CNSTI4 456
ASGNI4
line 933
;933:		}
LABELV $619
line 935
;934:#endif
;935:		CG_DrawBigStringColor(x, y, s, color);
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 $618
ARGP4
ADDRGP4 CG_DrawBigStringColor
CALLV
pop
line 936
;936:	}
LABELV $613
line 940
;937:#endif
;938:
;939:	// load any models that have been deferred
;940:	if ( ++cg.deferredPlayerLoading > 10 ) {
ADDRLP4 52
ADDRGP4 cg+16
ASGNP4
ADDRLP4 56
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 52
INDIRP4
ADDRLP4 56
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 10
LEI4 $622
line 941
;941:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 942
;942:	}
LABELV $622
line 944
;943:
;944:	return qtrue;
CNSTI4 1
RETI4
LABELV $250
endproc CG_DrawOldScoreboard 880 36
proc CG_CenterGiantLine 24 36
line 954
;945:}
;946:
;947://================================================================================
;948:
;949:/*
;950:================
;951:CG_CenterGiantLine
;952:================
;953:*/
;954:static void CG_CenterGiantLine( float y, const char *string ) {
line 958
;955:	float		x;
;956:	vec4_t		color;
;957:
;958:	color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 959
;959:	color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 960
;960:	color[2] = 1;
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 961
;961:	color[3] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 963
;962:
;963:	x = 0.5 * ( 640 - GIANT_WIDTH * CG_DrawStrlen( string ) );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_DrawStrlen
CALLI4
ASGNI4
ADDRLP4 16
CNSTI4 640
ADDRLP4 20
INDIRI4
CNSTI4 5
LSHI4
SUBI4
CVIF4 4
CNSTF4 1056964608
MULF4
ASGNF4
line 965
;964:
;965:	CG_DrawStringExt( x, y, string, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
ADDRLP4 16
INDIRF4
CVFI4 4
ARGI4
ADDRFP4 0
INDIRF4
CVFI4 4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 966
;966:}
LABELV $625
endproc CG_CenterGiantLine 24 36
export CG_DrawOldTourneyScoreboard
proc CG_DrawOldTourneyScoreboard 72 36
line 975
;967:
;968:/*
;969:=================
;970:CG_DrawTourneyScoreboard
;971:
;972:Draw the oversize scoreboard for tournements
;973:=================
;974:*/
;975:void CG_DrawOldTourneyScoreboard( void ) {
line 984
;976:	const char		*s;
;977:	vec4_t			color;
;978:	int				min, tens, ones;
;979:	clientInfo_t	*ci;
;980:	int				y;
;981:	int				i;
;982:
;983:	// request more scores regularly
;984:	if ( cg.scoresRequestTime + 2000 < cg.time ) {
ADDRGP4 cg+113508
INDIRI4
CNSTI4 2000
ADDI4
ADDRGP4 cg+107656
INDIRI4
GEI4 $630
line 985
;985:		cg.scoresRequestTime = cg.time;
ADDRGP4 cg+113508
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 986
;986:		trap_SendClientCommand( "score" );
ADDRGP4 $636
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 987
;987:	}
LABELV $630
line 989
;988:
;989:	color[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 990
;990:	color[1] = 1;
ADDRLP4 8+4
CNSTF4 1065353216
ASGNF4
line 991
;991:	color[2] = 1;
ADDRLP4 8+8
CNSTF4 1065353216
ASGNF4
line 992
;992:	color[3] = 1;
ADDRLP4 8+12
CNSTF4 1065353216
ASGNF4
line 995
;993:
;994:	// draw the dialog background
;995:	color[0] = color[1] = color[2] = 0;
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 44
INDIRF4
ASGNF4
line 996
;996:	color[3] = 1;
ADDRLP4 8+12
CNSTF4 1065353216
ASGNF4
line 997
;997:	CG_FillRect( 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, color );
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1142947840
ARGF4
CNSTF4 1139802112
ARGF4
ADDRLP4 8
ARGP4
ADDRGP4 CG_FillRect
CALLV
pop
line 1000
;998:
;999:	// print the mesage of the day
;1000:	s = CG_ConfigString( CS_MOTD );
CNSTI4 4
ARGI4
ADDRLP4 48
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 48
INDIRP4
ASGNP4
line 1001
;1001:	if ( !s[0] ) {
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $643
line 1002
;1002:		s = "Scoreboard";
ADDRLP4 4
ADDRGP4 $645
ASGNP4
line 1003
;1003:	}
LABELV $643
line 1006
;1004:
;1005:	// print optional title
;1006:	CG_CenterGiantLine( 8, s );
CNSTF4 1090519040
ARGF4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_CenterGiantLine
CALLV
pop
line 1009
;1007:
;1008:	// print server time
;1009:	ones = cg.time / 1000;
ADDRLP4 32
ADDRGP4 cg+107656
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 1010
;1010:	min = ones / 60;
ADDRLP4 36
ADDRLP4 32
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 1011
;1011:	ones %= 60;
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 60
MODI4
ASGNI4
line 1012
;1012:	tens = ones / 10;
ADDRLP4 40
ADDRLP4 32
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 1013
;1013:	ones %= 10;
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 1014
;1014:	s = va("%i:%i%i", min, tens, ones );
ADDRGP4 $647
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 52
INDIRP4
ASGNP4
line 1016
;1015:
;1016:	CG_CenterGiantLine( 64, s );
CNSTF4 1115684864
ARGF4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_CenterGiantLine
CALLV
pop
line 1021
;1017:
;1018:
;1019:	// print the two scores
;1020:
;1021:	y = 160;
ADDRLP4 24
CNSTI4 160
ASGNI4
line 1022
;1022:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
LTI4 $648
line 1026
;1023:		//
;1024:		// teamplay scoreboard
;1025:		//
;1026:		CG_DrawStringExt( 8, y, "Red Team", color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
CNSTI4 8
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 $651
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1027
;1027:		s = va("%i", cg.teamScores[0] );
ADDRGP4 $164
ARGP4
ADDRGP4 cg+113520
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
ASGNP4
line 1028
;1028:		CG_DrawStringExt( 632 - GIANT_WIDTH * strlen(s), y, s, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 strlen
CALLI4
ASGNI4
CNSTI4 632
ADDRLP4 60
INDIRI4
CNSTI4 5
LSHI4
SUBI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1030
;1029:		
;1030:		y += 64;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 64
ADDI4
ASGNI4
line 1032
;1031:
;1032:		CG_DrawStringExt( 8, y, "Blue Team", color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
CNSTI4 8
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 $653
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1033
;1033:		s = va("%i", cg.teamScores[1] );
ADDRGP4 $164
ARGP4
ADDRGP4 cg+113520+4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 64
INDIRP4
ASGNP4
line 1034
;1034:		CG_DrawStringExt( 632 - GIANT_WIDTH * strlen(s), y, s, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 strlen
CALLI4
ASGNI4
CNSTI4 632
ADDRLP4 68
INDIRI4
CNSTI4 5
LSHI4
SUBI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1035
;1035:	} else {
ADDRGP4 $649
JUMPV
LABELV $648
line 1039
;1036:		//
;1037:		// free for all scoreboard
;1038:		//
;1039:		for ( i = 0 ; i < MAX_CLIENTS ; i++ ) {
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $656
line 1040
;1040:			ci = &cgs.clientinfo[i];
ADDRLP4 0
ADDRLP4 28
INDIRI4
CNSTI4 1728
MULI4
ADDRGP4 cgs+41320
ADDP4
ASGNP4
line 1041
;1041:			if ( !ci->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $661
line 1042
;1042:				continue;
ADDRGP4 $657
JUMPV
LABELV $661
line 1044
;1043:			}
;1044:			if ( ci->team != TEAM_FREE ) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
EQI4 $663
line 1045
;1045:				continue;
ADDRGP4 $657
JUMPV
LABELV $663
line 1048
;1046:			}
;1047:
;1048:			CG_DrawStringExt( 8, y, ci->name, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
CNSTI4 8
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1049
;1049:			s = va("%i", ci->score );
ADDRGP4 $164
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
ASGNP4
line 1050
;1050:			CG_DrawStringExt( 632 - GIANT_WIDTH * strlen(s), y, s, color, qtrue, qtrue, GIANT_WIDTH, GIANT_HEIGHT, 0 );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 strlen
CALLI4
ASGNI4
CNSTI4 632
ADDRLP4 60
INDIRI4
CNSTI4 5
LSHI4
SUBI4
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 1
ARGI4
CNSTI4 1
ARGI4
CNSTI4 32
ARGI4
CNSTI4 48
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_DrawStringExt
CALLV
pop
line 1051
;1051:			y += 64;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 64
ADDI4
ASGNI4
line 1052
;1052:		}
LABELV $657
line 1039
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 64
LTI4 $656
line 1053
;1053:	}
LABELV $649
line 1056
;1054:
;1055:
;1056:}
LABELV $629
endproc CG_DrawOldTourneyScoreboard 72 36
bss
align 4
LABELV localClient
skip 4
import CG_AdjustParticles
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_CheckMouseEvents
import CG_TSS_CheckKeyEvents
import CG_TSS_MouseEvent
import CG_TSS_KeyEvent
import CG_TSS_CloseInterface
import CG_TSS_OpenInterface
import CG_TSS_DrawInterface
import CG_TSS_SPrintTacticalMeasure
import CG_TSS_Update
import CG_TSS_SaveInterface
import CG_TSS_LoadInterface
import CG_TSS_InitInterface
import TSS_SetPalette
import TSS_GetPalette
import CG_TSS_StrategyNameChanged
import CG_TSS_SetSearchPattern
import CG_TSS_CreateNewStrategy
import CG_TSS_FreePaletteSlot
import CG_TSS_SavePaletteSlotIfNeeded
import CG_TSS_LoadPaletteSlot
import CG_TSS_GetSortIndexByID
import CG_TSS_GetSortedSlot
import CG_TSS_GetSlotByName
import CG_TSS_GetSlotByID
import CG_TSS_NumStrategiesInStock
import TSSFS_SaveStrategyStock
import TSSFS_LoadStrategyStock
import TSSFS_LoadStrategy
import TSSFS_SaveStrategy
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_BFGsuperExpl
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_DrawLightBlobs
import CG_CheckStrongLight
import CG_AddLightningMarks
import CG_AddNearbox
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Draw3DLine
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PrevWeaponOrder_f
import CG_NextWeaponOrder_f
import CG_SkipWeapon_f
import CG_BestWeapon_f
import CG_AutoSwitchToBestWeapon
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $653
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $651
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $647
byte 1 37
byte 1 105
byte 1 58
byte 1 37
byte 1 105
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $645
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 98
byte 1 111
byte 1 97
byte 1 114
byte 1 100
byte 1 0
align 1
LABELV $636
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $554
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 60
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 62
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 80
byte 1 79
byte 1 68
byte 1 0
align 1
LABELV $552
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 60
byte 1 85
byte 1 83
byte 1 69
byte 1 62
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 110
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 108
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $551
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 60
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 62
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $549
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 60
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 62
byte 1 32
byte 1 111
byte 1 114
byte 1 32
byte 1 60
byte 1 85
byte 1 83
byte 1 69
byte 1 62
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $539
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $537
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $535
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 32
byte 1 110
byte 1 111
byte 1 114
byte 1 109
byte 1 97
byte 1 108
byte 1 108
byte 1 121
byte 1 0
align 1
LABELV $519
byte 1 82
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 46
byte 1 46
byte 1 46
byte 1 0
align 1
LABELV $501
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $497
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $490
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $477
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 99
byte 1 101
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $466
byte 1 32
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 101
byte 1 115
byte 1 99
byte 1 97
byte 1 112
byte 1 101
byte 1 100
byte 1 32
byte 1 102
byte 1 114
byte 1 111
byte 1 109
byte 1 32
byte 1 104
byte 1 101
byte 1 108
byte 1 108
byte 1 33
byte 1 32
byte 1 0
align 1
LABELV $465
byte 1 32
byte 1 83
byte 1 117
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 102
byte 1 117
byte 1 108
byte 1 32
byte 1 101
byte 1 115
byte 1 99
byte 1 97
byte 1 112
byte 1 101
byte 1 33
byte 1 32
byte 1 0
align 1
LABELV $461
byte 1 32
byte 1 72
byte 1 101
byte 1 108
byte 1 108
byte 1 32
byte 1 100
byte 1 105
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 114
byte 1 46
byte 1 46
byte 1 46
byte 1 32
byte 1 0
align 1
LABELV $456
byte 1 32
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 83
byte 1 112
byte 1 101
byte 1 101
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 109
byte 1 101
byte 1 116
byte 1 114
byte 1 101
byte 1 115
byte 1 32
byte 1 112
byte 1 101
byte 1 114
byte 1 32
byte 1 109
byte 1 105
byte 1 110
byte 1 117
byte 1 116
byte 1 101
byte 1 32
byte 1 0
align 1
LABELV $455
byte 1 32
byte 1 68
byte 1 105
byte 1 115
byte 1 116
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 107
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $453
byte 1 32
byte 1 68
byte 1 105
byte 1 115
byte 1 116
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 107
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 100
byte 1 58
byte 1 48
byte 1 48
byte 1 32
byte 1 0
align 1
LABELV $449
byte 1 32
byte 1 68
byte 1 105
byte 1 115
byte 1 116
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 47
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 107
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $448
byte 1 32
byte 1 68
byte 1 105
byte 1 115
byte 1 116
byte 1 97
byte 1 110
byte 1 99
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 47
byte 1 37
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 107
byte 1 109
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 100
byte 1 58
byte 1 37
byte 1 48
byte 1 50
byte 1 100
byte 1 46
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 32
byte 1 0
align 1
LABELV $425
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 33
byte 1 32
byte 1 82
byte 1 101
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 72
byte 1 81
byte 1 33
byte 1 0
align 1
LABELV $424
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 33
byte 1 0
align 1
LABELV $414
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 97
byte 1 114
byte 1 116
byte 1 101
byte 1 102
byte 1 97
byte 1 99
byte 1 116
byte 1 37
byte 1 115
byte 1 32
byte 1 99
byte 1 111
byte 1 108
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $413
byte 1 89
byte 1 111
byte 1 117
byte 1 32
byte 1 115
byte 1 97
byte 1 118
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 85
byte 1 110
byte 1 105
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 101
byte 1 33
byte 1 0
align 1
LABELV $412
byte 1 84
byte 1 104
byte 1 101
byte 1 32
byte 1 85
byte 1 110
byte 1 105
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 98
byte 1 101
byte 1 101
byte 1 110
byte 1 32
byte 1 115
byte 1 97
byte 1 118
byte 1 101
byte 1 100
byte 1 33
byte 1 0
align 1
LABELV $405
byte 1 115
byte 1 0
align 1
LABELV $402
byte 1 37
byte 1 100
byte 1 32
byte 1 97
byte 1 114
byte 1 116
byte 1 101
byte 1 102
byte 1 97
byte 1 99
byte 1 116
byte 1 37
byte 1 115
byte 1 32
byte 1 99
byte 1 111
byte 1 108
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $395
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $379
byte 1 72
byte 1 105
byte 1 116
byte 1 32
byte 1 60
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 62
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 116
byte 1 111
byte 1 103
byte 1 103
byte 1 108
byte 1 101
byte 1 32
byte 1 114
byte 1 101
byte 1 97
byte 1 100
byte 1 121
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 46
byte 1 0
align 1
LABELV $378
byte 1 87
byte 1 97
byte 1 105
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 46
byte 1 46
byte 1 46
byte 1 0
align 1
LABELV $369
byte 1 70
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $338
byte 1 109
byte 1 117
byte 1 115
byte 1 105
byte 1 99
byte 1 47
byte 1 108
byte 1 111
byte 1 115
byte 1 115
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $335
byte 1 109
byte 1 117
byte 1 115
byte 1 105
byte 1 99
byte 1 47
byte 1 119
byte 1 105
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $334
byte 1 0
align 1
LABELV $329
byte 1 109
byte 1 117
byte 1 115
byte 1 105
byte 1 99
byte 1 47
byte 1 104
byte 1 117
byte 1 110
byte 1 116
byte 1 95
byte 1 118
byte 1 105
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $232
byte 1 71
byte 1 67
byte 1 0
align 1
LABELV $229
byte 1 82
byte 1 69
byte 1 65
byte 1 68
byte 1 89
byte 1 0
align 1
LABELV $192
byte 1 45
byte 1 0
align 1
LABELV $191
byte 1 58
byte 1 0
align 1
LABELV $189
byte 1 37
byte 1 51
byte 1 105
byte 1 37
byte 1 115
byte 1 37
byte 1 45
byte 1 51
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $188
byte 1 37
byte 1 55
byte 1 105
byte 1 58
byte 1 37
byte 1 45
byte 1 51
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $184
byte 1 32
byte 1 83
byte 1 80
byte 1 69
byte 1 67
byte 1 84
byte 1 32
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 52
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $181
byte 1 32
byte 1 99
byte 1 111
byte 1 110
byte 1 110
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $171
byte 1 37
byte 1 105
byte 1 47
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $164
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $129
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 45
byte 1 62
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
