export CG_InitMarkPolys
code
proc CG_InitMarkPolys 12 12
file "..\..\..\..\code\cgame\cg_marks.c"
line 28
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_marks.c -- wall marks
;4:
;5:#include "cg_local.h"
;6:
;7:/*
;8:===================================================================
;9:
;10:MARK POLYS
;11:
;12:===================================================================
;13:*/
;14:
;15:
;16:markPoly_t	cg_activeMarkPolys;			// double linked list
;17:markPoly_t	*cg_freeMarkPolys;			// single linked list
;18:markPoly_t	cg_markPolys[MAX_MARK_POLYS];
;19:static		int	markTotal;
;20:
;21:/*
;22:===================
;23:CG_InitMarkPolys
;24:
;25:This is called at startup and for tournement restarts
;26:===================
;27:*/
;28:void	CG_InitMarkPolys( void ) {
line 31
;29:	int		i;
;30:
;31:	memset( cg_markPolys, 0, sizeof(cg_markPolys) );
ADDRGP4 cg_markPolys
ARGP4
CNSTI4 0
ARGI4
CNSTI4 73728
ARGI4
ADDRGP4 memset
CALLP4
pop
line 33
;32:
;33:	cg_activeMarkPolys.nextMark = &cg_activeMarkPolys;
ADDRGP4 cg_activeMarkPolys+4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 34
;34:	cg_activeMarkPolys.prevMark = &cg_activeMarkPolys;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 35
;35:	cg_freeMarkPolys = cg_markPolys;
ADDRGP4 cg_freeMarkPolys
ADDRGP4 cg_markPolys
ASGNP4
line 36
;36:	for ( i = 0 ; i < MAX_MARK_POLYS - 1 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $126
line 37
;37:		cg_markPolys[i].nextMark = &cg_markPolys[i+1];
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 288
MULI4
ADDRGP4 cg_markPolys+288
ADDP4
ASGNP4
line 38
;38:	}
LABELV $127
line 36
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 255
LTI4 $126
line 39
;39:}
LABELV $124
endproc CG_InitMarkPolys 12 12
export CG_FreeMarkPoly
proc CG_FreeMarkPoly 8 4
line 47
;40:
;41:
;42:/*
;43:==================
;44:CG_FreeMarkPoly
;45:==================
;46:*/
;47:void CG_FreeMarkPoly( markPoly_t *le ) {
line 48
;48:	if ( !le->prevMark ) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $133
line 49
;49:		CG_Error( "CG_FreeLocalEntity: not active" );
ADDRGP4 $135
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 50
;50:	}
LABELV $133
line 53
;51:
;52:	// remove from the doubly linked active list
;53:	le->prevMark->nextMark = le->nextMark;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 54
;54:	le->nextMark->prevMark = le->prevMark;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 57
;55:
;56:	// the free list is only singly linked
;57:	le->nextMark = cg_freeMarkPolys;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 58
;58:	cg_freeMarkPolys = le;
ADDRGP4 cg_freeMarkPolys
ADDRFP4 0
INDIRP4
ASGNP4
line 59
;59:}
LABELV $132
endproc CG_FreeMarkPoly 8 4
export CG_AllocMark
proc CG_AllocMark 12 12
line 68
;60:
;61:/*
;62:===================
;63:CG_AllocMark
;64:
;65:Will allways succeed, even if it requires freeing an old active mark
;66:===================
;67:*/
;68:markPoly_t	*CG_AllocMark( void ) {
line 72
;69:	markPoly_t	*le;
;70:	int time;
;71:
;72:	if ( !cg_freeMarkPolys ) {
ADDRGP4 cg_freeMarkPolys
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $137
line 75
;73:		// no free entities, so free the one at the end of the chain
;74:		// remove the oldest active entity
;75:		time = cg_activeMarkPolys.prevMark->time;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $140
JUMPV
LABELV $139
line 76
;76:		while (cg_activeMarkPolys.prevMark && time == cg_activeMarkPolys.prevMark->time) {
line 77
;77:			CG_FreeMarkPoly( cg_activeMarkPolys.prevMark );
ADDRGP4 cg_activeMarkPolys
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 78
;78:		}
LABELV $140
line 76
ADDRLP4 8
ADDRGP4 cg_activeMarkPolys
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $142
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
EQI4 $139
LABELV $142
line 79
;79:	}
LABELV $137
line 81
;80:
;81:	le = cg_freeMarkPolys;
ADDRLP4 0
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 82
;82:	cg_freeMarkPolys = cg_freeMarkPolys->nextMark;
ADDRLP4 8
ADDRGP4 cg_freeMarkPolys
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 84
;83:
;84:	memset( le, 0, sizeof( *le ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 288
ARGI4
ADDRGP4 memset
CALLP4
pop
line 87
;85:
;86:	// link into the active list
;87:	le->nextMark = cg_activeMarkPolys.nextMark;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 88
;88:	le->prevMark = &cg_activeMarkPolys;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 89
;89:	cg_activeMarkPolys.nextMark->prevMark = le;
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 90
;90:	cg_activeMarkPolys.nextMark = le;
ADDRGP4 cg_activeMarkPolys+4
ADDRLP4 0
INDIRP4
ASGNP4
line 91
;91:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $136
endproc CG_AllocMark 12 12
export CG_ImpactMark
proc CG_ImpactMark 6076 28
line 112
;92:}
;93:
;94:
;95:
;96:/*
;97:=================
;98:CG_ImpactMark
;99:
;100:origin should be a point within a unit of the plane
;101:dir should be the plane normal
;102:
;103:temporary marks will not be stored or randomly oriented, but immediately
;104:passed to the renderer.
;105:=================
;106:*/
;107:#define	MAX_MARK_FRAGMENTS	128
;108:#define	MAX_MARK_POINTS		384
;109:
;110:void CG_ImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir, 
;111:				   float orientation, float red, float green, float blue, float alpha,
;112:				   qboolean alphaFade, float radius, qboolean temporary ) {
line 123
;113:	vec3_t			axis[3];
;114:	float			texCoordScale;
;115:	vec3_t			originalPoints[4];
;116:	byte			colors[4];
;117:	int				i, j;
;118:	int				numFragments;
;119:	markFragment_t	markFragments[MAX_MARK_FRAGMENTS], *mf;
;120:	vec3_t			markPoints[MAX_MARK_POINTS];
;121:	vec3_t			projection;
;122:
;123:	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $147
line 124
;124:		return;
ADDRGP4 $146
JUMPV
LABELV $147
line 127
;125:	}
;126:
;127:	if ( radius <= 0 ) {
ADDRFP4 36
INDIRF4
CNSTF4 0
GTF4 $150
line 128
;128:		CG_Error( "CG_ImpactMark called with <= 0 radius" );
ADDRGP4 $152
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 129
;129:	}
LABELV $150
line 136
;130:
;131:	//if ( markTotal >= MAX_MARK_POLYS ) {
;132:	//	return;
;133:	//}
;134:
;135:	// create the texture axis
;136:	VectorNormalize2( dir, axis[0] );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 137
;137:	PerpendicularVector( axis[1], axis[0] );
ADDRLP4 0+12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 138
;138:	RotatePointAroundVector( axis[2], axis[0], axis[1], orientation );
ADDRLP4 0+24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+12
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 139
;139:	CrossProduct( axis[0], axis[2], axis[1] );
ADDRLP4 0
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 141
;140:
;141:	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 48
CNSTF4 1056964608
ADDRFP4 36
INDIRF4
DIVF4
ASGNF4
line 144
;142:
;143:	// create the full polygon
;144:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $158
line 145
;145:		originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5756
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5756
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 146
;146:		originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5764
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+12
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5764
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 147
;147:		originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5772
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+24
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5772
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 148
;148:		originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5780
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4664+36
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5780
INDIRF4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 149
;149:	}
LABELV $159
line 144
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 3
LTI4 $158
line 152
;150:
;151:	// get the fragments
;152:	VectorScale( dir, -20, projection );
ADDRLP4 5752
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4716
ADDRLP4 5752
INDIRP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+4
ADDRLP4 5752
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
ADDRLP4 4716+8
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3248488448
MULF4
ASGNF4
line 153
;153:	numFragments = trap_CM_MarkFragments( 4, (void *)originalPoints,
CNSTI4 4
ARGI4
ADDRLP4 4664
ARGP4
ADDRLP4 4716
ARGP4
CNSTI4 384
ARGI4
ADDRLP4 56
ARGP4
CNSTI4 128
ARGI4
ADDRLP4 4728
ARGP4
ADDRLP4 5756
ADDRGP4 trap_CM_MarkFragments
CALLI4
ASGNI4
ADDRLP4 4712
ADDRLP4 5756
INDIRI4
ASGNI4
line 157
;154:					projection, MAX_MARK_POINTS, markPoints[0],
;155:					MAX_MARK_FRAGMENTS, markFragments );
;156:
;157:	colors[0] = red * 255;
ADDRLP4 5764
ADDRFP4 16
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5768
CNSTF4 1325400064
ASGNF4
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
LTF4 $176
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
ADDRLP4 5768
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $177
JUMPV
LABELV $176
ADDRLP4 5760
ADDRLP4 5764
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $177
ADDRLP4 52
ADDRLP4 5760
INDIRU4
CVUU1 4
ASGNU1
line 158
;158:	colors[1] = green * 255;
ADDRLP4 5776
ADDRFP4 20
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5780
CNSTF4 1325400064
ASGNF4
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
LTF4 $180
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $181
JUMPV
LABELV $180
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $181
ADDRLP4 52+1
ADDRLP4 5772
INDIRU4
CVUU1 4
ASGNU1
line 159
;159:	colors[2] = blue * 255;
ADDRLP4 5788
ADDRFP4 24
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5792
CNSTF4 1325400064
ASGNF4
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
LTF4 $184
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $185
JUMPV
LABELV $184
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $185
ADDRLP4 52+2
ADDRLP4 5784
INDIRU4
CVUU1 4
ASGNU1
line 160
;160:	colors[3] = alpha * 255;
ADDRLP4 5800
ADDRFP4 28
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 5804
CNSTF4 1325400064
ASGNF4
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
LTF4 $188
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $189
JUMPV
LABELV $188
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $189
ADDRLP4 52+3
ADDRLP4 5796
INDIRU4
CVUU1 4
ASGNU1
line 162
;161:
;162:	for ( i = 0, mf = markFragments ; i < numFragments ; i++, mf++ ) {
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 4728
ASGNP4
ADDRGP4 $193
JUMPV
LABELV $190
line 169
;163:		polyVert_t	*v;
;164:		polyVert_t	verts[MAX_VERTS_ON_POLY];
;165:		markPoly_t	*mark;
;166:
;167:		// we have an upper limit on the complexity of polygons
;168:		// that we store persistantly
;169:		if ( mf->numPoints > MAX_VERTS_ON_POLY ) {
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 10
LEI4 $194
line 170
;170:			mf->numPoints = MAX_VERTS_ON_POLY;
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 171
;171:		}
LABELV $194
line 172
;172:		for ( j = 0, v = verts ; j < mf->numPoints ; j++, v++ ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 5808
ADDRLP4 5816
ASGNP4
ADDRGP4 $199
JUMPV
LABELV $196
line 175
;173:			vec3_t		delta;
;174:
;175:			VectorCopy( markPoints[mf->firstPoint + j], v->xyz );
ADDRLP4 5808
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
CNSTI4 12
MULI4
ADDRLP4 56
ADDP4
INDIRB
ASGNB 12
line 177
;176:
;177:			VectorSubtract( v->xyz, origin, delta );
ADDRLP4 6072
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 6056
ADDRLP4 5808
INDIRP4
INDIRF4
ADDRLP4 6072
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+4
ADDRLP4 5808
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 6072
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6056+8
ADDRLP4 5808
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 178
;178:			v->st[0] = 0.5 + DotProduct( delta, axis[1] ) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+12
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 179
;179:			v->st[1] = 0.5 + DotProduct( delta, axis[2] ) * texCoordScale;
ADDRLP4 5808
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 6056
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 6056+4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6056+8
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 180
;180:			*(int *)v->modulate = *(int *)colors;
ADDRLP4 5808
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 181
;181:		}
LABELV $197
line 172
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 5808
ADDRLP4 5808
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $199
ADDRLP4 36
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $196
line 184
;182:
;183:		// if it is a temporary (shadow) mark, add it immediately and forget about it
;184:		if ( temporary ) {
ADDRFP4 40
INDIRI4
CNSTI4 0
EQI4 $216
line 185
;185:			trap_R_AddPolyToScene( markShader, mf->numPoints, verts );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5816
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 186
;186:			continue;
ADDRGP4 $191
JUMPV
LABELV $216
line 190
;187:		}
;188:
;189:		// otherwise save it persistantly
;190:		mark = CG_AllocMark();
ADDRLP4 6056
ADDRGP4 CG_AllocMark
CALLP4
ASGNP4
ADDRLP4 5812
ADDRLP4 6056
INDIRP4
ASGNP4
line 191
;191:		mark->time = cg.time;
ADDRLP4 5812
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 192
;192:		mark->alphaFade = alphaFade;
ADDRLP4 5812
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 193
;193:		mark->markShader = markShader;
ADDRLP4 5812
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 194
;194:		mark->poly.numVerts = mf->numPoints;
ADDRLP4 5812
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 195
;195:		mark->color[0] = red;
ADDRLP4 5812
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 196
;196:		mark->color[1] = green;
ADDRLP4 5812
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 197
;197:		mark->color[2] = blue;
ADDRLP4 5812
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 198
;198:		mark->color[3] = alpha;
ADDRLP4 5812
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 199
;199:		memcpy( mark->verts, verts, mf->numPoints * sizeof( verts[0] ) );
ADDRLP4 5812
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 5816
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIU4 4
CNSTU4 24
MULU4
CVUI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 200
;200:		markTotal++;
ADDRLP4 6060
ADDRGP4 markTotal
ASGNP4
ADDRLP4 6060
INDIRP4
ADDRLP4 6060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 201
;201:	}
LABELV $191
line 162
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
LABELV $193
ADDRLP4 44
INDIRI4
ADDRLP4 4712
INDIRI4
LTI4 $190
line 202
;202:}
LABELV $146
endproc CG_ImpactMark 6076 28
export CG_AddMarks
proc CG_AddMarks 68 12
line 213
;203:
;204:
;205:/*
;206:===============
;207:CG_AddMarks
;208:===============
;209:*/
;210:#define	MARK_TOTAL_TIME		10000
;211:#define	MARK_FADE_TIME		1000
;212:
;213:void CG_AddMarks( void ) {
line 219
;214:	int			j;
;215:	markPoly_t	*mp, *next;
;216:	int			t;
;217:	int			fade;
;218:
;219:	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $220
line 220
;220:		return;
ADDRGP4 $219
JUMPV
LABELV $220
line 223
;221:	}
;222:
;223:	mp = cg_activeMarkPolys.nextMark;
ADDRLP4 0
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 224
;224:	for ( ; mp != &cg_activeMarkPolys ; mp = next ) {
ADDRGP4 $227
JUMPV
LABELV $224
line 227
;225:		// grab next now, so if the local entity is freed we
;226:		// still have it
;227:		next = mp->nextMark;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 230
;228:
;229:		// see if it is time to completely remove it
;230:		if ( cg.time > mp->time + MARK_TOTAL_TIME ) {
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
LEI4 $228
line 231
;231:			CG_FreeMarkPoly( mp );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 232
;232:			continue;
ADDRGP4 $225
JUMPV
LABELV $228
line 236
;233:		}
;234:
;235:		// fade out the energy bursts
;236:		if ( mp->markShader == cgs.media.energyMarkShader ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+751220+600
INDIRI4
NEI4 $231
line 238
;237:
;238:			fade = 450 - 450 * ( (cg.time - mp->time ) / 3000.0 );
ADDRLP4 8
CNSTF4 1138819072
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 967754558
MULF4
CNSTF4 1138819072
MULF4
SUBF4
CVFI4 4
ASGNI4
line 239
;239:			if ( fade < 255 ) {
ADDRLP4 8
INDIRI4
CNSTI4 255
GEI4 $236
line 240
;240:				if ( fade < 0 ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $238
line 241
;241:					fade = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 242
;242:				}
LABELV $238
line 243
;243:				if ( mp->verts[0].modulate[0] != 0 ) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
EQI4 $240
line 244
;244:					for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $245
JUMPV
LABELV $242
line 245
;245:						mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $247
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $248
JUMPV
LABELV $247
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $248
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 246
;246:						mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $250
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $251
JUMPV
LABELV $250
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $251
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 247
;247:						mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $253
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $254
JUMPV
LABELV $253
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $254
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 248
;248:					}
LABELV $243
line 244
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $245
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $242
line 249
;249:				}
LABELV $240
line 250
;250:			}
LABELV $236
line 251
;251:		}
LABELV $231
line 254
;252:
;253:		// fade all marks out with time
;254:		t = mp->time + MARK_TOTAL_TIME - cg.time;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
ADDRGP4 cg+107656
INDIRI4
SUBI4
ASGNI4
line 255
;255:		if ( t < MARK_FADE_TIME ) {
ADDRLP4 12
INDIRI4
CNSTI4 1000
GEI4 $256
line 256
;256:			fade = 255 * t / MARK_FADE_TIME;
ADDRLP4 8
ADDRLP4 12
INDIRI4
CNSTI4 255
MULI4
CNSTI4 1000
DIVI4
ASGNI4
line 257
;257:			if ( mp->alphaFade ) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $258
line 258
;258:				for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $263
JUMPV
LABELV $260
line 259
;259:					mp->verts[j].modulate[3] = fade;
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 23
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 260
;260:				}
LABELV $261
line 258
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $263
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $260
line 261
;261:			} else {
ADDRGP4 $259
JUMPV
LABELV $258
line 262
;262:				for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $267
JUMPV
LABELV $264
line 263
;263:					mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $269
ADDRLP4 20
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $270
JUMPV
LABELV $269
ADDRLP4 20
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $270
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRU4
CVUU1 4
ASGNU1
line 264
;264:					mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $272
ADDRLP4 36
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $273
JUMPV
LABELV $272
ADDRLP4 36
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $273
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 265
;265:					mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $275
ADDRLP4 52
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $276
JUMPV
LABELV $275
ADDRLP4 52
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $276
ADDRLP4 4
INDIRI4
CNSTI4 24
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 266
;266:				}
LABELV $265
line 262
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $267
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $264
line 267
;267:			}
LABELV $259
line 268
;268:		}
LABELV $256
line 271
;269:
;270:
;271:		trap_R_AddPolyToScene( mp->markShader, mp->poly.numVerts, mp->verts );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 272
;272:	}
LABELV $225
line 224
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
LABELV $227
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeMarkPolys
CVPU4 4
NEU4 $224
line 273
;273:}
LABELV $219
endproc CG_AddMarks 68 12
proc CG_AddNearboxFace 96 12
line 280
;274:
;275:/*
;276:===============
;277:JUHOX: CG_AddNearboxFace
;278:===============
;279:*/
;280:static void CG_AddNearboxFace(qhandle_t shader, const vec3_t origin, const vec3_t dir1, const vec3_t dir2) {
line 283
;281:	polyVert_t verts[4];
;282:
;283:	VectorCopy(origin, verts[0].xyz);
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 284
;284:	verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 285
;285:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 286
;286:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 287
;287:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 288
;288:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 289
;289:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 291
;290:
;291:	VectorAdd(origin, dir1, verts[1].xyz);
ADDRLP4 0+24
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 292
;292:	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 293
;293:	verts[1].st[1] = 1;
ADDRLP4 0+24+12+4
CNSTF4 1065353216
ASGNF4
line 294
;294:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 295
;295:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 296
;296:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 297
;297:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 299
;298:
;299:	VectorAdd(origin, dir1, verts[2].xyz);
ADDRLP4 0+48
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 300
;300:	VectorAdd(verts[2].xyz, dir2, verts[2].xyz);
ADDRLP4 0+48
ADDRLP4 0+48
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 0+48+4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 0+48+8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 301
;301:	verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 302
;302:	verts[2].st[1] = 0;
ADDRLP4 0+48+12+4
CNSTF4 0
ASGNF4
line 303
;303:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 304
;304:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 305
;305:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 306
;306:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 308
;307:
;308:	VectorAdd(origin, dir2, verts[3].xyz);
ADDRLP4 0+72
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 309
;309:	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 310
;310:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 311
;311:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 312
;312:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 313
;313:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 314
;314:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 316
;315:
;316:	trap_R_AddPolyToScene(shader, 4, verts);
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 317
;317:}
LABELV $277
endproc CG_AddNearboxFace 96 12
export CG_AddNearbox
proc CG_AddNearbox 36 16
line 325
;318:
;319:/*
;320:===============
;321:JUHOX: CG_AddNearbox
;322:===============
;323:*/
;324:#define NEARBOX_SIZE 10000
;325:void CG_AddNearbox(void) {
line 330
;326:	vec3_t origin;
;327:	vec3_t dir1;
;328:	vec3_t dir2;
;329:
;330:	if (!cgs.nearboxShaderName[0]) return;
ADDRGP4 cgs+31872
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $362
ADDRGP4 $361
JUMPV
LABELV $362
line 331
;331:	if (!cg_nearbox.integer) return;	
ADDRGP4 cg_nearbox+12
INDIRI4
CNSTI4 0
NEI4 $365
ADDRGP4 $361
JUMPV
LABELV $365
line 343
;332:
;333:	/*
;334:	VectorSet(dir1, 0, NEARBOX_SIZE, 0);
;335:	VectorSet(dir2, -NEARBOX_SIZE, 0, 0);
;336:	VectorCopy(cg.refdef.vieworg, origin);
;337:	origin[1] -= 0.5 * NEARBOX_SIZE;
;338:	origin[0] += 0.5 * NEARBOX_SIZE;
;339:	origin[2] += 0.5 * NEARBOX_SIZE;
;340:	CG_AddNearboxFace(cgs.media.nearbox_up, origin, dir1, dir2);
;341:	*/
;342:
;343:	VectorSet(dir1, 0, NEARBOX_SIZE, 0);
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 12+4
CNSTF4 1176256512
ASGNF4
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 344
;344:	VectorSet(dir2, NEARBOX_SIZE, 0, 0);
ADDRLP4 24
CNSTF4 1176256512
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 0
ASGNF4
line 345
;345:	VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 0
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 346
;346:	origin[1] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 347
;347:	origin[0] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 348
;348:	origin[2] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 349
;349:	CG_AddNearboxFace(cgs.media.nearbox_dn, origin, dir1, dir2);
ADDRGP4 cgs+751220+52
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 CG_AddNearboxFace
CALLV
pop
line 351
;350:
;351:	VectorSet(dir1, 0, NEARBOX_SIZE, 0);
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 12+4
CNSTF4 1176256512
ASGNF4
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 352
;352:	VectorSet(dir2, 0, 0, NEARBOX_SIZE);
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 1176256512
ASGNF4
line 353
;353:	VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 0
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 354
;354:	origin[1] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 355
;355:	origin[2] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 356
;356:	origin[0] += 0.5 * NEARBOX_SIZE;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1167867904
ADDF4
ASGNF4
line 357
;357:	CG_AddNearboxFace(cgs.media.nearbox_ft, origin, dir1, dir2);
ADDRGP4 cgs+751220+56
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 CG_AddNearboxFace
CALLV
pop
line 359
;358:
;359:	VectorSet(dir1, 0, -NEARBOX_SIZE, 0);
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 12+4
CNSTF4 3323740160
ASGNF4
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 360
;360:	VectorSet(dir2, 0, 0, NEARBOX_SIZE);
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 1176256512
ASGNF4
line 361
;361:	VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 0
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 362
;362:	origin[1] += 0.5 * NEARBOX_SIZE;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1167867904
ADDF4
ASGNF4
line 363
;363:	origin[2] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 364
;364:	origin[0] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 365
;365:	CG_AddNearboxFace(cgs.media.nearbox_bk, origin, dir1, dir2);
ADDRGP4 cgs+751220+60
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 CG_AddNearboxFace
CALLV
pop
line 367
;366:
;367:	VectorSet(dir1, -NEARBOX_SIZE, 0, 0);
ADDRLP4 12
CNSTF4 3323740160
ASGNF4
ADDRLP4 12+4
CNSTF4 0
ASGNF4
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 368
;368:	VectorSet(dir2, 0, 0, NEARBOX_SIZE);
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 1176256512
ASGNF4
line 369
;369:	VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 0
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 370
;370:	origin[0] += 0.5 * NEARBOX_SIZE;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1167867904
ADDF4
ASGNF4
line 371
;371:	origin[2] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 372
;372:	origin[1] += 0.5 * NEARBOX_SIZE;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1167867904
ADDF4
ASGNF4
line 373
;373:	CG_AddNearboxFace(cgs.media.nearbox_lf, origin, dir1, dir2);
ADDRGP4 cgs+751220+64
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 CG_AddNearboxFace
CALLV
pop
line 375
;374:
;375:	VectorSet(dir1, NEARBOX_SIZE, 0, 0);
ADDRLP4 12
CNSTF4 1176256512
ASGNF4
ADDRLP4 12+4
CNSTF4 0
ASGNF4
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 376
;376:	VectorSet(dir2, 0, 0, NEARBOX_SIZE);
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 24+4
CNSTF4 0
ASGNF4
ADDRLP4 24+8
CNSTF4 1176256512
ASGNF4
line 377
;377:	VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 0
ADDRGP4 cg+109260+24
INDIRB
ASGNB 12
line 378
;378:	origin[0] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 379
;379:	origin[2] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 380
;380:	origin[1] -= 0.5 * NEARBOX_SIZE;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1167867904
SUBF4
ASGNF4
line 381
;381:	CG_AddNearboxFace(cgs.media.nearbox_rt, origin, dir1, dir2);
ADDRGP4 cgs+751220+68
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 CG_AddNearboxFace
CALLV
pop
line 382
;382:}
LABELV $361
endproc CG_AddNearbox 36 16
export CG_AddLightningMarks
proc CG_AddLightningMarks 132 28
line 390
;383:
;384:/*
;385:===============
;386:JUHOX: CG_AddLightningMarks
;387:===============
;388:*/
;389:#if MONSTER_MODE
;390:void CG_AddLightningMarks(int numMarks) {
line 393
;391:	int i;
;392:
;393:	for (i = 0; i < numMarks; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $422
JUMPV
LABELV $419
line 438
;394:		#if 0
;395:		trace_t trace;
;396:		vec3_t angles;
;397:		vec3_t dir;
;398:		vec3_t end;
;399:
;400:		/*		
;401:		VectorCopy(cg.refdefViewAngles, angles);
;402:		angles[YAW] += 0.5 * cg.refdef.fov_x * crandom();
;403:		angles[PITCH] += 0.5 * cg.refdef.fov_y * crandom();
;404:		AngleVectors(angles, dir, NULL, NULL);
;405:		*/
;406:		/*
;407:		dir[0] = crandom();
;408:		dir[1] = crandom();
;409:		dir[2] = crandom();
;410:		VectorNormalize(dir);
;411:		*/
;412:		angles[YAW] = 360 * random();
;413:		angles[PITCH] = 360 * random();
;414:		angles[ROLL] = 360 * random();
;415:		AngleVectors(angles, dir, NULL, NULL);
;416:
;417:		VectorMA(cg.refdef.vieworg, 8000, dir, end);
;418:		
;419:		CG_Trace(&trace, cg.refdef.vieworg, NULL, NULL, end, -1, CONTENTS_SOLID);
;420:		if (trace.fraction >= 1) continue;
;421:		//VectorMA(trace.endpos, -1, trace.plane.normal, trace.endpos);
;422:
;423:		CG_ImpactMark(
;424:			cgs.media.lightningShader, trace.endpos, trace.plane.normal, 360 * random(),
;425:			1, 1, 1, 1,
;426:			qfalse,
;427:			800 * trace.fraction,
;428:			qtrue	// only temporary
;429:		);
;430:		#endif
;431:
;432:		trace_t trace;
;433:		vec3_t angles;
;434:		vec3_t dir;
;435:		vec3_t end;
;436:		vec3_t start;
;437:
;438:		angles[YAW] = 360 * random();
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4+4
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 439
;439:		angles[PITCH] = 360 * random();
ADDRLP4 112
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
ADDRLP4 112
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 112
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 440
;440:		angles[ROLL] = 360 * random();
ADDRLP4 116
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4+8
ADDRLP4 116
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 116
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 441
;441:		AngleVectors(angles, dir, NULL, NULL);
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 443
;442:
;443:		VectorMA(cg.refdef.vieworg, 8000, dir, end);
ADDRLP4 28
ADDRGP4 cg+109260+24
INDIRF4
ADDRLP4 16
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
ADDRLP4 28+4
ADDRGP4 cg+109260+24+4
INDIRF4
ADDRLP4 16+4
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
ADDRLP4 28+8
ADDRGP4 cg+109260+24+8
INDIRF4
ADDRLP4 16+8
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
line 445
;444:		
;445:		CG_Trace(&trace, cg.refdef.vieworg, NULL, NULL, end, -1, CONTENTS_SOLID);
ADDRLP4 40
ARGP4
ADDRGP4 cg+109260+24
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 446
;446:		if (trace.fraction >= 1) continue;
ADDRLP4 40+8
INDIRF4
CNSTF4 1065353216
LTF4 $439
ADDRGP4 $420
JUMPV
LABELV $439
line 448
;447:
;448:		angles[YAW] = 360 * random();
ADDRLP4 120
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4+4
ADDRLP4 120
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 120
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 449
;449:		angles[PITCH] = 360 * random();
ADDRLP4 124
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
ADDRLP4 124
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 124
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 450
;450:		angles[ROLL] = 360 * random();
ADDRLP4 128
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4+8
ADDRLP4 128
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 128
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1135869952
MULF4
ASGNF4
line 451
;451:		AngleVectors(angles, dir, NULL, NULL);
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 453
;452:
;453:		VectorCopy(trace.endpos, start);
ADDRLP4 96
ADDRLP4 40+12
INDIRB
ASGNB 12
line 454
;454:		VectorMA(start, 8000, dir, end);
ADDRLP4 28
ADDRLP4 96
INDIRF4
ADDRLP4 16
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 96+4
INDIRF4
ADDRLP4 16+4
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 96+8
INDIRF4
ADDRLP4 16+8
INDIRF4
CNSTF4 1174011904
MULF4
ADDF4
ASGNF4
line 456
;455:
;456:		CG_Trace(&trace, start, NULL, NULL, end, -1, CONTENTS_SOLID);
ADDRLP4 40
ARGP4
ADDRLP4 96
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 457
;457:		if (trace.fraction < 0.01 || trace.fraction >= 1) continue;
ADDRLP4 40+8
INDIRF4
CNSTF4 1008981770
LTF4 $455
ADDRLP4 40+8
INDIRF4
CNSTF4 1065353216
LTF4 $451
LABELV $455
ADDRGP4 $420
JUMPV
LABELV $451
line 459
;458:
;459:		CG_Draw3DLine(start, trace.endpos, cgs.media.dischargeFlashShader);
ADDRLP4 96
ARGP4
ADDRLP4 40+12
ARGP4
ADDRGP4 cgs+751220+260
INDIRI4
ARGI4
ADDRGP4 CG_Draw3DLine
CALLV
pop
line 460
;460:	}
LABELV $420
line 393
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $422
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $419
line 461
;461:}
LABELV $418
endproc CG_AddLightningMarks 132 28
export AddLightBlob
proc AddLightBlob 8 0
line 486
;462:#endif
;463:
;464:#if SPECIAL_VIEW_MODES	// JUHOX: variables for light blobs
;465:#define MAX_LIGHT_BLOBS 256
;466:#define LIGHTBLOB_FADE_TIME 1000	// msec
;467:typedef struct {
;468:	float x, y;
;469:	float radiusX;
;470:	float radiusY;
;471:	vec3_t color;
;472:	int startTime;
;473:	int fadeTime;
;474:} lightBlob_t;
;475:
;476:static int oldestLightBlob;
;477:static lightBlob_t lightBlobs[MAX_LIGHT_BLOBS];
;478:#endif
;479:
;480:/*
;481:===============
;482:JUHOX: AddLightBlob
;483:===============
;484:*/
;485:#if SPECIAL_VIEW_MODES
;486:void AddLightBlob(float x, float y, float radius, const vec3_t color, qboolean fastFade) {
line 489
;487:	lightBlob_t* blob;
;488:
;489:	blob = &lightBlobs[oldestLightBlob];
ADDRLP4 0
ADDRGP4 oldestLightBlob
INDIRI4
CNSTI4 36
MULI4
ADDRGP4 lightBlobs
ADDP4
ASGNP4
line 490
;490:	oldestLightBlob = (oldestLightBlob + 1) & (MAX_LIGHT_BLOBS - 1);
ADDRLP4 4
ADDRGP4 oldestLightBlob
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 255
BANDI4
ASGNI4
line 492
;491:
;492:	blob->x = x * cgs.screenXScale;
ADDRLP4 0
INDIRP4
ADDRFP4 0
INDIRF4
ADDRGP4 cgs+31432
INDIRF4
MULF4
ASGNF4
line 493
;493:	blob->y = y * cgs.screenYScale;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 4
INDIRF4
ADDRGP4 cgs+31436
INDIRF4
MULF4
ASGNF4
line 494
;494:	blob->radiusX = radius * cgs.screenXScale;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRF4
ADDRGP4 cgs+31432
INDIRF4
MULF4
ASGNF4
line 495
;495:	blob->radiusY = radius * cgs.screenYScale;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 8
INDIRF4
ADDRGP4 cgs+31436
INDIRF4
MULF4
ASGNF4
line 496
;496:	VectorCopy(color, blob->color);
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 497
;497:	blob->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 498
;498:	if (fastFade) {
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $466
line 499
;499:		blob->fadeTime = 250;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 250
ASGNI4
line 500
;500:	}
ADDRGP4 $467
JUMPV
LABELV $466
line 501
;501:	else {
line 502
;502:		blob->fadeTime = (int) (radius * 2);
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 8
INDIRF4
CNSTF4 1073741824
MULF4
CVFI4 4
ASGNI4
line 503
;503:	}
LABELV $467
line 504
;504:}
LABELV $460
endproc AddLightBlob 8 0
export CG_CheckStrongLight
proc CG_CheckStrongLight 96 28
line 513
;505:#endif
;506:
;507:/*
;508:===============
;509:JUHOX: CG_CheckStrongLight
;510:===============
;511:*/
;512:#if SPECIAL_VIEW_MODES
;513:void CG_CheckStrongLight(const vec3_t origin, float intensity, const vec3_t color) {
line 521
;514:	float zoomFactor;
;515:	float distance;
;516:	float maxDistance;
;517:	float x, y;
;518:	trace_t trace;
;519:	qboolean fastFade;
;520:
;521:	if (cg.viewMode != VIEW_amplifier) return;
ADDRGP4 cg+107628
INDIRI4
CNSTI4 2
EQI4 $469
ADDRGP4 $468
JUMPV
LABELV $469
line 523
;522:
;523:	fastFade = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 524
;524:	if (intensity < 0) {
ADDRFP4 4
INDIRF4
CNSTF4 0
GEF4 $472
line 525
;525:		intensity = -intensity;
ADDRFP4 4
ADDRFP4 4
INDIRF4
NEGF4
ASGNF4
line 526
;526:		fastFade = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 527
;527:	}
LABELV $472
line 529
;528:
;529:	zoomFactor = 90.0 / cg.refdef.fov_x;
ADDRLP4 20
CNSTF4 1119092736
ADDRGP4 cg+109260+16
INDIRF4
DIVF4
ASGNF4
line 530
;530:	intensity *= zoomFactor;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ASGNF4
line 531
;531:	distance = Distance(cg.refdef.vieworg, origin);
ADDRGP4 cg+109260+24
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 80
INDIRF4
ASGNF4
line 532
;532:	maxDistance = 10.0 * intensity;
ADDRLP4 12
ADDRFP4 4
INDIRF4
CNSTF4 1092616192
MULF4
ASGNF4
line 533
;533:	if (distance >= maxDistance) return;
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LTF4 $478
ADDRGP4 $468
JUMPV
LABELV $478
line 535
;534:
;535:	if (!CG_GetScreenCoordinates(origin, &x, &y)) return;
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 84
ADDRGP4 CG_GetScreenCoordinates
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $480
ADDRGP4 $468
JUMPV
LABELV $480
line 536
;536:	if (x < 0 || x >= 640 || y < 0 || y >= 480) return;
ADDRLP4 88
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 88
INDIRF4
CNSTF4 0
LTF4 $486
ADDRLP4 88
INDIRF4
CNSTF4 1142947840
GEF4 $486
ADDRLP4 92
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 92
INDIRF4
CNSTF4 0
LTF4 $486
ADDRLP4 92
INDIRF4
CNSTF4 1139802112
LTF4 $482
LABELV $486
ADDRGP4 $468
JUMPV
LABELV $482
line 538
;537:
;538:	CG_SmoothTrace(&trace, cg.refdef.vieworg, NULL, NULL, origin, -1, CONTENTS_SOLID);
ADDRLP4 24
ARGP4
ADDRGP4 cg+109260+24
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_SmoothTrace
CALLV
pop
line 539
;539:	if (trace.fraction < 1) return;
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
GEF4 $489
ADDRGP4 $468
JUMPV
LABELV $489
line 541
;540:
;541:	intensity *= 1 - distance / maxDistance;
ADDRFP4 4
ADDRFP4 4
INDIRF4
CNSTF4 1065353216
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
DIVF4
SUBF4
MULF4
ASGNF4
line 543
;542:
;543:	AddLightBlob(x, y, intensity, color, fastFade);
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 AddLightBlob
CALLV
pop
line 544
;544:}
LABELV $468
endproc CG_CheckStrongLight 96 28
export CG_DrawLightBlobs
proc CG_DrawLightBlobs 56 36
line 553
;545:#endif
;546:
;547:/*
;548:===============
;549:JUHOX: CG_DrawLightBlobs
;550:===============
;551:*/
;552:#if SPECIAL_VIEW_MODES
;553:void CG_DrawLightBlobs(void) {
line 556
;554:	int i;
;555:
;556:	if (cg.viewMode != VIEW_amplifier) return;
ADDRGP4 cg+107628
INDIRI4
CNSTI4 2
EQI4 $493
ADDRGP4 $492
JUMPV
LABELV $493
line 558
;557:
;558:	for (i = 0; i < MAX_LIGHT_BLOBS; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $496
line 564
;559:		lightBlob_t* blob;
;560:		vec4_t color;
;561:		float x, y;
;562:		float rx, ry;
;563:
;564:		blob = &lightBlobs[i];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 36
MULI4
ADDRGP4 lightBlobs
ADDP4
ASGNP4
line 565
;565:		if (!blob->startTime) continue;
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CNSTI4 0
NEI4 $500
ADDRGP4 $497
JUMPV
LABELV $500
line 566
;566:		if (cg.time > blob->startTime + blob->fadeTime) {
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDI4
LEI4 $502
line 567
;567:			blob->startTime = 0;
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
CNSTI4 0
ASGNI4
line 568
;568:			continue;
ADDRGP4 $497
JUMPV
LABELV $502
line 571
;569:		}
;570:
;571:		color[0] = blob->color[0];
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ASGNF4
line 572
;572:		color[1] = blob->color[1];
ADDRLP4 8+4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 573
;573:		color[2] = blob->color[2];
ADDRLP4 8+8
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 574
;574:		color[3] = 1.0f - (float)(cg.time - blob->startTime) / (float)(blob->fadeTime);
ADDRLP4 8+12
CNSTF4 1065353216
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 575
;575:		trap_R_SetColor(color);
ADDRLP4 8
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 577
;576:
;577:		x = blob->x;
ADDRLP4 32
ADDRLP4 4
INDIRP4
INDIRF4
ASGNF4
line 578
;578:		y = blob->y;
ADDRLP4 36
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 579
;579:		rx = blob->radiusX;
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 580
;580:		ry = blob->radiusY;
ADDRLP4 28
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 581
;581:		trap_R_DrawStretchPic(x - rx, y - ry, 2 * rx, 2 * ry, 0, 0, 1, 1, cgs.media.bfgLFGlareShader);
ADDRLP4 32
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
ARGF4
ADDRLP4 36
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
ARGF4
ADDRLP4 24
INDIRF4
CNSTF4 1073741824
MULF4
ARGF4
ADDRLP4 28
INDIRF4
CNSTF4 1073741824
MULF4
ARGF4
CNSTF4 0
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 cgs+751220+480
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 582
;582:	}
LABELV $497
line 558
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 256
LTI4 $496
line 583
;583:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 584
;584:}
LABELV $492
endproc CG_DrawLightBlobs 56 36
data
align 4
LABELV shaderAnimNames
address $512
byte 4 0
skip 120
align 4
LABELV shaderAnimCounts
byte 4 23
skip 124
align 4
LABELV shaderAnimSTRatio
byte 4 1065353216
skip 124
export cl_numparticles
align 4
LABELV cl_numparticles
byte 4 1024
export initparticles
align 4
LABELV initparticles
byte 4 0
export CG_ClearParticles
code
proc CG_ClearParticles 24 12
line 691
;585:#endif
;586:
;587:
;588:
;589:// cg_particles.c  
;590:
;591:#define BLOODRED	2
;592:#define EMISIVEFADE	3
;593:#define GREY75		4
;594:
;595:typedef struct particle_s
;596:{
;597:	struct particle_s	*next;
;598:
;599:	float		time;
;600:	float		endtime;
;601:
;602:	vec3_t		org;
;603:	vec3_t		vel;
;604:	vec3_t		accel;
;605:	int			color;
;606:	float		colorvel;
;607:	float		alpha;
;608:	float		alphavel;
;609:	int			type;
;610:	qhandle_t	pshader;
;611:	
;612:	float		height;
;613:	float		width;
;614:				
;615:	float		endheight;
;616:	float		endwidth;
;617:	
;618:	float		start;
;619:	float		end;
;620:
;621:	float		startfade;
;622:	qboolean	rotate;
;623:	int			snum;
;624:	
;625:	qboolean	link;
;626:
;627:	// Ridah
;628:	int			shaderAnim;
;629:	int			roll;
;630:
;631:	int			accumroll;
;632:
;633:} cparticle_t;
;634:
;635:typedef enum
;636:{
;637:	P_NONE,
;638:	P_WEATHER,
;639:	P_FLAT,
;640:	P_SMOKE,
;641:	P_ROTATE,
;642:	P_WEATHER_TURBULENT,
;643:	P_ANIM,	// Ridah
;644:	P_BAT,
;645:	P_BLEED,
;646:	P_FLAT_SCALEUP,
;647:	P_FLAT_SCALEUP_FADE,
;648:	P_WEATHER_FLURRY,
;649:	P_SMOKE_IMPACT,
;650:	P_BUBBLE,
;651:	P_BUBBLE_TURBULENT,
;652:	P_SPRITE
;653:} particle_type_t;
;654:
;655:#define	MAX_SHADER_ANIMS		32
;656:#define	MAX_SHADER_ANIM_FRAMES	64
;657:
;658:static char *shaderAnimNames[MAX_SHADER_ANIMS] = {
;659:	"explode1",
;660:	NULL
;661:};
;662:static qhandle_t shaderAnims[MAX_SHADER_ANIMS][MAX_SHADER_ANIM_FRAMES];
;663:static int	shaderAnimCounts[MAX_SHADER_ANIMS] = {
;664:	23
;665:};
;666:static float	shaderAnimSTRatio[MAX_SHADER_ANIMS] = {
;667:	1.0f
;668:};
;669:static int	numShaderAnims;
;670:// done.
;671:
;672:#define		PARTICLE_GRAVITY	40
;673:#define		MAX_PARTICLES	1024
;674:
;675:cparticle_t	*active_particles, *free_particles;
;676:cparticle_t	particles[MAX_PARTICLES];
;677:int		cl_numparticles = MAX_PARTICLES;
;678:
;679:qboolean		initparticles = qfalse;
;680:vec3_t			pvforward, pvright, pvup;
;681:vec3_t			rforward, rright, rup;
;682:
;683:float			oldtime;
;684:
;685:/*
;686:===============
;687:CL_ClearParticles
;688:===============
;689:*/
;690:void CG_ClearParticles (void)
;691:{
line 694
;692:	int		i;
;693:
;694:	memset( particles, 0, sizeof(particles) );
ADDRGP4 particles
ARGP4
CNSTI4 0
ARGI4
CNSTI4 126976
ARGI4
ADDRGP4 memset
CALLP4
pop
line 696
;695:
;696:	free_particles = &particles[0];
ADDRGP4 free_particles
ADDRGP4 particles
ASGNP4
line 697
;697:	active_particles = NULL;
ADDRGP4 active_particles
CNSTP4 0
ASGNP4
line 699
;698:
;699:	for (i=0 ;i<cl_numparticles ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $517
JUMPV
LABELV $514
line 700
;700:	{
line 701
;701:		particles[i].next = &particles[i+1];
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+124
ADDP4
ASGNP4
line 702
;702:		particles[i].type = 0;
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles+64
ADDP4
CNSTI4 0
ASGNI4
line 703
;703:	}
LABELV $515
line 699
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $517
ADDRLP4 0
INDIRI4
ADDRGP4 cl_numparticles
INDIRI4
LTI4 $514
line 704
;704:	particles[cl_numparticles-1].next = NULL;
ADDRGP4 cl_numparticles
INDIRI4
CNSTI4 124
MULI4
ADDRGP4 particles-124
ADDP4
CNSTP4 0
ASGNP4
line 706
;705:
;706:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 709
;707:
;708:	// Ridah, init the shaderAnims
;709:	for (i=0; shaderAnimNames[i]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $525
JUMPV
LABELV $522
line 712
;710:		int j;
;711:
;712:		for (j=0; j<shaderAnimCounts[i]; j++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $529
JUMPV
LABELV $526
line 713
;713:			shaderAnims[i][j] = trap_R_RegisterShader( va("%s%i", shaderAnimNames[i], j+1) );
ADDRGP4 $530
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 714
;714:		}
LABELV $527
line 712
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $529
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
LTI4 $526
line 715
;715:	}
LABELV $523
line 709
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $525
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $522
line 716
;716:	numShaderAnims = i;
ADDRGP4 numShaderAnims
ADDRLP4 0
INDIRI4
ASGNI4
line 719
;717:	// done.
;718:
;719:	initparticles = qtrue;
ADDRGP4 initparticles
CNSTI4 1
ASGNI4
line 720
;720:}
LABELV $513
endproc CG_ClearParticles 24 12
export CG_AddParticleToScene
proc CG_AddParticleToScene 456 16
line 729
;721:
;722:
;723:/*
;724:=====================
;725:CG_AddParticleToScene
;726:=====================
;727:*/
;728:void CG_AddParticleToScene (cparticle_t *p, vec3_t org, float alpha)
;729:{
line 742
;730:
;731:	vec3_t		point;
;732:	polyVert_t	verts[4];
;733:	float		width;
;734:	float		height;
;735:	float		time, time2;
;736:	float		ratio;
;737:	float		invratio;
;738:	vec3_t		color;
;739:	polyVert_t	TRIverts[3];
;740:	vec3_t		rright2, rup2;
;741:
;742:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY
ADDRLP4 240
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $537
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $537
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $537
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $537
ADDRLP4 240
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $532
LABELV $537
line 744
;743:		|| p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT)
;744:	{// create a front facing polygon
line 746
;745:			
;746:		if (p->type != P_WEATHER_FLURRY)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
EQI4 $538
line 747
;747:		{
line 748
;748:			if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT)
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $542
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $540
LABELV $542
line 749
;749:			{
line 750
;750:				if (org[2] > p->end)			
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LEF4 $541
line 751
;751:				{	
line 752
;752:					p->time = cg.time;	
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 753
;753:					VectorCopy (org, p->org); // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 755
;754:									
;755:					p->org[2] = ( p->start + crandom () * 4 );
ADDRLP4 248
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 252
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 248
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 758
;756:					
;757:					
;758:					if (p->type == P_BUBBLE_TURBULENT)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $541
line 759
;759:					{
line 760
;760:						p->vel[0] = crandom() * 4;
ADDRLP4 256
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 256
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 256
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 761
;761:						p->vel[1] = crandom() * 4;
ADDRLP4 260
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 260
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 260
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 762
;762:					}
line 764
;763:				
;764:				}
line 765
;765:			}
ADDRGP4 $541
JUMPV
LABELV $540
line 767
;766:			else
;767:			{
line 768
;768:				if (org[2] < p->end)			
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
GEF4 $548
line 769
;769:				{	
line 770
;770:					p->time = cg.time;	
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 771
;771:					VectorCopy (org, p->org); // Ridah, fixes rare snow flakes that flicker on the ground
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
ADDRGP4 $552
JUMPV
LABELV $551
line 774
;772:									
;773:					while (p->org[2] < p->end) 
;774:					{
line 775
;775:						p->org[2] += (p->start - p->end); 
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 252
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 252
INDIRP4
ADDRLP4 252
INDIRP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ADDF4
ASGNF4
line 776
;776:					}
LABELV $552
line 773
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 248
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LTF4 $551
line 779
;777:					
;778:					
;779:					if (p->type == P_WEATHER_TURBULENT)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $554
line 780
;780:					{
line 781
;781:						p->vel[0] = crandom() * 16;
ADDRLP4 252
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 252
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 252
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 782
;782:						p->vel[1] = crandom() * 16;
ADDRLP4 256
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 256
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 256
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 783
;783:					}
LABELV $554
line 785
;784:				
;785:				}
LABELV $548
line 786
;786:			}
LABELV $541
line 790
;787:			
;788:
;789:			// Rafael snow pvs check
;790:			if (!p->link)
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
NEI4 $556
line 791
;791:				return;
ADDRGP4 $531
JUMPV
LABELV $556
line 793
;792:
;793:			p->alpha = 1;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 794
;794:		}
LABELV $538
line 797
;795:		
;796:		// Ridah, had to do this or MAX_POLYS is being exceeded in village1.bsp
;797:		if (Distance( cg.snap->ps.origin, org ) > 1024) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 244
INDIRF4
CNSTF4 1149239296
LEF4 $558
line 798
;798:			return;
ADDRGP4 $531
JUMPV
LABELV $558
line 802
;799:		}
;800:		// done.
;801:	
;802:		if (p->type == P_BUBBLE || p->type == P_BUBBLE_TURBULENT)
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 13
EQI4 $563
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 14
NEI4 $561
LABELV $563
line 803
;803:		{
line 804
;804:			VectorMA (org, -p->height, pvup, point);	
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 805
;805:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 806
;806:			VectorCopy (point, verts[0].xyz);	
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 807
;807:			verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 808
;808:			verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 809
;809:			verts[0].modulate[0] = 255;	
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 810
;810:			verts[0].modulate[1] = 255;	
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 811
;811:			verts[0].modulate[2] = 255;	
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 812
;812:			verts[0].modulate[3] = 255 * p->alpha;	
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $585
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $586
JUMPV
LABELV $585
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $586
ADDRLP4 12+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 814
;813:
;814:			VectorMA (org, -p->height, pvup, point);	
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 815
;815:			VectorMA (point, p->width, pvright, point);	
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 816
;816:			VectorCopy (point, verts[1].xyz);	
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 817
;817:			verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 818
;818:			verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 819
;819:			verts[1].modulate[0] = 255;	
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 820
;820:			verts[1].modulate[1] = 255;	
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 821
;821:			verts[1].modulate[2] = 255;	
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 822
;822:			verts[1].modulate[3] = 255 * p->alpha;	
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $615
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $616
JUMPV
LABELV $615
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $616
ADDRLP4 12+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 824
;823:
;824:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 825
;825:			VectorMA (point, p->width, pvright, point);	
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 826
;826:			VectorCopy (point, verts[2].xyz);	
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 827
;827:			verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 828
;828:			verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 829
;829:			verts[2].modulate[0] = 255;	
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 830
;830:			verts[2].modulate[1] = 255;	
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 831
;831:			verts[2].modulate[2] = 255;	
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 832
;832:			verts[2].modulate[3] = 255 * p->alpha;	
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $645
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $646
JUMPV
LABELV $645
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $646
ADDRLP4 12+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 834
;833:
;834:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 324
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 328
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 324
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 324
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 328
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 835
;835:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 332
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 332
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 836
;836:			VectorCopy (point, verts[3].xyz);	
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 837
;837:			verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 838
;838:			verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 839
;839:			verts[3].modulate[0] = 255;	
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 840
;840:			verts[3].modulate[1] = 255;	
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 841
;841:			verts[3].modulate[2] = 255;	
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 842
;842:			verts[3].modulate[3] = 255 * p->alpha;	
ADDRLP4 340
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $675
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $676
JUMPV
LABELV $675
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $676
ADDRLP4 12+72+20+3
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 843
;843:		}
ADDRGP4 $533
JUMPV
LABELV $561
line 845
;844:		else
;845:		{
line 846
;846:			VectorMA (org, -p->height, pvup, point);	
ADDRLP4 252
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 252
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 847
;847:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 848
;848:			VectorCopy( point, TRIverts[0].xyz );
ADDRLP4 108
ADDRLP4 0
INDIRB
ASGNB 12
line 849
;849:			TRIverts[0].st[0] = 1;
ADDRLP4 108+12
CNSTF4 1065353216
ASGNF4
line 850
;850:			TRIverts[0].st[1] = 0;
ADDRLP4 108+12+4
CNSTF4 0
ASGNF4
line 851
;851:			TRIverts[0].modulate[0] = 255;
ADDRLP4 108+20
CNSTU1 255
ASGNU1
line 852
;852:			TRIverts[0].modulate[1] = 255;
ADDRLP4 108+20+1
CNSTU1 255
ASGNU1
line 853
;853:			TRIverts[0].modulate[2] = 255;
ADDRLP4 108+20+2
CNSTU1 255
ASGNU1
line 854
;854:			TRIverts[0].modulate[3] = 255 * p->alpha;	
ADDRLP4 268
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $698
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $699
JUMPV
LABELV $698
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $699
ADDRLP4 108+20+3
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 856
;855:
;856:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 276
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 276
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 276
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 857
;857:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 858
;858:			VectorCopy (point, TRIverts[1].xyz);	
ADDRLP4 108+24
ADDRLP4 0
INDIRB
ASGNB 12
line 859
;859:			TRIverts[1].st[0] = 0;
ADDRLP4 108+24+12
CNSTF4 0
ASGNF4
line 860
;860:			TRIverts[1].st[1] = 0;
ADDRLP4 108+24+12+4
CNSTF4 0
ASGNF4
line 861
;861:			TRIverts[1].modulate[0] = 255;
ADDRLP4 108+24+20
CNSTU1 255
ASGNU1
line 862
;862:			TRIverts[1].modulate[1] = 255;
ADDRLP4 108+24+20+1
CNSTU1 255
ASGNU1
line 863
;863:			TRIverts[1].modulate[2] = 255;
ADDRLP4 108+24+20+2
CNSTU1 255
ASGNU1
line 864
;864:			TRIverts[1].modulate[3] = 255 * p->alpha;	
ADDRLP4 292
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $728
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $729
JUMPV
LABELV $728
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $729
ADDRLP4 108+24+20+3
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 866
;865:
;866:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 300
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 300
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 300
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 304
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 867
;867:			VectorMA (point, p->width, pvright, point);	
ADDRLP4 308
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 308
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 868
;868:			VectorCopy (point, TRIverts[2].xyz);	
ADDRLP4 108+48
ADDRLP4 0
INDIRB
ASGNB 12
line 869
;869:			TRIverts[2].st[0] = 0;
ADDRLP4 108+48+12
CNSTF4 0
ASGNF4
line 870
;870:			TRIverts[2].st[1] = 1;
ADDRLP4 108+48+12+4
CNSTF4 1065353216
ASGNF4
line 871
;871:			TRIverts[2].modulate[0] = 255;
ADDRLP4 108+48+20
CNSTU1 255
ASGNU1
line 872
;872:			TRIverts[2].modulate[1] = 255;
ADDRLP4 108+48+20+1
CNSTU1 255
ASGNU1
line 873
;873:			TRIverts[2].modulate[2] = 255;
ADDRLP4 108+48+20+2
CNSTU1 255
ASGNU1
line 874
;874:			TRIverts[2].modulate[3] = 255 * p->alpha;	
ADDRLP4 316
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $758
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $759
JUMPV
LABELV $758
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $759
ADDRLP4 108+48+20+3
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 875
;875:		}
line 877
;876:	
;877:	}
ADDRGP4 $533
JUMPV
LABELV $532
line 878
;878:	else if (p->type == P_SPRITE)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $760
line 879
;879:	{
line 883
;880:		vec3_t	rr, ru;
;881:		vec3_t	rotate_ang;
;882:
;883:		VectorSet (color, 1.0, 1.0, 0.5);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
line 884
;884:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 885
;885:		time2 = p->endtime - p->time;
ADDRLP4 280
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 280
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 280
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 886
;886:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 888
;887:
;888:		width = p->width + ( ratio * ( p->endwidth - p->width) );
ADDRLP4 284
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 284
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 889
;889:		height = p->height + ( ratio * ( p->endheight - p->height) );
ADDRLP4 288
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 288
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 891
;890:
;891:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $765
line 892
;892:			vectoangles( cg.refdef.viewaxis[0], rotate_ang );
ADDRGP4 cg+109260+36
ARGP4
ADDRLP4 268
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 893
;893:			rotate_ang[ROLL] += p->roll;
ADDRLP4 268+8
ADDRLP4 268+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 894
;894:			AngleVectors ( rotate_ang, NULL, rr, ru);
ADDRLP4 268
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 256
ARGP4
ADDRLP4 244
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 895
;895:		}
LABELV $765
line 897
;896:
;897:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $770
line 898
;898:			VectorMA (org, -height, ru, point);	
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 899
;899:			VectorMA (point, -width, rr, point);	
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 900
;900:		} else {
ADDRGP4 $771
JUMPV
LABELV $770
line 901
;901:			VectorMA (org, -height, pvup, point);	
ADDRLP4 292
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 296
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 292
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 296
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 902
;902:			VectorMA (point, -width, pvright, point);	
ADDRLP4 300
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 300
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 903
;903:		}
LABELV $771
line 904
;904:		VectorCopy (point, verts[0].xyz);	
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 905
;905:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 906
;906:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 907
;907:		verts[0].modulate[0] = 255;	
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 908
;908:		verts[0].modulate[1] = 255;	
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 909
;909:		verts[0].modulate[2] = 255;	
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 910
;910:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 912
;911:
;912:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $802
line 913
;913:			VectorMA (point, 2*height, ru, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 914
;914:		} else {
ADDRGP4 $803
JUMPV
LABELV $802
line 915
;915:			VectorMA (point, 2*height, pvup, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 916
;916:		}
LABELV $803
line 917
;917:		VectorCopy (point, verts[1].xyz);	
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 918
;918:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 919
;919:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 920
;920:		verts[1].modulate[0] = 255;	
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 921
;921:		verts[1].modulate[1] = 255;	
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 922
;922:		verts[1].modulate[2] = 255;	
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 923
;923:		verts[1].modulate[3] = 255;	
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 925
;924:
;925:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $833
line 926
;926:			VectorMA (point, 2*width, rr, point);	
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 256
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 256+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 256+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 927
;927:		} else {
ADDRGP4 $834
JUMPV
LABELV $833
line 928
;928:			VectorMA (point, 2*width, pvright, point);	
ADDRLP4 292
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 292
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 929
;929:		}
LABELV $834
line 930
;930:		VectorCopy (point, verts[2].xyz);	
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 931
;931:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 932
;932:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 933
;933:		verts[2].modulate[0] = 255;	
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 934
;934:		verts[2].modulate[1] = 255;	
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 935
;935:		verts[2].modulate[2] = 255;	
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 936
;936:		verts[2].modulate[3] = 255;	
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 938
;937:
;938:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $864
line 939
;939:			VectorMA (point, -2*height, ru, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 244
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 244+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 244+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 940
;940:		} else {
ADDRGP4 $865
JUMPV
LABELV $864
line 941
;941:			VectorMA (point, -2*height, pvup, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 942
;942:		}
LABELV $865
line 943
;943:		VectorCopy (point, verts[3].xyz);	
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 944
;944:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 945
;945:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 946
;946:		verts[3].modulate[0] = 255;	
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 947
;947:		verts[3].modulate[1] = 255;	
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 948
;948:		verts[3].modulate[2] = 255;	
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 949
;949:		verts[3].modulate[3] = 255;	
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 950
;950:	}
ADDRGP4 $761
JUMPV
LABELV $760
line 951
;951:	else if (p->type == P_SMOKE || p->type == P_SMOKE_IMPACT)
ADDRLP4 244
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $897
ADDRLP4 244
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $895
LABELV $897
line 952
;952:	{// create a front rotating facing polygon
line 954
;953:
;954:		if ( p->type == P_SMOKE_IMPACT && Distance( cg.snap->ps.origin, org ) > 1024) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $898
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 248
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 248
INDIRF4
CNSTF4 1149239296
LEF4 $898
line 955
;955:			return;
ADDRGP4 $531
JUMPV
LABELV $898
line 958
;956:		}
;957:
;958:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $901
line 959
;959:			VectorSet (color, 0.22f, 0.0f, 0.0f);
ADDRLP4 184
CNSTF4 1046562734
ASGNF4
ADDRLP4 184+4
CNSTF4 0
ASGNF4
ADDRLP4 184+8
CNSTF4 0
ASGNF4
ADDRGP4 $902
JUMPV
LABELV $901
line 960
;960:		else if (p->color == GREY75)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 4
NEI4 $905
line 961
;961:		{
line 965
;962:			float	len;
;963:			float	greyit;
;964:			float	val;
;965:			len = Distance (cg.snap->ps.origin, org);
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 264
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 256
ADDRLP4 264
INDIRF4
ASGNF4
line 966
;966:			if (!len)
ADDRLP4 256
INDIRF4
CNSTF4 0
NEF4 $908
line 967
;967:				len = 1;
ADDRLP4 256
CNSTF4 1065353216
ASGNF4
LABELV $908
line 969
;968:
;969:			val = 4096/len;
ADDRLP4 260
CNSTF4 1166016512
ADDRLP4 256
INDIRF4
DIVF4
ASGNF4
line 970
;970:			greyit = 0.25 * val;
ADDRLP4 252
ADDRLP4 260
INDIRF4
CNSTF4 1048576000
MULF4
ASGNF4
line 971
;971:			if (greyit > 0.5)
ADDRLP4 252
INDIRF4
CNSTF4 1056964608
LEF4 $910
line 972
;972:				greyit = 0.5;
ADDRLP4 252
CNSTF4 1056964608
ASGNF4
LABELV $910
line 974
;973:
;974:			VectorSet (color, greyit, greyit, greyit);
ADDRLP4 268
ADDRLP4 252
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 252
INDIRF4
ASGNF4
line 975
;975:		}
ADDRGP4 $906
JUMPV
LABELV $905
line 977
;976:		else
;977:			VectorSet (color, 1.0, 1.0, 1.0);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
LABELV $906
LABELV $902
line 979
;978:
;979:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 980
;980:		time2 = p->endtime - p->time;
ADDRLP4 252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 252
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 252
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 981
;981:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 983
;982:		
;983:		if (cg.time > p->startfade)
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
LEF4 $917
line 984
;984:		{
line 985
;985:			invratio = 1 - ( (cg.time - p->startfade) / (p->endtime - p->startfade) );
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
CNSTF4 1065353216
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
ADDRLP4 256
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
DIVF4
SUBF4
ASGNF4
line 987
;986:
;987:			if (p->color == EMISIVEFADE)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 3
NEI4 $921
line 988
;988:			{
line 990
;989:				float fval;
;990:				fval = (invratio * invratio);
ADDRLP4 264
ADDRLP4 204
INDIRF4
ASGNF4
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 264
INDIRF4
MULF4
ASGNF4
line 991
;991:				if (fval < 0)
ADDRLP4 260
INDIRF4
CNSTF4 0
GEF4 $923
line 992
;992:					fval = 0;
ADDRLP4 260
CNSTF4 0
ASGNF4
LABELV $923
line 993
;993:				VectorSet (color, fval , fval , fval );
ADDRLP4 268
ADDRLP4 260
INDIRF4
ASGNF4
ADDRLP4 184
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+4
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 184+8
ADDRLP4 260
INDIRF4
ASGNF4
line 994
;994:			}
LABELV $921
line 995
;995:			invratio *= p->alpha;
ADDRLP4 204
ADDRLP4 204
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
MULF4
ASGNF4
line 996
;996:		}
ADDRGP4 $918
JUMPV
LABELV $917
line 998
;997:		else 
;998:			invratio = 1 * p->alpha;
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
CNSTF4 1065353216
MULF4
ASGNF4
LABELV $918
line 1000
;999:
;1000:		if ( cgs.glconfig.hardwareType == GLHW_RAGEPRO )
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $927
line 1001
;1001:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $927
line 1003
;1002:
;1003:		if (invratio > 1)
ADDRLP4 204
INDIRF4
CNSTF4 1065353216
LEF4 $931
line 1004
;1004:			invratio = 1;
ADDRLP4 204
CNSTF4 1065353216
ASGNF4
LABELV $931
line 1006
;1005:	
;1006:		width = p->width + ( ratio * ( p->endwidth - p->width) );
ADDRLP4 256
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1007
;1007:		height = p->height + ( ratio * ( p->endheight - p->height) );
ADDRLP4 260
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 260
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1009
;1008:
;1009:		if (p->type != P_SMOKE_IMPACT)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
EQI4 $933
line 1010
;1010:		{
line 1013
;1011:			vec3_t temp;
;1012:
;1013:			vectoangles (rforward, temp);
ADDRGP4 rforward
ARGP4
ADDRLP4 264
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1014
;1014:			p->accumroll += p->roll;
ADDRLP4 276
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 280
ADDRLP4 276
INDIRP4
CNSTI4 120
ADDP4
ASGNP4
ADDRLP4 280
INDIRP4
ADDRLP4 280
INDIRP4
INDIRI4
ADDRLP4 276
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1015
;1015:			temp[ROLL] += p->accumroll * 0.1;
ADDRLP4 264+8
ADDRLP4 264+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 1016
;1016:			AngleVectors ( temp, NULL, rright2, rup2);
ADDRLP4 264
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 208
ARGP4
ADDRLP4 220
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1017
;1017:		}
ADDRGP4 $934
JUMPV
LABELV $933
line 1019
;1018:		else
;1019:		{
line 1020
;1020:			VectorCopy (rright, rright2);
ADDRLP4 208
ADDRGP4 rright
INDIRB
ASGNB 12
line 1021
;1021:			VectorCopy (rup, rup2);
ADDRLP4 220
ADDRGP4 rup
INDIRB
ASGNB 12
line 1022
;1022:		}
LABELV $934
line 1024
;1023:		
;1024:		if (p->rotate)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $936
line 1025
;1025:		{
line 1026
;1026:			VectorMA (org, -height, rup2, point);	
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 268
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1027
;1027:			VectorMA (point, -width, rright2, point);	
ADDRLP4 272
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 272
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1028
;1028:		}
ADDRGP4 $937
JUMPV
LABELV $936
line 1030
;1029:		else
;1030:		{
line 1031
;1031:			VectorMA (org, -p->height, pvup, point);	
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 264
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1032
;1032:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1033
;1033:		}
LABELV $937
line 1034
;1034:		VectorCopy (point, verts[0].xyz);	
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 1035
;1035:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 1036
;1036:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 1037
;1037:		verts[0].modulate[0] = 255 * color[0];	
ADDRLP4 268
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $963
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $964
JUMPV
LABELV $963
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $964
ADDRLP4 12+20
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 1038
;1038:		verts[0].modulate[1] = 255 * color[1];	
ADDRLP4 280
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 284
CNSTF4 1325400064
ASGNF4
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
LTF4 $969
ADDRLP4 276
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $970
JUMPV
LABELV $969
ADDRLP4 276
ADDRLP4 280
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $970
ADDRLP4 12+20+1
ADDRLP4 276
INDIRU4
CVUU1 4
ASGNU1
line 1039
;1039:		verts[0].modulate[2] = 255 * color[2];	
ADDRLP4 292
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $975
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $976
JUMPV
LABELV $975
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $976
ADDRLP4 12+20+2
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 1040
;1040:		verts[0].modulate[3] = 255 * invratio;	
ADDRLP4 304
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $980
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $981
JUMPV
LABELV $980
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $981
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 1042
;1041:
;1042:		if (p->rotate)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $982
line 1043
;1043:		{
line 1044
;1044:			VectorMA (org, -height, rup2, point);	
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1045
;1045:			VectorMA (point, width, rright2, point);	
ADDRLP4 320
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 1046
;1046:		}
ADDRGP4 $983
JUMPV
LABELV $982
line 1048
;1047:		else
;1048:		{
line 1049
;1049:			VectorMA (org, -p->height, pvup, point);	
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1050
;1050:			VectorMA (point, p->width, pvright, point);	
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1051
;1051:		}
LABELV $983
line 1052
;1052:		VectorCopy (point, verts[1].xyz);	
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 1053
;1053:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 1054
;1054:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 1055
;1055:		verts[1].modulate[0] = 255 * color[0];	
ADDRLP4 316
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 320
CNSTF4 1325400064
ASGNF4
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
LTF4 $1013
ADDRLP4 312
ADDRLP4 316
INDIRF4
ADDRLP4 320
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1014
JUMPV
LABELV $1013
ADDRLP4 312
ADDRLP4 316
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1014
ADDRLP4 12+24+20
ADDRLP4 312
INDIRU4
CVUU1 4
ASGNU1
line 1056
;1056:		verts[1].modulate[1] = 255 * color[1];	
ADDRLP4 328
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $1020
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1021
JUMPV
LABELV $1020
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1021
ADDRLP4 12+24+20+1
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 1057
;1057:		verts[1].modulate[2] = 255 * color[2];	
ADDRLP4 340
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 344
CNSTF4 1325400064
ASGNF4
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
LTF4 $1027
ADDRLP4 336
ADDRLP4 340
INDIRF4
ADDRLP4 344
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1028
JUMPV
LABELV $1027
ADDRLP4 336
ADDRLP4 340
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1028
ADDRLP4 12+24+20+2
ADDRLP4 336
INDIRU4
CVUU1 4
ASGNU1
line 1058
;1058:		verts[1].modulate[3] = 255 * invratio;	
ADDRLP4 352
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $1033
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1034
JUMPV
LABELV $1033
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1034
ADDRLP4 12+24+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 1060
;1059:
;1060:		if (p->rotate)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1035
line 1061
;1061:		{
line 1062
;1062:			VectorMA (org, height, rup2, point);	
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 1063
;1063:			VectorMA (point, width, rright2, point);	
ADDRLP4 368
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 368
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 1064
;1064:		}
ADDRGP4 $1036
JUMPV
LABELV $1035
line 1066
;1065:		else
;1066:		{
line 1067
;1067:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1068
;1068:			VectorMA (point, p->width, pvright, point);	
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1069
;1069:		}
LABELV $1036
line 1070
;1070:		VectorCopy (point, verts[2].xyz);	
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 1071
;1071:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 1072
;1072:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 1073
;1073:		verts[2].modulate[0] = 255 * color[0];	
ADDRLP4 364
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 368
CNSTF4 1325400064
ASGNF4
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
LTF4 $1066
ADDRLP4 360
ADDRLP4 364
INDIRF4
ADDRLP4 368
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1067
JUMPV
LABELV $1066
ADDRLP4 360
ADDRLP4 364
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1067
ADDRLP4 12+48+20
ADDRLP4 360
INDIRU4
CVUU1 4
ASGNU1
line 1074
;1074:		verts[2].modulate[1] = 255 * color[1];	
ADDRLP4 376
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $1073
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1074
JUMPV
LABELV $1073
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1074
ADDRLP4 12+48+20+1
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 1075
;1075:		verts[2].modulate[2] = 255 * color[2];	
ADDRLP4 388
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 392
CNSTF4 1325400064
ASGNF4
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
LTF4 $1080
ADDRLP4 384
ADDRLP4 388
INDIRF4
ADDRLP4 392
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1081
JUMPV
LABELV $1080
ADDRLP4 384
ADDRLP4 388
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1081
ADDRLP4 12+48+20+2
ADDRLP4 384
INDIRU4
CVUU1 4
ASGNU1
line 1076
;1076:		verts[2].modulate[3] = 255 * invratio;	
ADDRLP4 400
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 404
CNSTF4 1325400064
ASGNF4
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
LTF4 $1086
ADDRLP4 396
ADDRLP4 400
INDIRF4
ADDRLP4 404
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1087
JUMPV
LABELV $1086
ADDRLP4 396
ADDRLP4 400
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1087
ADDRLP4 12+48+20+3
ADDRLP4 396
INDIRU4
CVUU1 4
ASGNU1
line 1078
;1077:
;1078:		if (p->rotate)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1088
line 1079
;1079:		{
line 1080
;1080:			VectorMA (org, height, rup2, point);	
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 220+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 220+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 1081
;1081:			VectorMA (point, -width, rright2, point);	
ADDRLP4 416
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 416
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1082
;1082:		}
ADDRGP4 $1089
JUMPV
LABELV $1088
line 1084
;1083:		else
;1084:		{
line 1085
;1085:			VectorMA (org, p->height, pvup, point);	
ADDRLP4 408
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 412
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 408
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 408
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 412
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1086
;1086:			VectorMA (point, -p->width, pvright, point);	
ADDRLP4 416
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 416
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1087
;1087:		}
LABELV $1089
line 1088
;1088:		VectorCopy (point, verts[3].xyz);	
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 1089
;1089:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 1090
;1090:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 1091
;1091:		verts[3].modulate[0] = 255 * color[0];	
ADDRLP4 412
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 416
CNSTF4 1325400064
ASGNF4
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
LTF4 $1119
ADDRLP4 408
ADDRLP4 412
INDIRF4
ADDRLP4 416
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1120
JUMPV
LABELV $1119
ADDRLP4 408
ADDRLP4 412
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1120
ADDRLP4 12+72+20
ADDRLP4 408
INDIRU4
CVUU1 4
ASGNU1
line 1092
;1092:		verts[3].modulate[1] = 255 * color[1];	
ADDRLP4 424
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 428
CNSTF4 1325400064
ASGNF4
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
LTF4 $1126
ADDRLP4 420
ADDRLP4 424
INDIRF4
ADDRLP4 428
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1127
JUMPV
LABELV $1126
ADDRLP4 420
ADDRLP4 424
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1127
ADDRLP4 12+72+20+1
ADDRLP4 420
INDIRU4
CVUU1 4
ASGNU1
line 1093
;1093:		verts[3].modulate[2] = 255 * color[2];	
ADDRLP4 436
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 440
CNSTF4 1325400064
ASGNF4
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
LTF4 $1133
ADDRLP4 432
ADDRLP4 436
INDIRF4
ADDRLP4 440
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1134
JUMPV
LABELV $1133
ADDRLP4 432
ADDRLP4 436
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1134
ADDRLP4 12+72+20+2
ADDRLP4 432
INDIRU4
CVUU1 4
ASGNU1
line 1094
;1094:		verts[3].modulate[3] = 255  * invratio;	
ADDRLP4 448
ADDRLP4 204
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 452
CNSTF4 1325400064
ASGNF4
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
LTF4 $1139
ADDRLP4 444
ADDRLP4 448
INDIRF4
ADDRLP4 452
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1140
JUMPV
LABELV $1139
ADDRLP4 444
ADDRLP4 448
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1140
ADDRLP4 12+72+20+3
ADDRLP4 444
INDIRU4
CVUU1 4
ASGNU1
line 1096
;1095:		
;1096:	}
ADDRGP4 $896
JUMPV
LABELV $895
line 1097
;1097:	else if (p->type == P_BLEED)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1141
line 1098
;1098:	{
line 1103
;1099:		vec3_t	rr, ru;
;1100:		vec3_t	rotate_ang;
;1101:		float	alpha;
;1102:
;1103:		alpha = p->alpha;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ASGNF4
line 1105
;1104:		
;1105:		if ( cgs.glconfig.hardwareType == GLHW_RAGEPRO )
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $1143
line 1106
;1106:			alpha = 1;
ADDRLP4 272
CNSTF4 1065353216
ASGNF4
LABELV $1143
line 1108
;1107:
;1108:		if (p->roll) 
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1147
line 1109
;1109:		{
line 1110
;1110:			vectoangles( cg.refdef.viewaxis[0], rotate_ang );
ADDRGP4 cg+109260+36
ARGP4
ADDRLP4 276
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1111
;1111:			rotate_ang[ROLL] += p->roll;
ADDRLP4 276+8
ADDRLP4 276+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1112
;1112:			AngleVectors ( rotate_ang, NULL, rr, ru);
ADDRLP4 276
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 248
ARGP4
ADDRLP4 260
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1113
;1113:		}
ADDRGP4 $1148
JUMPV
LABELV $1147
line 1115
;1114:		else
;1115:		{
line 1116
;1116:			VectorCopy (pvup, ru);
ADDRLP4 260
ADDRGP4 pvup
INDIRB
ASGNB 12
line 1117
;1117:			VectorCopy (pvright, rr);
ADDRLP4 248
ADDRGP4 pvright
INDIRB
ASGNB 12
line 1118
;1118:		}
LABELV $1148
line 1120
;1119:
;1120:		VectorMA (org, -p->height, ru, point);	
ADDRLP4 288
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 288
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 288
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1121
;1121:		VectorMA (point, -p->width, rr, point);	
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1122
;1122:		VectorCopy (point, verts[0].xyz);	
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 1123
;1123:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 1124
;1124:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 1125
;1125:		verts[0].modulate[0] = 111;	
ADDRLP4 12+20
CNSTU1 111
ASGNU1
line 1126
;1126:		verts[0].modulate[1] = 19;	
ADDRLP4 12+20+1
CNSTU1 19
ASGNU1
line 1127
;1127:		verts[0].modulate[2] = 9;	
ADDRLP4 12+20+2
CNSTU1 9
ASGNU1
line 1128
;1128:		verts[0].modulate[3] = 255 * alpha;	
ADDRLP4 304
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $1173
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1174
JUMPV
LABELV $1173
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1174
ADDRLP4 12+20+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 1130
;1129:
;1130:		VectorMA (org, -p->height, ru, point);	
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 316
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1131
;1131:		VectorMA (point, p->width, rr, point);	
ADDRLP4 320
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 320
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1132
;1132:		VectorCopy (point, verts[1].xyz);	
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 1133
;1133:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 1134
;1134:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 1135
;1135:		verts[1].modulate[0] = 111;	
ADDRLP4 12+24+20
CNSTU1 111
ASGNU1
line 1136
;1136:		verts[1].modulate[1] = 19;	
ADDRLP4 12+24+20+1
CNSTU1 19
ASGNU1
line 1137
;1137:		verts[1].modulate[2] = 9;	
ADDRLP4 12+24+20+2
CNSTU1 9
ASGNU1
line 1138
;1138:		verts[1].modulate[3] = 255 * alpha;	
ADDRLP4 328
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 332
CNSTF4 1325400064
ASGNF4
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
LTF4 $1203
ADDRLP4 324
ADDRLP4 328
INDIRF4
ADDRLP4 332
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1204
JUMPV
LABELV $1203
ADDRLP4 324
ADDRLP4 328
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1204
ADDRLP4 12+24+20+3
ADDRLP4 324
INDIRU4
CVUU1 4
ASGNU1
line 1140
;1139:
;1140:		VectorMA (org, p->height, ru, point);	
ADDRLP4 336
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 340
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 336
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 336
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 340
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1141
;1141:		VectorMA (point, p->width, rr, point);	
ADDRLP4 344
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 344
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1142
;1142:		VectorCopy (point, verts[2].xyz);	
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 1143
;1143:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 1144
;1144:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 1145
;1145:		verts[2].modulate[0] = 111;	
ADDRLP4 12+48+20
CNSTU1 111
ASGNU1
line 1146
;1146:		verts[2].modulate[1] = 19;	
ADDRLP4 12+48+20+1
CNSTU1 19
ASGNU1
line 1147
;1147:		verts[2].modulate[2] = 9;	
ADDRLP4 12+48+20+2
CNSTU1 9
ASGNU1
line 1148
;1148:		verts[2].modulate[3] = 255 * alpha;	
ADDRLP4 352
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 356
CNSTF4 1325400064
ASGNF4
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
LTF4 $1233
ADDRLP4 348
ADDRLP4 352
INDIRF4
ADDRLP4 356
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1234
JUMPV
LABELV $1233
ADDRLP4 348
ADDRLP4 352
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1234
ADDRLP4 12+48+20+3
ADDRLP4 348
INDIRU4
CVUU1 4
ASGNU1
line 1150
;1149:
;1150:		VectorMA (org, p->height, ru, point);	
ADDRLP4 360
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 364
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 360
INDIRP4
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 360
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 364
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1151
;1151:		VectorMA (point, -p->width, rr, point);	
ADDRLP4 368
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 368
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1152
;1152:		VectorCopy (point, verts[3].xyz);	
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 1153
;1153:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 1154
;1154:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 1155
;1155:		verts[3].modulate[0] = 111;	
ADDRLP4 12+72+20
CNSTU1 111
ASGNU1
line 1156
;1156:		verts[3].modulate[1] = 19;	
ADDRLP4 12+72+20+1
CNSTU1 19
ASGNU1
line 1157
;1157:		verts[3].modulate[2] = 9;	
ADDRLP4 12+72+20+2
CNSTU1 9
ASGNU1
line 1158
;1158:		verts[3].modulate[3] = 255 * alpha;	
ADDRLP4 376
ADDRLP4 272
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 380
CNSTF4 1325400064
ASGNF4
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
LTF4 $1263
ADDRLP4 372
ADDRLP4 376
INDIRF4
ADDRLP4 380
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1264
JUMPV
LABELV $1263
ADDRLP4 372
ADDRLP4 376
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1264
ADDRLP4 12+72+20+3
ADDRLP4 372
INDIRU4
CVUU1 4
ASGNU1
line 1160
;1159:
;1160:	}
ADDRGP4 $1142
JUMPV
LABELV $1141
line 1161
;1161:	else if (p->type == P_FLAT_SCALEUP)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $1265
line 1162
;1162:	{
line 1166
;1163:		float width, height;
;1164:		float sinR, cosR;
;1165:
;1166:		if (p->color == BLOODRED)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1267
line 1167
;1167:			VectorSet (color, 1, 1, 1);
ADDRLP4 184
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+4
CNSTF4 1065353216
ASGNF4
ADDRLP4 184+8
CNSTF4 1065353216
ASGNF4
ADDRGP4 $1268
JUMPV
LABELV $1267
line 1169
;1168:		else
;1169:			VectorSet (color, 0.5, 0.5, 0.5);
ADDRLP4 184
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+4
CNSTF4 1056964608
ASGNF4
ADDRLP4 184+8
CNSTF4 1056964608
ASGNF4
LABELV $1268
line 1171
;1170:		
;1171:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1172
;1172:		time2 = p->endtime - p->time;
ADDRLP4 264
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 264
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 264
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1173
;1173:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 1175
;1174:
;1175:		width = p->width + ( ratio * ( p->endwidth - p->width) );
ADDRLP4 268
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 256
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 268
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1176
;1176:		height = p->height + ( ratio * ( p->endheight - p->height) );
ADDRLP4 272
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 260
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 272
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1178
;1177:
;1178:		if (width > p->endwidth)
ADDRLP4 256
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
LEF4 $1274
line 1179
;1179:			width = p->endwidth;
ADDRLP4 256
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
LABELV $1274
line 1181
;1180:
;1181:		if (height > p->endheight)
ADDRLP4 260
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
LEF4 $1276
line 1182
;1182:			height = p->endheight;
ADDRLP4 260
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
LABELV $1276
line 1184
;1183:
;1184:		sinR = height * sin(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 276
ADDRGP4 sin
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 280
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 248
ADDRLP4 260
INDIRF4
ADDRLP4 276
INDIRF4
MULF4
ADDRLP4 280
INDIRF4
MULF4
ASGNF4
line 1185
;1185:		cosR = width * cos(DEG2RAD(p->roll)) * sqrt(2);
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1016003125
MULF4
ARGF4
ADDRLP4 284
ADDRGP4 cos
CALLF4
ASGNF4
CNSTF4 1073741824
ARGF4
ADDRLP4 288
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 252
ADDRLP4 256
INDIRF4
ADDRLP4 284
INDIRF4
MULF4
ADDRLP4 288
INDIRF4
MULF4
ASGNF4
line 1187
;1186:
;1187:		VectorCopy (org, verts[0].xyz);	
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1188
;1188:		verts[0].xyz[0] -= sinR;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 1189
;1189:		verts[0].xyz[1] -= cosR;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 1190
;1190:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 1191
;1191:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 1192
;1192:		verts[0].modulate[0] = 255 * color[0];	
ADDRLP4 296
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 300
CNSTF4 1325400064
ASGNF4
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
LTF4 $1284
ADDRLP4 292
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1285
JUMPV
LABELV $1284
ADDRLP4 292
ADDRLP4 296
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1285
ADDRLP4 12+20
ADDRLP4 292
INDIRU4
CVUU1 4
ASGNU1
line 1193
;1193:		verts[0].modulate[1] = 255 * color[1];	
ADDRLP4 308
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 312
CNSTF4 1325400064
ASGNF4
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
LTF4 $1290
ADDRLP4 304
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1291
JUMPV
LABELV $1290
ADDRLP4 304
ADDRLP4 308
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1291
ADDRLP4 12+20+1
ADDRLP4 304
INDIRU4
CVUU1 4
ASGNU1
line 1194
;1194:		verts[0].modulate[2] = 255 * color[2];	
ADDRLP4 320
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 324
CNSTF4 1325400064
ASGNF4
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
LTF4 $1296
ADDRLP4 316
ADDRLP4 320
INDIRF4
ADDRLP4 324
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1297
JUMPV
LABELV $1296
ADDRLP4 316
ADDRLP4 320
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1297
ADDRLP4 12+20+2
ADDRLP4 316
INDIRU4
CVUU1 4
ASGNU1
line 1195
;1195:		verts[0].modulate[3] = 255;	
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 1197
;1196:
;1197:		VectorCopy (org, verts[1].xyz);	
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1198
;1198:		verts[1].xyz[0] -= cosR;	
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRLP4 252
INDIRF4
SUBF4
ASGNF4
line 1199
;1199:		verts[1].xyz[1] += sinR;	
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 1200
;1200:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 1201
;1201:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 1202
;1202:		verts[1].modulate[0] = 255 * color[0];	
ADDRLP4 332
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 336
CNSTF4 1325400064
ASGNF4
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
LTF4 $1312
ADDRLP4 328
ADDRLP4 332
INDIRF4
ADDRLP4 336
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1313
JUMPV
LABELV $1312
ADDRLP4 328
ADDRLP4 332
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1313
ADDRLP4 12+24+20
ADDRLP4 328
INDIRU4
CVUU1 4
ASGNU1
line 1203
;1203:		verts[1].modulate[1] = 255 * color[1];	
ADDRLP4 344
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 348
CNSTF4 1325400064
ASGNF4
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
LTF4 $1319
ADDRLP4 340
ADDRLP4 344
INDIRF4
ADDRLP4 348
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1320
JUMPV
LABELV $1319
ADDRLP4 340
ADDRLP4 344
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1320
ADDRLP4 12+24+20+1
ADDRLP4 340
INDIRU4
CVUU1 4
ASGNU1
line 1204
;1204:		verts[1].modulate[2] = 255 * color[2];	
ADDRLP4 356
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 360
CNSTF4 1325400064
ASGNF4
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
LTF4 $1326
ADDRLP4 352
ADDRLP4 356
INDIRF4
ADDRLP4 360
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1327
JUMPV
LABELV $1326
ADDRLP4 352
ADDRLP4 356
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1327
ADDRLP4 12+24+20+2
ADDRLP4 352
INDIRU4
CVUU1 4
ASGNU1
line 1205
;1205:		verts[1].modulate[3] = 255;	
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 1207
;1206:
;1207:		VectorCopy (org, verts[2].xyz);	
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1208
;1208:		verts[2].xyz[0] += sinR;	
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRLP4 248
INDIRF4
ADDF4
ASGNF4
line 1209
;1209:		verts[2].xyz[1] += cosR;	
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 1210
;1210:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 1211
;1211:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 1212
;1212:		verts[2].modulate[0] = 255 * color[0];	
ADDRLP4 368
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 372
CNSTF4 1325400064
ASGNF4
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
LTF4 $1343
ADDRLP4 364
ADDRLP4 368
INDIRF4
ADDRLP4 372
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1344
JUMPV
LABELV $1343
ADDRLP4 364
ADDRLP4 368
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1344
ADDRLP4 12+48+20
ADDRLP4 364
INDIRU4
CVUU1 4
ASGNU1
line 1213
;1213:		verts[2].modulate[1] = 255 * color[1];	
ADDRLP4 380
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 384
CNSTF4 1325400064
ASGNF4
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
LTF4 $1350
ADDRLP4 376
ADDRLP4 380
INDIRF4
ADDRLP4 384
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1351
JUMPV
LABELV $1350
ADDRLP4 376
ADDRLP4 380
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1351
ADDRLP4 12+48+20+1
ADDRLP4 376
INDIRU4
CVUU1 4
ASGNU1
line 1214
;1214:		verts[2].modulate[2] = 255 * color[2];	
ADDRLP4 392
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 396
CNSTF4 1325400064
ASGNF4
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
LTF4 $1357
ADDRLP4 388
ADDRLP4 392
INDIRF4
ADDRLP4 396
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1358
JUMPV
LABELV $1357
ADDRLP4 388
ADDRLP4 392
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1358
ADDRLP4 12+48+20+2
ADDRLP4 388
INDIRU4
CVUU1 4
ASGNU1
line 1215
;1215:		verts[2].modulate[3] = 255;	
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 1217
;1216:
;1217:		VectorCopy (org, verts[3].xyz);	
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1218
;1218:		verts[3].xyz[0] += cosR;	
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRLP4 252
INDIRF4
ADDF4
ASGNF4
line 1219
;1219:		verts[3].xyz[1] -= sinR;	
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRLP4 248
INDIRF4
SUBF4
ASGNF4
line 1220
;1220:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 1221
;1221:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 1222
;1222:		verts[3].modulate[0] = 255 * color[0];	
ADDRLP4 404
ADDRLP4 184
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 408
CNSTF4 1325400064
ASGNF4
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
LTF4 $1374
ADDRLP4 400
ADDRLP4 404
INDIRF4
ADDRLP4 408
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1375
JUMPV
LABELV $1374
ADDRLP4 400
ADDRLP4 404
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1375
ADDRLP4 12+72+20
ADDRLP4 400
INDIRU4
CVUU1 4
ASGNU1
line 1223
;1223:		verts[3].modulate[1] = 255 * color[1];	
ADDRLP4 416
ADDRLP4 184+4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 420
CNSTF4 1325400064
ASGNF4
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
LTF4 $1381
ADDRLP4 412
ADDRLP4 416
INDIRF4
ADDRLP4 420
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1382
JUMPV
LABELV $1381
ADDRLP4 412
ADDRLP4 416
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1382
ADDRLP4 12+72+20+1
ADDRLP4 412
INDIRU4
CVUU1 4
ASGNU1
line 1224
;1224:		verts[3].modulate[2] = 255 * color[2];	
ADDRLP4 428
ADDRLP4 184+8
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 432
CNSTF4 1325400064
ASGNF4
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
LTF4 $1388
ADDRLP4 424
ADDRLP4 428
INDIRF4
ADDRLP4 432
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1389
JUMPV
LABELV $1388
ADDRLP4 424
ADDRLP4 428
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1389
ADDRLP4 12+72+20+2
ADDRLP4 424
INDIRU4
CVUU1 4
ASGNU1
line 1225
;1225:		verts[3].modulate[3] = 255;		
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 1226
;1226:	}
ADDRGP4 $1266
JUMPV
LABELV $1265
line 1227
;1227:	else if (p->type == P_FLAT)
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1393
line 1228
;1228:	{
line 1230
;1229:
;1230:		VectorCopy (org, verts[0].xyz);	
ADDRLP4 12
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1231
;1231:		verts[0].xyz[0] -= p->height;	
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1232
;1232:		verts[0].xyz[1] -= p->width;	
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1233
;1233:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 1234
;1234:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 1235
;1235:		verts[0].modulate[0] = 255;	
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 1236
;1236:		verts[0].modulate[1] = 255;	
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 1237
;1237:		verts[0].modulate[2] = 255;	
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 1238
;1238:		verts[0].modulate[3] = 255;	
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 1240
;1239:
;1240:		VectorCopy (org, verts[1].xyz);	
ADDRLP4 12+24
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1241
;1241:		verts[1].xyz[0] -= p->height;	
ADDRLP4 12+24
ADDRLP4 12+24
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1242
;1242:		verts[1].xyz[1] += p->width;	
ADDRLP4 12+24+4
ADDRLP4 12+24+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1243
;1243:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 1244
;1244:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 1245
;1245:		verts[1].modulate[0] = 255;	
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 1246
;1246:		verts[1].modulate[1] = 255;	
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 1247
;1247:		verts[1].modulate[2] = 255;	
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 1248
;1248:		verts[1].modulate[3] = 255;	
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 1250
;1249:
;1250:		VectorCopy (org, verts[2].xyz);	
ADDRLP4 12+48
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1251
;1251:		verts[2].xyz[0] += p->height;	
ADDRLP4 12+48
ADDRLP4 12+48
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1252
;1252:		verts[2].xyz[1] += p->width;	
ADDRLP4 12+48+4
ADDRLP4 12+48+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1253
;1253:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 1254
;1254:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 1255
;1255:		verts[2].modulate[0] = 255;	
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 1256
;1256:		verts[2].modulate[1] = 255;	
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 1257
;1257:		verts[2].modulate[2] = 255;	
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 1258
;1258:		verts[2].modulate[3] = 255;	
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 1260
;1259:
;1260:		VectorCopy (org, verts[3].xyz);	
ADDRLP4 12+72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1261
;1261:		verts[3].xyz[0] += p->height;	
ADDRLP4 12+72
ADDRLP4 12+72
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1262
;1262:		verts[3].xyz[1] -= p->width;	
ADDRLP4 12+72+4
ADDRLP4 12+72+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1263
;1263:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 1264
;1264:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 1265
;1265:		verts[3].modulate[0] = 255;	
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 1266
;1266:		verts[3].modulate[1] = 255;	
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 1267
;1267:		verts[3].modulate[2] = 255;	
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 1268
;1268:		verts[3].modulate[3] = 255;	
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 1270
;1269:
;1270:	}
ADDRGP4 $1394
JUMPV
LABELV $1393
line 1272
;1271:	// Ridah
;1272:	else if (p->type == P_ANIM) {
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1466
line 1277
;1273:		vec3_t	rr, ru;
;1274:		vec3_t	rotate_ang;
;1275:		int i, j;
;1276:
;1277:		time = cg.time - p->time;
ADDRLP4 232
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1278
;1278:		time2 = p->endtime - p->time;
ADDRLP4 292
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 236
ADDRLP4 292
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 292
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1279
;1279:		ratio = time / time2;
ADDRLP4 200
ADDRLP4 232
INDIRF4
ADDRLP4 236
INDIRF4
DIVF4
ASGNF4
line 1280
;1280:		if (ratio >= 1.0f) {
ADDRLP4 200
INDIRF4
CNSTF4 1065353216
LTF4 $1469
line 1281
;1281:			ratio = 0.9999f;
ADDRLP4 200
CNSTF4 1065351538
ASGNF4
line 1282
;1282:		}
LABELV $1469
line 1284
;1283:
;1284:		width = p->width + ( ratio * ( p->endwidth - p->width) );
ADDRLP4 296
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 296
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1285
;1285:		height = p->height + ( ratio * ( p->endheight - p->height) );
ADDRLP4 300
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDRLP4 300
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1288
;1286:
;1287:		// if we are "inside" this sprite, don't draw
;1288:		if (Distance( cg.snap->ps.origin, org ) < width/1.5) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 304
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1059760811
MULF4
GEF4 $1471
line 1289
;1289:			return;
ADDRGP4 $531
JUMPV
LABELV $1471
line 1292
;1290:		}
;1291:
;1292:		i = p->shaderAnim;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 1293
;1293:		j = (int)floor(ratio * shaderAnimCounts[p->shaderAnim]);
ADDRLP4 200
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimCounts
ADDP4
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 308
ADDRGP4 floor
CALLF4
ASGNF4
ADDRLP4 276
ADDRLP4 308
INDIRF4
CVFI4 4
ASGNI4
line 1294
;1294:		p->pshader = shaderAnims[i][j];
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 276
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 272
INDIRI4
CNSTI4 8
LSHI4
ADDRGP4 shaderAnims
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1296
;1295:
;1296:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1474
line 1297
;1297:			vectoangles( cg.refdef.viewaxis[0], rotate_ang );
ADDRGP4 cg+109260+36
ARGP4
ADDRLP4 280
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1298
;1298:			rotate_ang[ROLL] += p->roll;
ADDRLP4 280+8
ADDRLP4 280+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1299
;1299:			AngleVectors ( rotate_ang, NULL, rr, ru);
ADDRLP4 280
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 260
ARGP4
ADDRLP4 248
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1300
;1300:		}
LABELV $1474
line 1302
;1301:
;1302:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1479
line 1303
;1303:			VectorMA (org, -height, ru, point);	
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1304
;1304:			VectorMA (point, -width, rr, point);	
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1305
;1305:		} else {
ADDRGP4 $1480
JUMPV
LABELV $1479
line 1306
;1306:			VectorMA (org, -height, pvup, point);	
ADDRLP4 312
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 316
ADDRLP4 180
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 312
INDIRP4
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 312
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 316
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1307
;1307:			VectorMA (point, -width, pvright, point);	
ADDRLP4 320
ADDRLP4 196
INDIRF4
NEGF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 320
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1308
;1308:		}
LABELV $1480
line 1309
;1309:		VectorCopy (point, verts[0].xyz);	
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 1310
;1310:		verts[0].st[0] = 0;	
ADDRLP4 12+12
CNSTF4 0
ASGNF4
line 1311
;1311:		verts[0].st[1] = 0;	
ADDRLP4 12+12+4
CNSTF4 0
ASGNF4
line 1312
;1312:		verts[0].modulate[0] = 255;	
ADDRLP4 12+20
CNSTU1 255
ASGNU1
line 1313
;1313:		verts[0].modulate[1] = 255;	
ADDRLP4 12+20+1
CNSTU1 255
ASGNU1
line 1314
;1314:		verts[0].modulate[2] = 255;	
ADDRLP4 12+20+2
CNSTU1 255
ASGNU1
line 1315
;1315:		verts[0].modulate[3] = 255;
ADDRLP4 12+20+3
CNSTU1 255
ASGNU1
line 1317
;1316:
;1317:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1511
line 1318
;1318:			VectorMA (point, 2*height, ru, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 1319
;1319:		} else {
ADDRGP4 $1512
JUMPV
LABELV $1511
line 1320
;1320:			VectorMA (point, 2*height, pvup, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 1321
;1321:		}
LABELV $1512
line 1322
;1322:		VectorCopy (point, verts[1].xyz);	
ADDRLP4 12+24
ADDRLP4 0
INDIRB
ASGNB 12
line 1323
;1323:		verts[1].st[0] = 0;	
ADDRLP4 12+24+12
CNSTF4 0
ASGNF4
line 1324
;1324:		verts[1].st[1] = 1;	
ADDRLP4 12+24+12+4
CNSTF4 1065353216
ASGNF4
line 1325
;1325:		verts[1].modulate[0] = 255;	
ADDRLP4 12+24+20
CNSTU1 255
ASGNU1
line 1326
;1326:		verts[1].modulate[1] = 255;	
ADDRLP4 12+24+20+1
CNSTU1 255
ASGNU1
line 1327
;1327:		verts[1].modulate[2] = 255;	
ADDRLP4 12+24+20+2
CNSTU1 255
ASGNU1
line 1328
;1328:		verts[1].modulate[3] = 255;	
ADDRLP4 12+24+20+3
CNSTU1 255
ASGNU1
line 1330
;1329:
;1330:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1542
line 1331
;1331:			VectorMA (point, 2*width, rr, point);	
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 260+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 260+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 1332
;1332:		} else {
ADDRGP4 $1543
JUMPV
LABELV $1542
line 1333
;1333:			VectorMA (point, 2*width, pvright, point);	
ADDRLP4 312
ADDRLP4 196
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvright
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvright+4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvright+8
INDIRF4
ADDRLP4 196
INDIRF4
CNSTF4 1073741824
MULF4
MULF4
ADDF4
ASGNF4
line 1334
;1334:		}
LABELV $1543
line 1335
;1335:		VectorCopy (point, verts[2].xyz);	
ADDRLP4 12+48
ADDRLP4 0
INDIRB
ASGNB 12
line 1336
;1336:		verts[2].st[0] = 1;	
ADDRLP4 12+48+12
CNSTF4 1065353216
ASGNF4
line 1337
;1337:		verts[2].st[1] = 1;	
ADDRLP4 12+48+12+4
CNSTF4 1065353216
ASGNF4
line 1338
;1338:		verts[2].modulate[0] = 255;	
ADDRLP4 12+48+20
CNSTU1 255
ASGNU1
line 1339
;1339:		verts[2].modulate[1] = 255;	
ADDRLP4 12+48+20+1
CNSTU1 255
ASGNU1
line 1340
;1340:		verts[2].modulate[2] = 255;	
ADDRLP4 12+48+20+2
CNSTU1 255
ASGNU1
line 1341
;1341:		verts[2].modulate[3] = 255;	
ADDRLP4 12+48+20+3
CNSTU1 255
ASGNU1
line 1343
;1342:
;1343:		if (p->roll) {
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1573
line 1344
;1344:			VectorMA (point, -2*height, ru, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 248
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 1345
;1345:		} else {
ADDRGP4 $1574
JUMPV
LABELV $1573
line 1346
;1346:			VectorMA (point, -2*height, pvup, point);	
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 pvup
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 pvup+4
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 pvup+8
INDIRF4
ADDRLP4 180
INDIRF4
CNSTF4 3221225472
MULF4
MULF4
ADDF4
ASGNF4
line 1347
;1347:		}
LABELV $1574
line 1348
;1348:		VectorCopy (point, verts[3].xyz);	
ADDRLP4 12+72
ADDRLP4 0
INDIRB
ASGNB 12
line 1349
;1349:		verts[3].st[0] = 1;	
ADDRLP4 12+72+12
CNSTF4 1065353216
ASGNF4
line 1350
;1350:		verts[3].st[1] = 0;	
ADDRLP4 12+72+12+4
CNSTF4 0
ASGNF4
line 1351
;1351:		verts[3].modulate[0] = 255;	
ADDRLP4 12+72+20
CNSTU1 255
ASGNU1
line 1352
;1352:		verts[3].modulate[1] = 255;	
ADDRLP4 12+72+20+1
CNSTU1 255
ASGNU1
line 1353
;1353:		verts[3].modulate[2] = 255;	
ADDRLP4 12+72+20+2
CNSTU1 255
ASGNU1
line 1354
;1354:		verts[3].modulate[3] = 255;	
ADDRLP4 12+72+20+3
CNSTU1 255
ASGNU1
line 1355
;1355:	}
LABELV $1466
LABELV $1394
LABELV $1266
LABELV $1142
LABELV $896
LABELV $761
LABELV $533
line 1358
;1356:	// done.
;1357:	
;1358:	if (!p->pshader) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1604
line 1361
;1359:// (SA) temp commented out for DM
;1360://		CG_Printf ("CG_AddParticleToScene type %d p->pshader == ZERO\n", p->type);
;1361:		return;
ADDRGP4 $531
JUMPV
LABELV $1604
line 1364
;1362:	}
;1363:
;1364:	if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT || p->type == P_WEATHER_FLURRY)
ADDRLP4 248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1609
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1609
ADDRLP4 248
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1606
LABELV $1609
line 1365
;1365:		trap_R_AddPolyToScene( p->pshader, 3, TRIverts );
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 108
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
ADDRGP4 $1607
JUMPV
LABELV $1606
line 1367
;1366:	else
;1367:		trap_R_AddPolyToScene( p->pshader, 4, verts );
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
LABELV $1607
line 1369
;1368:
;1369:}
LABELV $531
endproc CG_AddParticleToScene 456 16
data
align 4
LABELV roll
byte 4 0
export CG_AddParticles
code
proc CG_AddParticles 96 16
line 1380
;1370:
;1371:// Ridah, made this static so it doesn't interfere with other files
;1372:static float roll = 0.0;
;1373:
;1374:/*
;1375:===============
;1376:CG_AddParticles
;1377:===============
;1378:*/
;1379:void CG_AddParticles (void)
;1380:{
line 1390
;1381:	cparticle_t		*p, *next;
;1382:	float			alpha;
;1383:	float			time, time2;
;1384:	vec3_t			org;
;1385:	int				color;
;1386:	cparticle_t		*active, *tail;
;1387:	int				type;
;1388:	vec3_t			rotate_ang;
;1389:
;1390:	if (!initparticles)
ADDRGP4 initparticles
INDIRI4
CNSTI4 0
NEI4 $1611
line 1391
;1391:		CG_ClearParticles ();
ADDRGP4 CG_ClearParticles
CALLV
pop
LABELV $1611
line 1393
;1392:
;1393:	VectorCopy( cg.refdef.viewaxis[0], pvforward );
ADDRGP4 pvforward
ADDRGP4 cg+109260+36
INDIRB
ASGNB 12
line 1394
;1394:	VectorCopy( cg.refdef.viewaxis[1], pvright );
ADDRGP4 pvright
ADDRGP4 cg+109260+36+12
INDIRB
ASGNB 12
line 1395
;1395:	VectorCopy( cg.refdef.viewaxis[2], pvup );
ADDRGP4 pvup
ADDRGP4 cg+109260+36+24
INDIRB
ASGNB 12
line 1401
;1396:
;1397:#if SCREENSHOT_TOOLS	// JUHOX
;1398:	oldtime += cg.timeOffset;
;1399:#endif
;1400:
;1401:	vectoangles( cg.refdef.viewaxis[0], rotate_ang );
ADDRGP4 cg+109260+36
ARGP4
ADDRLP4 48
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 1402
;1402:	roll += ((cg.time - oldtime) * 0.1) ;
ADDRLP4 60
ADDRGP4 roll
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRGP4 oldtime
INDIRF4
SUBF4
CNSTF4 1036831949
MULF4
ADDF4
ASGNF4
line 1403
;1403:	rotate_ang[ROLL] += (roll*0.9);
ADDRLP4 48+8
ADDRLP4 48+8
INDIRF4
ADDRGP4 roll
INDIRF4
CNSTF4 1063675494
MULF4
ADDF4
ASGNF4
line 1404
;1404:	AngleVectors ( rotate_ang, rforward, rright, rup);
ADDRLP4 48
ARGP4
ADDRGP4 rforward
ARGP4
ADDRGP4 rright
ARGP4
ADDRGP4 rup
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1406
;1405:	
;1406:	oldtime = cg.time;
ADDRGP4 oldtime
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1408
;1407:
;1408:	active = NULL;
ADDRLP4 44
CNSTP4 0
ASGNP4
line 1409
;1409:	tail = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 1411
;1410:
;1411:	for (p=active_particles ; p ; p=next)
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1629
JUMPV
LABELV $1626
line 1412
;1412:	{
line 1414
;1413:
;1414:		next = p->next;
ADDRLP4 32
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1424
;1415:
;1416:#if SCREENSHOT_TOOLS	// JUHOX
;1417:		if (cg.stopTime) {
;1418:			p->time += cg.timeOffset;
;1419:			p->endtime += cg.timeOffset;
;1420:			p->startfade += cg.timeOffset;
;1421:		}
;1422:#endif
;1423:
;1424:		time = (cg.time - p->time)*0.001;
ADDRLP4 4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
CNSTF4 981668463
MULF4
ASGNF4
line 1426
;1425:
;1426:		alpha = p->alpha + time*p->alphavel;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1427
;1427:		if (alpha <= 0)
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $1631
line 1428
;1428:		{	// faded out
line 1429
;1429:			p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1430
;1430:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1431
;1431:			p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1432
;1432:			p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1433
;1433:			p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1434
;1434:			continue;
ADDRGP4 $1627
JUMPV
LABELV $1631
line 1437
;1435:		}
;1436:
;1437:		if (p->type == P_SMOKE || p->type == P_ANIM || p->type == P_BLEED || p->type == P_SMOKE_IMPACT)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1637
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 6
EQI4 $1637
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 8
EQI4 $1637
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 12
NEI4 $1633
LABELV $1637
line 1438
;1438:		{
line 1439
;1439:			if (cg.time > p->endtime)
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
LEF4 $1638
line 1440
;1440:			{
line 1441
;1441:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1442
;1442:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1443
;1443:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1444
;1444:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1445
;1445:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1447
;1446:			
;1447:				continue;
ADDRGP4 $1627
JUMPV
LABELV $1638
line 1450
;1448:			}
;1449:
;1450:		}
LABELV $1633
line 1452
;1451:
;1452:		if (p->type == P_WEATHER_FLURRY)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1641
line 1453
;1453:		{
line 1454
;1454:			if (cg.time > p->endtime)
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
LEF4 $1643
line 1455
;1455:			{
line 1456
;1456:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1457
;1457:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1458
;1458:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1459
;1459:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1460
;1460:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1462
;1461:			
;1462:				continue;
ADDRGP4 $1627
JUMPV
LABELV $1643
line 1464
;1463:			}
;1464:		}
LABELV $1641
line 1467
;1465:
;1466:
;1467:		if (p->type == P_FLAT_SCALEUP_FADE)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 10
NEI4 $1646
line 1468
;1468:		{
line 1469
;1469:			if (cg.time > p->endtime)
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
LEF4 $1648
line 1470
;1470:			{
line 1471
;1471:				p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1472
;1472:				free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1473
;1473:				p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1474
;1474:				p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1475
;1475:				p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1476
;1476:				continue;
ADDRGP4 $1627
JUMPV
LABELV $1648
line 1479
;1477:			}
;1478:
;1479:		}
LABELV $1646
line 1481
;1480:
;1481:		if ((p->type == P_BAT || p->type == P_SPRITE) && p->endtime < 0) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 7
EQI4 $1653
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 15
NEI4 $1651
LABELV $1653
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $1651
line 1483
;1482:			// temporary sprite
;1483:			CG_AddParticleToScene (p, p->org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1484
;1484:			p->next = free_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1485
;1485:			free_particles = p;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1486
;1486:			p->type = 0;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 1487
;1487:			p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1488
;1488:			p->alpha = 0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 0
ASGNF4
line 1489
;1489:			continue;
ADDRGP4 $1627
JUMPV
LABELV $1651
line 1492
;1490:		}
;1491:
;1492:		p->next = NULL;
ADDRLP4 0
INDIRP4
CNSTP4 0
ASGNP4
line 1493
;1493:		if (!tail)
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1654
line 1494
;1494:			active = tail = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 0
INDIRP4
ASGNP4
ADDRGP4 $1655
JUMPV
LABELV $1654
line 1496
;1495:		else
;1496:		{
line 1497
;1497:			tail->next = p;
ADDRLP4 28
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1498
;1498:			tail = p;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
line 1499
;1499:		}
LABELV $1655
line 1501
;1500:
;1501:		if (alpha > 1.0)
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
LEF4 $1656
line 1502
;1502:			alpha = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
LABELV $1656
line 1504
;1503:
;1504:		color = p->color;
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ASGNI4
line 1506
;1505:
;1506:		time2 = time*time;
ADDRLP4 12
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 1508
;1507:
;1508:		org[0] = p->org[0] + p->vel[0]*time + p->accel[0]*time2;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1509
;1509:		org[1] = p->org[1] + p->vel[1]*time + p->accel[1]*time2;
ADDRLP4 16+4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1510
;1510:		org[2] = p->org[2] + p->vel[2]*time + p->accel[2]*time2;
ADDRLP4 16+8
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1512
;1511:
;1512:		type = p->type;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
line 1514
;1513:
;1514:		CG_AddParticleToScene (p, org, alpha);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRF4
ARGF4
ADDRGP4 CG_AddParticleToScene
CALLV
pop
line 1515
;1515:	}
LABELV $1627
line 1411
ADDRLP4 0
ADDRLP4 32
INDIRP4
ASGNP4
LABELV $1629
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1626
line 1517
;1516:
;1517:	active_particles = active;
ADDRGP4 active_particles
ADDRLP4 44
INDIRP4
ASGNP4
line 1518
;1518:}
LABELV $1610
endproc CG_AddParticles 96 16
export CG_ParticleSnowFlurry
proc CG_ParticleSnowFlurry 68 4
line 1526
;1519:
;1520:/*
;1521:======================
;1522:CG_AddParticles
;1523:======================
;1524:*/
;1525:void CG_ParticleSnowFlurry (qhandle_t pshader, centity_t *cent)
;1526:{
line 1528
;1527:	cparticle_t	*p;
;1528:	qboolean turb = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 1530
;1529:
;1530:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1661
line 1531
;1531:		CG_Printf ("CG_ParticleSnowFlurry pshader == ZERO!\n");
ADDRGP4 $1663
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1661
line 1533
;1532:
;1533:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1664
line 1534
;1534:		return;
ADDRGP4 $1660
JUMPV
LABELV $1664
line 1535
;1535:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1536
;1536:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1537
;1537:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1538
;1538:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1539
;1539:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1540
;1540:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1541
;1541:	p->alpha = 0.90f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1063675494
ASGNF4
line 1542
;1542:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1544
;1543:
;1544:	p->start = cent->currentState.origin2[0];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ASGNF4
line 1545
;1545:	p->end = cent->currentState.origin2[1];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ASGNF4
line 1547
;1546:	
;1547:	p->endtime = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1548
;1548:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1550
;1549:	
;1550:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1552
;1551:	
;1552:	if (rand()%100 > 90)
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 100
MODI4
CNSTI4 90
LEI4 $1669
line 1553
;1553:	{
line 1554
;1554:		p->height = 32;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 1555
;1555:		p->width = 32;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 1556
;1556:		p->alpha = 0.10f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1036831949
ASGNF4
line 1557
;1557:	}
ADDRGP4 $1670
JUMPV
LABELV $1669
line 1559
;1558:	else
;1559:	{
line 1560
;1560:		p->height = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1561
;1561:		p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1562
;1562:	}
LABELV $1670
line 1564
;1563:
;1564:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 1566
;1565:
;1566:	p->type = P_WEATHER_FLURRY;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 11
ASGNI4
line 1568
;1567:	
;1568:	if (turb)
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1671
line 1569
;1569:		p->vel[2] = -10;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3240099840
ASGNF4
LABELV $1671
line 1571
;1570:	
;1571:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1573
;1572:
;1573:	p->org[0] = p->org[0];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 1574
;1574:	p->org[1] = p->org[1];
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ASGNF4
line 1575
;1575:	p->org[2] = p->org[2];
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 1577
;1576:
;1577:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 1579
;1578:	
;1579:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 1581
;1580:
;1581:	p->vel[0] += cent->currentState.angles[0] * 32 + (crandom() * 16);
ADDRLP4 40
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 40
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 40
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1582
;1582:	p->vel[1] += cent->currentState.angles[1] * 32 + (crandom() * 16);
ADDRLP4 48
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 52
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 1107296256
MULF4
ADDRLP4 48
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 48
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ADDF4
ADDF4
ASGNF4
line 1583
;1583:	p->vel[2] += cent->currentState.angles[2];
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1585
;1584:
;1585:	if (turb)
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1673
line 1586
;1586:	{
line 1587
;1587:		p->accel[0] = crandom () * 16;
ADDRLP4 60
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 60
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 60
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1588
;1588:		p->accel[1] = crandom () * 16;
ADDRLP4 64
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1589
;1589:	}
LABELV $1673
line 1591
;1590:
;1591:}
LABELV $1660
endproc CG_ParticleSnowFlurry 68 4
export CG_ParticleSnow
proc CG_ParticleSnow 56 4
line 1594
;1592:
;1593:void CG_ParticleSnow (qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum)
;1594:{
line 1597
;1595:	cparticle_t	*p;
;1596:
;1597:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1676
line 1598
;1598:		CG_Printf ("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1678
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1676
line 1600
;1599:
;1600:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1679
line 1601
;1601:		return;
ADDRGP4 $1675
JUMPV
LABELV $1679
line 1602
;1602:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1603
;1603:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1604
;1604:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1605
;1605:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1606
;1606:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1607
;1607:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1608
;1608:	p->alpha = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1609
;1609:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1610
;1610:	p->start = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1611
;1611:	p->end = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1612
;1612:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1613
;1613:	p->height = 1;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1065353216
ASGNF4
line 1614
;1614:	p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 1616
;1615:	
;1616:	p->vel[2] = -50;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3259498496
ASGNF4
line 1618
;1617:
;1618:	if (turb)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1682
line 1619
;1619:	{
line 1620
;1620:		p->type = P_WEATHER_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 5
ASGNI4
line 1621
;1621:		p->vel[2] = -50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3263299584
ASGNF4
line 1622
;1622:	}
ADDRGP4 $1683
JUMPV
LABELV $1682
line 1624
;1623:	else
;1624:	{
line 1625
;1625:		p->type = P_WEATHER;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 1626
;1626:	}
LABELV $1683
line 1628
;1627:	
;1628:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1630
;1629:
;1630:	p->org[0] = p->org[0] + ( crandom() * range);
ADDRLP4 4
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 4
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 4
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1631
;1631:	p->org[1] = p->org[1] + ( crandom() * range);
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1632
;1632:	p->org[2] = p->org[2] + ( crandom() * (p->start - p->end)); 
ADDRLP4 20
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 20
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 20
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1634
;1633:
;1634:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 1636
;1635:	
;1636:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
line 1638
;1637:
;1638:	if (turb)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1684
line 1639
;1639:	{
line 1640
;1640:		p->vel[0] = crandom() * 16;
ADDRLP4 48
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 48
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1641
;1641:		p->vel[1] = crandom() * 16;
ADDRLP4 52
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 52
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 52
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1107296256
MULF4
ASGNF4
line 1642
;1642:	}
LABELV $1684
line 1645
;1643:
;1644:	// Rafael snow pvs check
;1645:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1646
;1646:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1648
;1647:
;1648:}
LABELV $1675
endproc CG_ParticleSnow 56 4
export CG_ParticleBubble
proc CG_ParticleBubble 68 4
line 1651
;1649:
;1650:void CG_ParticleBubble (qhandle_t pshader, vec3_t origin, vec3_t origin2, int turb, float range, int snum)
;1651:{
line 1655
;1652:	cparticle_t	*p;
;1653:	float		randsize;
;1654:
;1655:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1687
line 1656
;1656:		CG_Printf ("CG_ParticleSnow pshader == ZERO!\n");
ADDRGP4 $1678
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1687
line 1658
;1657:
;1658:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1689
line 1659
;1659:		return;
ADDRGP4 $1686
JUMPV
LABELV $1689
line 1660
;1660:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1661
;1661:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1662
;1662:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1663
;1663:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1664
;1664:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1665
;1665:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1666
;1666:	p->alpha = 0.40f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 1667
;1667:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1668
;1668:	p->start = origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1669
;1669:	p->end = origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1670
;1670:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1672
;1671:	
;1672:	randsize = 1 + (crandom() * 0.5);
ADDRLP4 8
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
ADDRLP4 8
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 8
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1674
;1673:	
;1674:	p->height = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1675
;1675:	p->width = randsize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 1677
;1676:	
;1677:	p->vel[2] = 50 + ( crandom() * 10 );
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 1679
;1678:
;1679:	if (turb)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1692
line 1680
;1680:	{
line 1681
;1681:		p->type = P_BUBBLE_TURBULENT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 14
ASGNI4
line 1682
;1682:		p->vel[2] = 50 * 1.3;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1115815936
ASGNF4
line 1683
;1683:	}
ADDRGP4 $1693
JUMPV
LABELV $1692
line 1685
;1684:	else
;1685:	{
line 1686
;1686:		p->type = P_BUBBLE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 13
ASGNI4
line 1687
;1687:	}
LABELV $1693
line 1689
;1688:	
;1689:	VectorCopy(origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1691
;1690:
;1691:	p->org[0] = p->org[0] + ( crandom() * range);
ADDRLP4 16
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 16
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 16
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1692
;1692:	p->org[1] = p->org[1] + ( crandom() * range);
ADDRLP4 24
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 24
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 24
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1693
;1693:	p->org[2] = p->org[2] + ( crandom() * (p->start - p->end)); 
ADDRLP4 32
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 32
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1695
;1694:
;1695:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 1697
;1696:	
;1697:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 1699
;1698:
;1699:	if (turb)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1694
line 1700
;1700:	{
line 1701
;1701:		p->vel[0] = crandom() * 4;
ADDRLP4 60
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 60
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1702
;1702:		p->vel[1] = crandom() * 4;
ADDRLP4 64
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 1703
;1703:	}
LABELV $1694
line 1706
;1704:
;1705:	// Rafael snow pvs check
;1706:	p->snum = snum;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1707
;1707:	p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
line 1709
;1708:
;1709:}
LABELV $1686
endproc CG_ParticleBubble 68 4
export CG_ParticleSmoke
proc CG_ParticleSmoke 28 4
line 1712
;1710:
;1711:void CG_ParticleSmoke (qhandle_t pshader, centity_t *cent)
;1712:{
line 1718
;1713:
;1714:	// using cent->density = enttime
;1715:	//		 cent->frame = startfade
;1716:	cparticle_t	*p;
;1717:
;1718:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1697
line 1719
;1719:		CG_Printf ("CG_ParticleSmoke == ZERO!\n");
ADDRGP4 $1699
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1697
line 1721
;1720:
;1721:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1700
line 1722
;1722:		return;
ADDRGP4 $1696
JUMPV
LABELV $1700
line 1723
;1723:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1724
;1724:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1725
;1725:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1726
;1726:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1727
;1727:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1729
;1728:	
;1729:	p->endtime = cg.time + cent->currentState.time;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1730
;1730:	p->startfade = cg.time + cent->currentState.time2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1732
;1731:	
;1732:	p->color = 0;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1733
;1733:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1734
;1734:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1735
;1735:	p->start = cent->currentState.origin[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1736
;1736:	p->end = cent->currentState.origin2[2];
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 1737
;1737:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1738
;1738:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1739
;1739:	p->height = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 1740
;1740:	p->width = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 1741
;1741:	p->endheight = 32;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 1742
;1742:	p->endwidth = 32;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 1743
;1743:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1745
;1744:	
;1745:	VectorCopy(cent->currentState.origin, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1747
;1746:
;1747:	p->vel[0] = p->vel[1] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1748
;1748:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 1750
;1749:
;1750:	p->vel[2] = 5;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1084227584
ASGNF4
line 1752
;1751:
;1752:	if (cent->currentState.frame == 1)// reverse gravity	
ADDRFP4 4
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1705
line 1753
;1753:		p->vel[2] *= -1;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 3212836864
MULF4
ASGNF4
LABELV $1705
line 1755
;1754:
;1755:	p->roll = 8 + (crandom() * 4);
ADDRLP4 24
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 24
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
CNSTF4 1090519040
ADDF4
CVFI4 4
ASGNI4
line 1756
;1756:}
LABELV $1696
endproc CG_ParticleSmoke 28 4
export CG_ParticleBulletDebris
proc CG_ParticleBulletDebris 16 0
line 1760
;1757:
;1758:
;1759:void CG_ParticleBulletDebris (vec3_t org, vec3_t vel, int duration)
;1760:{
line 1764
;1761:
;1762:	cparticle_t	*p;
;1763:
;1764:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1708
line 1765
;1765:		return;
ADDRGP4 $1707
JUMPV
LABELV $1708
line 1766
;1766:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1767
;1767:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1768
;1768:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1769
;1769:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1770
;1770:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1772
;1771:	
;1772:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1773
;1773:	p->startfade = cg.time + duration/2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
CVIF4 4
ASGNF4
line 1775
;1774:	
;1775:	p->color = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 1776
;1776:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 1777
;1777:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1779
;1778:
;1779:	p->height = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 1780
;1780:	p->width = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 1781
;1781:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 1782
;1782:	p->endwidth = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 1784
;1783:
;1784:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+751220+388
INDIRI4
ASGNI4
line 1786
;1785:
;1786:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 1788
;1787:	
;1788:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1790
;1789:
;1790:	p->vel[0] = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 1791
;1791:	p->vel[1] = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1792
;1792:	p->vel[2] = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 1793
;1793:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 1795
;1794:
;1795:	p->accel[2] = -60;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3262119936
ASGNF4
line 1796
;1796:	p->vel[2] += -20;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 3248488448
ADDF4
ASGNF4
line 1798
;1797:	
;1798:}
LABELV $1707
endproc CG_ParticleBulletDebris 16 0
export CG_ParticleExplosion
proc CG_ParticleExplosion 16 8
line 1807
;1799:
;1800:/*
;1801:======================
;1802:CG_ParticleExplosion
;1803:======================
;1804:*/
;1805:
;1806:void CG_ParticleExplosion (char *animStr, vec3_t origin, vec3_t vel, int duration, int sizeStart, int sizeEnd)
;1807:{
line 1811
;1808:	cparticle_t	*p;
;1809:	int anim;
;1810:
;1811:	if (animStr < (char *)10)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 10
GEU4 $1716
line 1812
;1812:		CG_Error( "CG_ParticleExplosion: animStr is probably an index rather than a string" );
ADDRGP4 $1718
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $1716
line 1815
;1813:
;1814:	// find the animation string
;1815:	for (anim=0; shaderAnimNames[anim]; anim++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1722
JUMPV
LABELV $1719
line 1816
;1816:		if (!Q_stricmp( animStr, shaderAnimNames[anim] ))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1723
line 1817
;1817:			break;
ADDRGP4 $1721
JUMPV
LABELV $1723
line 1818
;1818:	}
LABELV $1720
line 1815
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1722
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1719
LABELV $1721
line 1819
;1819:	if (!shaderAnimNames[anim]) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimNames
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1725
line 1820
;1820:		CG_Error("CG_ParticleExplosion: unknown animation string: %s\n", animStr);
ADDRGP4 $1727
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1821
;1821:		return;
ADDRGP4 $1715
JUMPV
LABELV $1725
line 1824
;1822:	}
;1823:
;1824:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1728
line 1825
;1825:		return;
ADDRGP4 $1715
JUMPV
LABELV $1728
line 1826
;1826:	p = free_particles;
ADDRLP4 4
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1827
;1827:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 4
INDIRP4
INDIRP4
ASGNP4
line 1828
;1828:	p->next = active_particles;
ADDRLP4 4
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1829
;1829:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 4
INDIRP4
ASGNP4
line 1830
;1830:	p->time = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1831
;1831:	p->alpha = 0.5;
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1056964608
ASGNF4
line 1832
;1832:	p->alphavel = 0;
ADDRLP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1834
;1833:
;1834:	if (duration < 0) {
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $1731
line 1835
;1835:		duration *= -1;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 -1
MULI4
ASGNI4
line 1836
;1836:		p->roll = 0;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 1837
;1837:	} else {
ADDRGP4 $1732
JUMPV
LABELV $1731
line 1838
;1838:		p->roll = crandom()*179;
ADDRLP4 8
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 8
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 8
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1839
;1839:	}
LABELV $1732
line 1841
;1840:
;1841:	p->shaderAnim = anim;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1843
;1842:
;1843:	p->width = sizeStart;
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ASGNF4
line 1844
;1844:	p->height = sizeStart*shaderAnimSTRatio[anim];	// for sprites that are stretch in either direction
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1846
;1845:
;1846:	p->endheight = sizeEnd;
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ASGNF4
line 1847
;1847:	p->endwidth = sizeEnd*shaderAnimSTRatio[anim];
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 20
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 shaderAnimSTRatio
ADDP4
INDIRF4
MULF4
ASGNF4
line 1849
;1848:
;1849:	p->endtime = cg.time + duration;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1851
;1850:
;1851:	p->type = P_ANIM;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 6
ASGNI4
line 1853
;1852:
;1853:	VectorCopy( origin, p->org );
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1854
;1854:	VectorCopy( vel, p->vel );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1855
;1855:	VectorClear( p->accel );
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1857
;1856:
;1857:}
LABELV $1715
endproc CG_ParticleExplosion 16 8
export CG_AddParticleShrapnel
proc CG_AddParticleShrapnel 0 0
line 1861
;1858:
;1859:// Rafael Shrapnel
;1860:void CG_AddParticleShrapnel (localEntity_t *le)
;1861:{
line 1862
;1862:	return;
LABELV $1734
endproc CG_AddParticleShrapnel 0 0
export CG_NewParticleArea
proc CG_NewParticleArea 92 24
line 1867
;1863:}
;1864:// done.
;1865:
;1866:int CG_NewParticleArea (int num)
;1867:{
line 1874
;1868:	// const char *str;
;1869:	char *str;
;1870:	char *token;
;1871:	int type;
;1872:	vec3_t origin, origin2;
;1873:	int		i;
;1874:	float range = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 1879
;1875:	int turb;
;1876:	int	numparticles;
;1877:	int	snum;
;1878:	
;1879:	str = (char *) CG_ConfigString (num);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 1880
;1880:	if (!str[0])
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $1736
line 1881
;1881:		return (0);
CNSTI4 0
RETI4
ADDRGP4 $1735
JUMPV
LABELV $1736
line 1884
;1882:	
;1883:	// returns type 128 64 or 32
;1884:	token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 60
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 60
INDIRP4
ASGNP4
line 1885
;1885:	type = atoi (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 64
INDIRI4
ASGNI4
line 1887
;1886:	
;1887:	if (type == 1)
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $1738
line 1888
;1888:		range = 128;
ADDRLP4 40
CNSTF4 1124073472
ASGNF4
ADDRGP4 $1739
JUMPV
LABELV $1738
line 1889
;1889:	else if (type == 2)
ADDRLP4 36
INDIRI4
CNSTI4 2
NEI4 $1740
line 1890
;1890:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
ADDRGP4 $1741
JUMPV
LABELV $1740
line 1891
;1891:	else if (type == 3)
ADDRLP4 36
INDIRI4
CNSTI4 3
NEI4 $1742
line 1892
;1892:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1743
JUMPV
LABELV $1742
line 1893
;1893:	else if (type == 0)
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $1744
line 1894
;1894:		range = 256;
ADDRLP4 40
CNSTF4 1132462080
ASGNF4
ADDRGP4 $1745
JUMPV
LABELV $1744
line 1895
;1895:	else if (type == 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
NEI4 $1746
line 1896
;1896:		range = 8;
ADDRLP4 40
CNSTF4 1090519040
ASGNF4
ADDRGP4 $1747
JUMPV
LABELV $1746
line 1897
;1897:	else if (type == 5)
ADDRLP4 36
INDIRI4
CNSTI4 5
NEI4 $1748
line 1898
;1898:		range = 16;
ADDRLP4 40
CNSTF4 1098907648
ASGNF4
ADDRGP4 $1749
JUMPV
LABELV $1748
line 1899
;1899:	else if (type == 6)
ADDRLP4 36
INDIRI4
CNSTI4 6
NEI4 $1750
line 1900
;1900:		range = 32;
ADDRLP4 40
CNSTF4 1107296256
ASGNF4
ADDRGP4 $1751
JUMPV
LABELV $1750
line 1901
;1901:	else if (type == 7)
ADDRLP4 36
INDIRI4
CNSTI4 7
NEI4 $1752
line 1902
;1902:		range = 64;
ADDRLP4 40
CNSTF4 1115684864
ASGNF4
LABELV $1752
LABELV $1751
LABELV $1749
LABELV $1747
LABELV $1745
LABELV $1743
LABELV $1741
LABELV $1739
line 1905
;1903:
;1904:
;1905:	for (i=0; i<3; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1754
line 1906
;1906:	{
line 1907
;1907:		token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1908
;1908:		origin[i] = atof (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1909
;1909:	}
LABELV $1755
line 1905
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1754
line 1911
;1910:
;1911:	for (i=0; i<3; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1758
line 1912
;1912:	{
line 1913
;1913:		token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1914
;1914:		origin2[i] = atof (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 1915
;1915:	}
LABELV $1759
line 1911
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1758
line 1917
;1916:		
;1917:	token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 68
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 68
INDIRP4
ASGNP4
line 1918
;1918:	numparticles = atoi (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 72
INDIRI4
ASGNI4
line 1920
;1919:	
;1920:	token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 76
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
ASGNP4
line 1921
;1921:	turb = atoi (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 80
INDIRI4
ASGNI4
line 1923
;1922:
;1923:	token = COM_Parse (&str);
ADDRLP4 8
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
ASGNP4
line 1924
;1924:	snum = atoi (token);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 88
INDIRI4
ASGNI4
line 1926
;1925:	
;1926:	for (i=0; i<numparticles; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1765
JUMPV
LABELV $1762
line 1927
;1927:	{
line 1928
;1928:		if (type >= 4)
ADDRLP4 36
INDIRI4
CNSTI4 4
LTI4 $1766
line 1929
;1929:			CG_ParticleBubble (cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+751220+460
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleBubble
CALLV
pop
ADDRGP4 $1767
JUMPV
LABELV $1766
line 1931
;1930:		else
;1931:			CG_ParticleSnow (cgs.media.waterBubbleShader, origin, origin2, turb, range, snum);
ADDRGP4 cgs+751220+460
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ParticleSnow
CALLV
pop
LABELV $1767
line 1932
;1932:	}
LABELV $1763
line 1926
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1765
ADDRLP4 0
INDIRI4
ADDRLP4 48
INDIRI4
LTI4 $1762
line 1934
;1933:
;1934:	return (1);
CNSTI4 1
RETI4
LABELV $1735
endproc CG_NewParticleArea 92 24
export CG_SnowLink
proc CG_SnowLink 16 0
line 1938
;1935:}
;1936:
;1937:void	CG_SnowLink (centity_t *cent, qboolean particleOn)
;1938:{
line 1942
;1939:	cparticle_t		*p, *next;
;1940:	int id;
;1941:
;1942:	id = cent->currentState.frame;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 1944
;1943:
;1944:	for (p=active_particles ; p ; p=next)
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1776
JUMPV
LABELV $1773
line 1945
;1945:	{
line 1946
;1946:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1948
;1947:		
;1948:		if (p->type == P_WEATHER || p->type == P_WEATHER_TURBULENT)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1779
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1777
LABELV $1779
line 1949
;1949:		{
line 1950
;1950:			if (p->snum == id)
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1780
line 1951
;1951:			{
line 1952
;1952:				if (particleOn)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1782
line 1953
;1953:					p->link = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $1783
JUMPV
LABELV $1782
line 1955
;1954:				else
;1955:					p->link = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 0
ASGNI4
LABELV $1783
line 1956
;1956:			}
LABELV $1780
line 1957
;1957:		}
LABELV $1777
line 1959
;1958:
;1959:	}
LABELV $1774
line 1944
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1776
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1773
line 1960
;1960:}
LABELV $1772
endproc CG_SnowLink 16 0
export CG_ParticleImpactSmokePuff
proc CG_ParticleImpactSmokePuff 24 4
line 1963
;1961:
;1962:void CG_ParticleImpactSmokePuff (qhandle_t pshader, vec3_t origin)
;1963:{
line 1966
;1964:	cparticle_t	*p;
;1965:
;1966:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1785
line 1967
;1967:		CG_Printf ("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1787
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1785
line 1969
;1968:
;1969:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1788
line 1970
;1970:		return;
ADDRGP4 $1784
JUMPV
LABELV $1788
line 1971
;1971:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 1972
;1972:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1973
;1973:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 1974
;1974:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 1975
;1975:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 1976
;1976:	p->alpha = 0.25;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1048576000
ASGNF4
line 1977
;1977:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 1978
;1978:	p->roll = crandom()*179;
ADDRLP4 4
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 4
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1135804416
MULF4
CVFI4 4
ASGNI4
line 1980
;1979:
;1980:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 1982
;1981:
;1982:	p->endtime = cg.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ASGNF4
line 1983
;1983:	p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ASGNF4
line 1985
;1984:
;1985:	p->width = rand()%4 + 8;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1986
;1986:	p->height = rand()%4 + 8;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 4
MODI4
CNSTI4 8
ADDI4
CVIF4 4
ASGNF4
line 1988
;1987:
;1988:	p->endheight = p->height *2;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1989
;1989:	p->endwidth = p->width * 2;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
CNSTF4 1073741824
MULF4
ASGNF4
line 1991
;1990:
;1991:	p->endtime = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 500
ADDI4
CVIF4 4
ASGNF4
line 1993
;1992:
;1993:	p->type = P_SMOKE_IMPACT;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 12
ASGNI4
line 1995
;1994:
;1995:	VectorCopy( origin, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1996
;1996:	VectorSet(p->vel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1101004800
ASGNF4
line 1997
;1997:	VectorSet(p->accel, 0, 0, 20);
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1101004800
ASGNF4
line 1999
;1998:
;1999:	p->rotate = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 1
ASGNI4
line 2000
;2000:}
LABELV $1784
endproc CG_ParticleImpactSmokePuff 24 4
export CG_Particle_Bleed
proc CG_Particle_Bleed 24 4
line 2003
;2001:
;2002:void CG_Particle_Bleed (qhandle_t pshader, vec3_t start, vec3_t dir, int fleshEntityNum, int duration)
;2003:{
line 2006
;2004:	cparticle_t	*p;
;2005:
;2006:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1795
line 2007
;2007:		CG_Printf ("CG_Particle_Bleed pshader == ZERO!\n");
ADDRGP4 $1797
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1795
line 2009
;2008:
;2009:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1798
line 2010
;2010:		return;
ADDRGP4 $1794
JUMPV
LABELV $1798
line 2011
;2011:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2012
;2012:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2013
;2013:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2014
;2014:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2015
;2015:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2016
;2016:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2017
;2017:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2018
;2018:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2020
;2019:
;2020:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2022
;2021:
;2022:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 2024
;2023:	
;2024:	if (fleshEntityNum)
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1802
line 2025
;2025:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
ADDRGP4 $1803
JUMPV
LABELV $1802
line 2027
;2026:	else
;2027:		p->startfade = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ASGNF4
LABELV $1803
line 2029
;2028:
;2029:	p->width = 4;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1082130432
ASGNF4
line 2030
;2030:	p->height = 4;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1082130432
ASGNF4
line 2032
;2031:
;2032:	p->endheight = 4+rand()%3;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 3
MODI4
CNSTI4 4
ADDI4
CVIF4 4
ASGNF4
line 2033
;2033:	p->endwidth = p->endheight;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 2035
;2034:
;2035:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2037
;2036:
;2037:	VectorCopy( start, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2038
;2038:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 2039
;2039:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 2040
;2040:	p->vel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3248488448
ASGNF4
line 2041
;2041:	VectorClear( p->accel );
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 2043
;2042:
;2043:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2045
;2044:
;2045:	p->roll = rand()%179;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2047
;2046:	
;2047:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 2048
;2048:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2050
;2049:
;2050:}
LABELV $1794
endproc CG_Particle_Bleed 24 4
export CG_Particle_OilParticle
proc CG_Particle_OilParticle 36 4
line 2053
;2051:
;2052:void CG_Particle_OilParticle (qhandle_t pshader, centity_t *cent)
;2053:{
line 2060
;2054:	cparticle_t	*p;
;2055:
;2056:	int			time;
;2057:	int			time2;
;2058:	float		ratio;
;2059:
;2060:	float	duration = 1500;
ADDRLP4 16
CNSTF4 1153138688
ASGNF4
line 2062
;2061:
;2062:	time = cg.time;
ADDRLP4 8
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 2063
;2063:	time2 = cg.time + cent->currentState.time;
ADDRLP4 12
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2065
;2064:
;2065:	ratio =(float)1 - ((float)time / (float)time2);
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 2067
;2066:
;2067:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1809
line 2068
;2068:		CG_Printf ("CG_Particle_OilParticle == ZERO!\n");
ADDRGP4 $1811
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1809
line 2070
;2069:
;2070:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1812
line 2071
;2071:		return;
ADDRGP4 $1806
JUMPV
LABELV $1812
line 2072
;2072:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2073
;2073:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2074
;2074:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2075
;2075:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2076
;2076:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2077
;2077:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2078
;2078:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2079
;2079:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2081
;2080:
;2081:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2083
;2082:
;2083:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
line 2085
;2084:	
;2085:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2087
;2086:
;2087:	p->width = 1;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1065353216
ASGNF4
line 2088
;2088:	p->height = 3;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1077936128
ASGNF4
line 2090
;2089:
;2090:	p->endheight = 3;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1077936128
ASGNF4
line 2091
;2091:	p->endwidth = 1;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1065353216
ASGNF4
line 2093
;2092:
;2093:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2095
;2094:
;2095:	VectorCopy(cent->currentState.origin, p->org );	
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2097
;2096:	
;2097:	p->vel[0] = (cent->currentState.origin2[0] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 2098
;2098:	p->vel[1] = (cent->currentState.origin2[1] * (16 * ratio));
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
MULF4
ASGNF4
line 2099
;2099:	p->vel[2] = (cent->currentState.origin2[2]);
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ASGNF4
line 2101
;2100:
;2101:	p->snum = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 2103
;2102:
;2103:	VectorClear( p->accel );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 2105
;2104:
;2105:	p->accel[2] = -20;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3248488448
ASGNF4
line 2107
;2106:
;2107:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2109
;2108:
;2109:	p->roll = rand()%179;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 32
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2111
;2110:	
;2111:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2113
;2112:
;2113:}
LABELV $1806
endproc CG_Particle_OilParticle 36 4
export CG_Particle_OilSlick
proc CG_Particle_OilSlick 32 4
line 2117
;2114:
;2115:
;2116:void CG_Particle_OilSlick (qhandle_t pshader, centity_t *cent)
;2117:{
line 2120
;2118:	cparticle_t	*p;
;2119:	
;2120:  	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1817
line 2121
;2121:		CG_Printf ("CG_Particle_OilSlick == ZERO!\n");
ADDRGP4 $1819
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1817
line 2123
;2122:
;2123:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1820
line 2124
;2124:		return;
ADDRGP4 $1816
JUMPV
LABELV $1820
line 2125
;2125:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2126
;2126:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2127
;2127:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2128
;2128:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2129
;2129:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2131
;2130:	
;2131:	if (cent->currentState.angles2[2])
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1823
line 2132
;2132:		p->endtime = cg.time + cent->currentState.angles2[2];
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $1824
JUMPV
LABELV $1823
line 2134
;2133:	else
;2134:		p->endtime = cg.time + 60000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 60000
ADDI4
CVIF4 4
ASGNF4
LABELV $1824
line 2136
;2135:
;2136:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2138
;2137:
;2138:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2139
;2139:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2140
;2140:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2142
;2141:
;2142:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2144
;2143:
;2144:	if (cent->currentState.angles2[0] || cent->currentState.angles2[1])
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1829
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1827
LABELV $1829
line 2145
;2145:	{
line 2146
;2146:		p->width = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 2147
;2147:		p->height = cent->currentState.angles2[0];
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ASGNF4
line 2149
;2148:
;2149:		p->endheight = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 2150
;2150:		p->endwidth = cent->currentState.angles2[1];
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
line 2151
;2151:	}
ADDRGP4 $1828
JUMPV
LABELV $1827
line 2153
;2152:	else
;2153:	{
line 2154
;2154:		p->width = 8;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1090519040
ASGNF4
line 2155
;2155:		p->height = 8;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1090519040
ASGNF4
line 2157
;2156:
;2157:		p->endheight = 16;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 2158
;2158:		p->endwidth = 16;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 2159
;2159:	}
LABELV $1828
line 2161
;2160:
;2161:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 2163
;2162:
;2163:	p->snum = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 2165
;2164:
;2165:	VectorCopy(cent->currentState.origin, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2167
;2166:	
;2167:	p->org[2]+= 0.55 + (crandom() * 0.5);
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1057803469
ADDF4
ADDF4
ASGNF4
line 2169
;2168:
;2169:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 2170
;2170:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 2171
;2171:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 2172
;2172:	VectorClear( p->accel );
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
line 2174
;2173:
;2174:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2176
;2175:
;2176:	p->roll = rand()%179;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 28
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2178
;2177:	
;2178:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2180
;2179:
;2180:}
LABELV $1816
endproc CG_Particle_OilSlick 32 4
export CG_OilSlickRemove
proc CG_OilSlickRemove 16 4
line 2183
;2181:
;2182:void CG_OilSlickRemove (centity_t *cent)
;2183:{
line 2187
;2184:	cparticle_t		*p, *next;
;2185:	int				id;
;2186:
;2187:	id = 1.0f;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 2189
;2188:
;2189:	if (!id)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1831
line 2190
;2190:		CG_Printf ("CG_OilSlickRevove NULL id\n");
ADDRGP4 $1833
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1831
line 2192
;2191:
;2192:	for (p=active_particles ; p ; p=next)
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1837
JUMPV
LABELV $1834
line 2193
;2193:	{
line 2194
;2194:		next = p->next;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2196
;2195:		
;2196:		if (p->type == P_FLAT_SCALEUP)
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 9
NEI4 $1838
line 2197
;2197:		{
line 2198
;2198:			if (p->snum == id)
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1840
line 2199
;2199:			{
line 2200
;2200:				p->endtime = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ASGNF4
line 2201
;2201:				p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2202
;2202:				p->type = P_FLAT_SCALEUP_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 10
ASGNI4
line 2204
;2203:
;2204:			}
LABELV $1840
line 2205
;2205:		}
LABELV $1838
line 2207
;2206:
;2207:	}
LABELV $1835
line 2192
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $1837
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1834
line 2208
;2208:}
LABELV $1830
endproc CG_OilSlickRemove 16 4
export ValidBloodPool
proc ValidBloodPool 180 28
line 2211
;2209:
;2210:qboolean ValidBloodPool (vec3_t start)
;2211:{
line 2222
;2212:#define EXTRUDE_DIST	0.5
;2213:
;2214:	vec3_t	angles;
;2215:	vec3_t	right, up;
;2216:	vec3_t	this_pos, x_pos, center_pos, end_pos;
;2217:	float	x, y;
;2218:	float	fwidth, fheight;
;2219:	trace_t	trace;
;2220:	vec3_t	normal;
;2221:
;2222:	fwidth = 16;
ADDRLP4 152
CNSTF4 1098907648
ASGNF4
line 2223
;2223:	fheight = 16;
ADDRLP4 120
CNSTF4 1098907648
ASGNF4
line 2225
;2224:
;2225:	VectorSet (normal, 0, 0, 1);
ADDRLP4 96
CNSTF4 0
ASGNF4
ADDRLP4 96+4
CNSTF4 0
ASGNF4
ADDRLP4 96+8
CNSTF4 1065353216
ASGNF4
line 2227
;2226:
;2227:	vectoangles (normal, angles);
ADDRLP4 96
ARGP4
ADDRLP4 156
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2228
;2228:	AngleVectors (angles, NULL, right, up);
ADDRLP4 156
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2230
;2229:
;2230:	VectorMA (start, EXTRUDE_DIST, normal, center_pos);
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
ADDRLP4 168
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+4
ADDRLP4 168
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
ADDRLP4 128+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 1056964608
MULF4
ADDF4
ASGNF4
line 2232
;2231:
;2232:	for (x= -fwidth/2; x<fwidth; x+= fwidth)
ADDRLP4 124
ADDRLP4 152
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1853
JUMPV
LABELV $1850
line 2233
;2233:	{
line 2234
;2234:		VectorMA (center_pos, x, right, x_pos);
ADDRLP4 84
ADDRLP4 128
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 128+4
INDIRF4
ADDRLP4 140+4
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 128+8
INDIRF4
ADDRLP4 140+8
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
line 2236
;2235:
;2236:		for (y= -fheight/2; y<fheight; y+= fheight)
ADDRLP4 12
ADDRLP4 120
INDIRF4
NEGF4
CNSTF4 1056964608
MULF4
ASGNF4
ADDRGP4 $1863
JUMPV
LABELV $1860
line 2237
;2237:		{
line 2238
;2238:			VectorMA (x_pos, y, up, this_pos);
ADDRLP4 0
ADDRLP4 84
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 84+4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 84+8
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2239
;2239:			VectorMA (this_pos, -EXTRUDE_DIST*2, normal, end_pos);
ADDRLP4 16
ADDRLP4 0
INDIRF4
ADDRLP4 96
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 96+4
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 96+8
INDIRF4
CNSTF4 3212836864
MULF4
ADDF4
ASGNF4
line 2241
;2240:			
;2241:			CG_Trace (&trace, this_pos, NULL, NULL, end_pos, -1, CONTENTS_SOLID);
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 16
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2244
;2242:
;2243:			
;2244:			if (trace.entityNum < (MAX_ENTITIES - 1)) // may only land on world
ADDRLP4 28+52
INDIRI4
CNSTI4 1022
GEI4 $1876
line 2245
;2245:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1843
JUMPV
LABELV $1876
line 2247
;2246:
;2247:			if (!(!trace.startsolid && trace.fraction < 1))
ADDRLP4 28+4
INDIRI4
CNSTI4 0
NEI4 $1883
ADDRLP4 28+8
INDIRF4
CNSTF4 1065353216
LTF4 $1879
LABELV $1883
line 2248
;2248:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1843
JUMPV
LABELV $1879
line 2250
;2249:		
;2250:		}
LABELV $1861
line 2236
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
ADDF4
ASGNF4
LABELV $1863
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1860
line 2251
;2251:	}
LABELV $1851
line 2232
ADDRLP4 124
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
ADDF4
ASGNF4
LABELV $1853
ADDRLP4 124
INDIRF4
ADDRLP4 152
INDIRF4
LTF4 $1850
line 2253
;2252:
;2253:	return qtrue;
CNSTI4 1
RETI4
LABELV $1843
endproc ValidBloodPool 180 28
export CG_BloodPool
proc CG_BloodPool 48 4
line 2257
;2254:}
;2255:
;2256:void CG_BloodPool (localEntity_t *le, qhandle_t pshader, trace_t *tr)
;2257:{	
line 2263
;2258:	cparticle_t	*p;
;2259:	qboolean	legit;
;2260:	vec3_t		start;
;2261:	float		rndSize;
;2262:	
;2263:	if (!pshader)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1885
line 2264
;2264:		CG_Printf ("CG_BloodPool pshader == ZERO!\n");
ADDRGP4 $1887
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1885
line 2266
;2265:
;2266:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1888
line 2267
;2267:		return;
ADDRGP4 $1884
JUMPV
LABELV $1888
line 2269
;2268:	
;2269:	VectorCopy (tr->endpos, start);
ADDRLP4 8
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2270
;2270:	legit = ValidBloodPool (start);
ADDRLP4 8
ARGP4
ADDRLP4 24
ADDRGP4 ValidBloodPool
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 2272
;2271:
;2272:	if (!legit) 
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $1890
line 2273
;2273:		return;
ADDRGP4 $1884
JUMPV
LABELV $1890
line 2275
;2274:
;2275:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2276
;2276:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2277
;2277:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2278
;2278:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2279
;2279:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2281
;2280:	
;2281:	p->endtime = cg.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 3000
ADDI4
CVIF4 4
ASGNF4
line 2282
;2282:	p->startfade = p->endtime;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2284
;2283:
;2284:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2285
;2285:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2286
;2286:	p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2288
;2287:
;2288:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 2290
;2289:
;2290:	rndSize = 0.4 + random()*0.6;
ADDRLP4 32
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 4
ADDRLP4 32
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 32
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 790206874
MULF4
CNSTF4 1053609165
ADDF4
ASGNF4
line 2292
;2291:
;2292:	p->width = 8*rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2293
;2293:	p->height = 8*rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2295
;2294:
;2295:	p->endheight = 16*rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 2296
;2296:	p->endwidth = 16*rndSize;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 2298
;2297:	
;2298:	p->type = P_FLAT_SCALEUP;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 9
ASGNI4
line 2300
;2299:
;2300:	VectorCopy(start, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 2302
;2301:	
;2302:	p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 2303
;2303:	p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 2304
;2304:	p->vel[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 0
ASGNF4
line 2305
;2305:	VectorClear( p->accel );
ADDRLP4 40
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 2307
;2306:
;2307:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2309
;2308:
;2309:	p->roll = rand()%179;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2311
;2310:	
;2311:	p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2313
;2312:	
;2313:	p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 2314
;2314:}
LABELV $1884
endproc CG_BloodPool 48 4
export CG_ParticleBloodCloud
proc CG_ParticleBloodCloud 80 16
line 2320
;2315:
;2316:#define NORMALSIZE	16
;2317:#define LARGESIZE	32
;2318:
;2319:void CG_ParticleBloodCloud (centity_t *cent, vec3_t origin, vec3_t dir)
;2320:{
line 2329
;2321:	float	length;
;2322:	float	dist;
;2323:	float	crittersize;
;2324:	vec3_t	angles, forward;
;2325:	vec3_t	point;
;2326:	cparticle_t	*p;
;2327:	int		i;
;2328:	
;2329:	dist = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
line 2331
;2330:
;2331:	length = VectorLength (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 56
INDIRF4
ASGNF4
line 2332
;2332:	vectoangles (dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2333
;2333:	AngleVectors (angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2335
;2334:
;2335:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 2337
;2336:
;2337:	if (length)
ADDRLP4 40
INDIRF4
CNSTF4 0
EQF4 $1895
line 2338
;2338:		dist = length / crittersize;
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1895
line 2340
;2339:
;2340:	if (dist < 1)
ADDRLP4 36
INDIRF4
CNSTF4 1065353216
GEF4 $1897
line 2341
;2341:		dist = 1;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
LABELV $1897
line 2343
;2342:
;2343:	VectorCopy (origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2345
;2344:
;2345:	for (i=0; i<dist; i++)
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRGP4 $1902
JUMPV
LABELV $1899
line 2346
;2346:	{
line 2347
;2347:		VectorMA (point, crittersize, forward, point);	
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2349
;2348:		
;2349:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1909
line 2350
;2350:			return;
ADDRGP4 $1894
JUMPV
LABELV $1909
line 2352
;2351:
;2352:		p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2353
;2353:		free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2354
;2354:		p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2355
;2355:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2357
;2356:
;2357:		p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2358
;2358:		p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2359
;2359:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2360
;2360:		p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2362
;2361:
;2362:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+751220+444
INDIRI4
ASGNI4
line 2364
;2363:
;2364:		p->endtime = cg.time + 350 + (crandom() * 100);
ADDRLP4 64
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 350
ADDI4
CVIF4 4
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1128792064
MULF4
ADDF4
ASGNF4
line 2366
;2365:		
;2366:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2368
;2367:		
;2368:		p->width = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 2369
;2369:		p->height = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 2370
;2370:		p->endheight = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1107296256
ASGNF4
line 2371
;2371:		p->endwidth = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1107296256
ASGNF4
line 2373
;2372:
;2373:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2375
;2374:
;2375:		VectorCopy( origin, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2377
;2376:		
;2377:		p->vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTF4 0
ASGNF4
line 2378
;2378:		p->vel[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 0
ASGNF4
line 2379
;2379:		p->vel[2] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 3212836864
ASGNF4
line 2381
;2380:		
;2381:		VectorClear( p->accel );
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 72
INDIRF4
ASGNF4
line 2383
;2382:
;2383:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2385
;2384:
;2385:		p->roll = rand()%179;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 76
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2387
;2386:		
;2387:		p->color = BLOODRED;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
line 2389
;2388:		
;2389:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2391
;2390:		
;2391:	}
LABELV $1900
line 2345
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1902
ADDRLP4 32
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRF4
LTF4 $1899
line 2394
;2392:
;2393:	
;2394:}
LABELV $1894
endproc CG_ParticleBloodCloud 80 16
export CG_ParticleSparks
proc CG_ParticleSparks 60 0
line 2397
;2395:
;2396:void CG_ParticleSparks (vec3_t org, vec3_t vel, int duration, float x, float y, float speed)
;2397:{
line 2400
;2398:	cparticle_t	*p;
;2399:
;2400:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1917
line 2401
;2401:		return;
ADDRGP4 $1916
JUMPV
LABELV $1917
line 2402
;2402:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2403
;2403:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2404
;2404:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2405
;2405:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2406
;2406:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2408
;2407:	
;2408:	p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 2409
;2409:	p->startfade = cg.time + duration/2;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 2
DIVI4
ADDI4
CVIF4 4
ASGNF4
line 2411
;2410:	
;2411:	p->color = EMISIVEFADE;
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 2412
;2412:	p->alpha = 0.4f;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1053609165
ASGNF4
line 2413
;2413:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2415
;2414:
;2415:	p->height = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1056964608
ASGNF4
line 2416
;2416:	p->width = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1056964608
ASGNF4
line 2417
;2417:	p->endheight = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1056964608
ASGNF4
line 2418
;2418:	p->endwidth = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1056964608
ASGNF4
line 2420
;2419:
;2420:	p->pshader = cgs.media.tracerShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+751220+388
INDIRI4
ASGNI4
line 2422
;2421:
;2422:	p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2424
;2423:	
;2424:	VectorCopy(org, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2426
;2425:
;2426:	p->org[0] += (crandom() * x);
ADDRLP4 4
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 4
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 4
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2427
;2427:	p->org[1] += (crandom() * y);
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
ADDRFP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2429
;2428:
;2429:	p->vel[0] = vel[0];
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 2430
;2430:	p->vel[1] = vel[1];
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 2431
;2431:	p->vel[2] = vel[2];
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 2433
;2432:
;2433:	p->accel[0] = p->accel[1] = p->accel[2] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 24
INDIRF4
ASGNF4
line 2435
;2434:
;2435:	p->vel[0] += (crandom() * 4);
ADDRLP4 28
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 28
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 28
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 2436
;2436:	p->vel[1] += (crandom() * 4);
ADDRLP4 36
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 36
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 36
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ADDF4
ASGNF4
line 2437
;2437:	p->vel[2] += (20 + (crandom() * 10)) * speed;	
ADDRLP4 44
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 44
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 44
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1101004800
MULF4
CNSTF4 1101004800
ADDF4
ADDRFP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 2439
;2438:
;2439:	p->accel[0] = crandom () * 4;
ADDRLP4 52
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 52
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 52
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2440
;2440:	p->accel[1] = crandom () * 4;
ADDRLP4 56
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 56
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 56
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1090519040
MULF4
ASGNF4
line 2442
;2441:	
;2442:}
LABELV $1916
endproc CG_ParticleSparks 60 0
export CG_ParticleDust
proc CG_ParticleDust 116 16
line 2445
;2443:
;2444:void CG_ParticleDust (centity_t *cent, vec3_t origin, vec3_t dir)
;2445:{
line 2454
;2446:	float	length;
;2447:	float	dist;
;2448:	float	crittersize;
;2449:	vec3_t	angles, forward;
;2450:	vec3_t	point;
;2451:	cparticle_t	*p;
;2452:	int		i;
;2453:	
;2454:	dist = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 2456
;2455:
;2456:	VectorNegate (dir, dir);
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 64
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
NEGF4
ASGNF4
line 2457
;2457:	length = VectorLength (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 68
INDIRF4
ASGNF4
line 2458
;2458:	vectoangles (dir, angles);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2459
;2459:	AngleVectors (angles, forward, NULL, NULL);
ADDRLP4 44
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2461
;2460:
;2461:	crittersize = LARGESIZE;
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
line 2463
;2462:
;2463:	if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1925
line 2464
;2464:		dist = length / crittersize;
ADDRLP4 40
ADDRLP4 32
INDIRF4
ADDRLP4 16
INDIRF4
DIVF4
ASGNF4
LABELV $1925
line 2466
;2465:
;2466:	if (dist < 1)
ADDRLP4 40
INDIRF4
CNSTF4 1065353216
GEF4 $1927
line 2467
;2467:		dist = 1;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
LABELV $1927
line 2469
;2468:
;2469:	VectorCopy (origin, point);
ADDRLP4 4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2471
;2470:
;2471:	for (i=0; i<dist; i++)
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $1932
JUMPV
LABELV $1929
line 2472
;2472:	{
line 2473
;2473:		VectorMA (point, crittersize, forward, point);	
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2475
;2474:				
;2475:		if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1939
line 2476
;2476:			return;
ADDRGP4 $1924
JUMPV
LABELV $1939
line 2478
;2477:
;2478:		p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2479
;2479:		free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2480
;2480:		p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2481
;2481:		active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2483
;2482:
;2483:		p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2484
;2484:		p->alpha = 5.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
ASGNF4
line 2485
;2485:		p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2486
;2486:		p->roll = 0;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTI4 0
ASGNI4
line 2488
;2487:
;2488:		p->pshader = cgs.media.smokePuffShader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRGP4 cgs+751220+444
INDIRI4
ASGNI4
line 2491
;2489:
;2490:		// RF, stay around for long enough to expand and dissipate naturally
;2491:		if (length)
ADDRLP4 32
INDIRF4
CNSTF4 0
EQF4 $1944
line 2492
;2492:			p->endtime = cg.time + 4500 + (crandom() * 3500);
ADDRLP4 76
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 4500
ADDI4
CVIF4 4
ADDRLP4 76
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 76
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1171963904
MULF4
ADDF4
ASGNF4
ADDRGP4 $1945
JUMPV
LABELV $1944
line 2494
;2493:		else
;2494:			p->endtime = cg.time + 750 + (crandom() * 500);
ADDRLP4 80
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 750
ADDI4
CVIF4 4
ADDRLP4 80
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 80
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1148846080
MULF4
ADDF4
ASGNF4
LABELV $1945
line 2496
;2495:		
;2496:		p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2498
;2497:		
;2498:		p->width = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTF4 1107296256
ASGNF4
line 2499
;2499:		p->height = LARGESIZE;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTF4 1107296256
ASGNF4
line 2502
;2500:
;2501:		// RF, expand while falling
;2502:		p->endheight = LARGESIZE*3.0;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1119879168
ASGNF4
line 2503
;2503:		p->endwidth = LARGESIZE*3.0;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1119879168
ASGNF4
line 2505
;2504:
;2505:		if (!length)
ADDRLP4 32
INDIRF4
CNSTF4 0
NEF4 $1949
line 2506
;2506:		{
line 2507
;2507:			p->width *= 0.2f;
ADDRLP4 84
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2508
;2508:			p->height *= 0.2f;
ADDRLP4 88
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
CNSTF4 1045220557
MULF4
ASGNF4
line 2510
;2509:
;2510:			p->endheight = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
CNSTF4 1098907648
ASGNF4
line 2511
;2511:			p->endwidth = NORMALSIZE;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1098907648
ASGNF4
line 2512
;2512:		}
LABELV $1949
line 2514
;2513:
;2514:		p->type = P_SMOKE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 3
ASGNI4
line 2516
;2515:
;2516:		VectorCopy( point, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2518
;2517:		
;2518:		p->vel[0] = crandom()*6;
ADDRLP4 84
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 84
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 84
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2519
;2519:		p->vel[1] = crandom()*6;
ADDRLP4 88
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 88
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 88
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1094713344
MULF4
ASGNF4
line 2520
;2520:		p->vel[2] = random()*20;
ADDRLP4 92
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 92
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 92
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 832569344
MULF4
ASGNF4
line 2523
;2521:
;2522:		// RF, add some gravity/randomness
;2523:		p->accel[0] = crandom()*3;
ADDRLP4 96
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 96
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 96
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2524
;2524:		p->accel[1] = crandom()*3;
ADDRLP4 100
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 100
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 100
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1086324736
MULF4
ASGNF4
line 2525
;2525:		p->accel[2] = -PARTICLE_GRAVITY*0.4;
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3246391296
ASGNF4
line 2527
;2526:
;2527:		VectorClear( p->accel );
ADDRLP4 108
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 108
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 108
INDIRF4
ASGNF4
line 2529
;2528:
;2529:		p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2531
;2530:
;2531:		p->roll = rand()%179;
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 112
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2533
;2532:		
;2533:		p->alpha = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1061158912
ASGNF4
line 2535
;2534:		
;2535:	}
LABELV $1930
line 2471
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1932
ADDRLP4 36
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
LTF4 $1929
line 2538
;2536:
;2537:	
;2538:}
LABELV $1924
endproc CG_ParticleDust 116 16
export CG_ParticleMisc
proc CG_ParticleMisc 8 4
line 2541
;2539:
;2540:void CG_ParticleMisc (qhandle_t pshader, vec3_t origin, int size, int duration, float alpha)
;2541:{
line 2544
;2542:	cparticle_t	*p;
;2543:
;2544:	if (!pshader)
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1952
line 2545
;2545:		CG_Printf ("CG_ParticleImpactSmokePuff pshader == ZERO!\n");
ADDRGP4 $1787
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $1952
line 2547
;2546:
;2547:	if (!free_particles)
ADDRGP4 free_particles
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1954
line 2548
;2548:		return;
ADDRGP4 $1951
JUMPV
LABELV $1954
line 2550
;2549:
;2550:	p = free_particles;
ADDRLP4 0
ADDRGP4 free_particles
INDIRP4
ASGNP4
line 2551
;2551:	free_particles = p->next;
ADDRGP4 free_particles
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 2552
;2552:	p->next = active_particles;
ADDRLP4 0
INDIRP4
ADDRGP4 active_particles
INDIRP4
ASGNP4
line 2553
;2553:	active_particles = p;
ADDRGP4 active_particles
ADDRLP4 0
INDIRP4
ASGNP4
line 2554
;2554:	p->time = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2555
;2555:	p->alpha = 1.0;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1065353216
ASGNF4
line 2556
;2556:	p->alphavel = 0;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 2557
;2557:	p->roll = rand()%179;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 179
MODI4
ASGNI4
line 2559
;2558:
;2559:	p->pshader = pshader;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 2561
;2560:
;2561:	if (duration > 0)
ADDRFP4 12
INDIRI4
CNSTI4 0
LEI4 $1957
line 2562
;2562:		p->endtime = cg.time + duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
ADDRGP4 $1958
JUMPV
LABELV $1957
line 2564
;2563:	else
;2564:		p->endtime = duration;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 12
INDIRI4
CVIF4 4
ASGNF4
LABELV $1958
line 2566
;2565:
;2566:	p->startfade = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
ASGNF4
line 2568
;2567:
;2568:	p->width = size;
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2569
;2569:	p->height = size;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2571
;2570:
;2571:	p->endheight = size;
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2572
;2572:	p->endwidth = size;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 2574
;2573:
;2574:	p->type = P_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 15
ASGNI4
line 2576
;2575:
;2576:	VectorCopy( origin, p->org );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2578
;2577:
;2578:	p->rotate = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2579
;2579:}
LABELV $1951
endproc CG_ParticleMisc 8 4
export CG_AdjustParticles
proc CG_AdjustParticles 16 0
line 2589
;2580:
;2581:
;2582:/*
;2583:==================
;2584:JUHOX: CG_AdjustParticles
;2585:==================
;2586:*/
;2587:#if ESCAPE_MODE
;2588:void CG_AdjustParticles(const vec3_t delta)
;2589:{
line 2592
;2590:	cparticle_t	*p;
;2591:	
;2592:	for (p = active_particles; p; p = p->next)
ADDRLP4 0
ADDRGP4 active_particles
INDIRP4
ASGNP4
ADDRGP4 $1965
JUMPV
LABELV $1962
line 2593
;2593:	{
line 2594
;2594:		VectorAdd(p->org, delta, p->org);
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 2595
;2595:	}
LABELV $1963
line 2592
ADDRLP4 0
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
LABELV $1965
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1962
line 2596
;2596:}
LABELV $1961
endproc CG_AdjustParticles 16 0
bss
export oldtime
align 4
LABELV oldtime
skip 4
export rup
align 4
LABELV rup
skip 12
export rright
align 4
LABELV rright
skip 12
export rforward
align 4
LABELV rforward
skip 12
export pvup
align 4
LABELV pvup
skip 12
export pvright
align 4
LABELV pvright
skip 12
export pvforward
align 4
LABELV pvforward
skip 12
export particles
align 4
LABELV particles
skip 126976
export free_particles
align 4
LABELV free_particles
skip 4
export active_particles
align 4
LABELV active_particles
skip 4
align 4
LABELV numShaderAnims
skip 4
align 4
LABELV shaderAnims
skip 8192
align 4
LABELV lightBlobs
skip 9216
align 4
LABELV oldestLightBlob
skip 4
align 4
LABELV markTotal
skip 4
export cg_freeMarkPolys
align 4
LABELV cg_freeMarkPolys
skip 4
export cg_activeMarkPolys
align 4
LABELV cg_activeMarkPolys
skip 288
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_CheckMouseEvents
import CG_TSS_CheckKeyEvents
import CG_TSS_MouseEvent
import CG_TSS_KeyEvent
import CG_TSS_CloseInterface
import CG_TSS_OpenInterface
import CG_TSS_DrawInterface
import CG_TSS_SPrintTacticalMeasure
import CG_TSS_Update
import CG_TSS_SaveInterface
import CG_TSS_LoadInterface
import CG_TSS_InitInterface
import TSS_SetPalette
import TSS_GetPalette
import CG_TSS_StrategyNameChanged
import CG_TSS_SetSearchPattern
import CG_TSS_CreateNewStrategy
import CG_TSS_FreePaletteSlot
import CG_TSS_SavePaletteSlotIfNeeded
import CG_TSS_LoadPaletteSlot
import CG_TSS_GetSortIndexByID
import CG_TSS_GetSortedSlot
import CG_TSS_GetSlotByName
import CG_TSS_GetSlotByID
import CG_TSS_NumStrategiesInStock
import TSSFS_SaveStrategyStock
import TSSFS_LoadStrategyStock
import TSSFS_LoadStrategy
import TSSFS_SaveStrategy
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_BFGsuperExpl
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Draw3DLine
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PrevWeaponOrder_f
import CG_NextWeaponOrder_f
import CG_SkipWeapon_f
import CG_BestWeapon_f
import CG_AutoSwitchToBestWeapon
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
export cg_markPolys
align 4
LABELV cg_markPolys
skip 73728
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1887
byte 1 67
byte 1 71
byte 1 95
byte 1 66
byte 1 108
byte 1 111
byte 1 111
byte 1 100
byte 1 80
byte 1 111
byte 1 111
byte 1 108
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1833
byte 1 67
byte 1 71
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 82
byte 1 101
byte 1 118
byte 1 111
byte 1 118
byte 1 101
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 32
byte 1 105
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $1819
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 83
byte 1 108
byte 1 105
byte 1 99
byte 1 107
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1811
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 79
byte 1 105
byte 1 108
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1797
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 66
byte 1 108
byte 1 101
byte 1 101
byte 1 100
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1787
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 80
byte 1 117
byte 1 102
byte 1 102
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1727
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1718
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 83
byte 1 116
byte 1 114
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 112
byte 1 114
byte 1 111
byte 1 98
byte 1 97
byte 1 98
byte 1 108
byte 1 121
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 105
byte 1 110
byte 1 100
byte 1 101
byte 1 120
byte 1 32
byte 1 114
byte 1 97
byte 1 116
byte 1 104
byte 1 101
byte 1 114
byte 1 32
byte 1 116
byte 1 104
byte 1 97
byte 1 110
byte 1 32
byte 1 97
byte 1 32
byte 1 115
byte 1 116
byte 1 114
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1699
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1678
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $1663
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 83
byte 1 110
byte 1 111
byte 1 119
byte 1 70
byte 1 108
byte 1 117
byte 1 114
byte 1 114
byte 1 121
byte 1 32
byte 1 112
byte 1 115
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 90
byte 1 69
byte 1 82
byte 1 79
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $530
byte 1 37
byte 1 115
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $512
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $152
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $135
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
