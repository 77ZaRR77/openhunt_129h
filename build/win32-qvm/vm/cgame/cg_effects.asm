export CG_BubbleTrail
code
proc CG_BubbleTrail 88 4
file "..\..\..\..\code\cgame\cg_effects.c"
line 16
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_effects.c -- these functions generate localentities, usually as a result
;4:// of event processing
;5:
;6:#include "cg_local.h"
;7:
;8:
;9:/*
;10:==================
;11:CG_BubbleTrail
;12:
;13:Bullets shot underwater
;14:==================
;15:*/
;16:void CG_BubbleTrail( vec3_t start, vec3_t end, float spacing ) {
line 22
;17:	vec3_t		move;
;18:	vec3_t		vec;
;19:	float		len;
;20:	int			i;
;21:
;22:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $125
line 23
;23:		return;
ADDRGP4 $124
JUMPV
LABELV $125
line 26
;24:	}
;25:
;26:	VectorCopy (start, move);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 27
;27:	VectorSubtract (end, start, vec);
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 28
;28:	len = VectorNormalize (vec);
ADDRLP4 12
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 40
INDIRF4
ASGNF4
line 31
;29:
;30:	// advance a random amount first
;31:	i = rand() % (int)spacing;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ADDRFP4 8
INDIRF4
CVFI4 4
MODI4
ASGNI4
line 32
;32:	VectorMA( move, i, vec, move );
ADDRLP4 48
ADDRLP4 24
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 34
;33:
;34:	VectorScale (vec, spacing, vec);
ADDRLP4 52
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 36
;35:
;36:	for ( ; i < len; i += spacing ) {
ADDRGP4 $143
JUMPV
LABELV $140
line 40
;37:		localEntity_t	*le;
;38:		refEntity_t		*re;
;39:
;40:		le = CG_AllocLocalEntity();
ADDRLP4 64
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 56
ADDRLP4 64
INDIRP4
ASGNP4
line 41
;41:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 56
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 42
;42:		le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 56
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 43
;43:		le->startTime = cg.time;
ADDRLP4 56
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 44
;44:		le->endTime = cg.time + 1000 + random() * 250;
ADDRLP4 68
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 56
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ADDRLP4 68
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 68
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 863633408
MULF4
ADDF4
CVFI4 4
ASGNI4
line 45
;45:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 56
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 56
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 47
;46:
;47:		re = &le->refEntity;
ADDRLP4 60
ADDRLP4 56
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 48
;48:		re->shaderTime = cg.time / 1000.0f;
ADDRLP4 60
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 50
;49:
;50:		re->reType = RT_SPRITE;
ADDRLP4 60
INDIRP4
CNSTI4 2
ASGNI4
line 51
;51:		re->rotation = 0;
ADDRLP4 60
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 52
;52:		re->radius = 3;
ADDRLP4 60
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1077936128
ASGNF4
line 53
;53:		re->customShader = cgs.media.waterBubbleShader;
ADDRLP4 60
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+460
INDIRI4
ASGNI4
line 54
;54:		re->shaderRGBA[0] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 55
;55:		re->shaderRGBA[1] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 56
;56:		re->shaderRGBA[2] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 57
;57:		re->shaderRGBA[3] = 0xff;
ADDRLP4 60
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 59
;58:
;59:		le->color[3] = 1.0;
ADDRLP4 56
INDIRP4
CNSTI4 148
ADDP4
CNSTF4 1065353216
ASGNF4
line 61
;60:
;61:		le->pos.trType = TR_LINEAR;
ADDRLP4 56
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 62
;62:		le->pos.trTime = cg.time;
ADDRLP4 56
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 63
;63:		VectorCopy( move, le->pos.trBase );
ADDRLP4 56
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 64
;64:		le->pos.trDelta[0] = crandom()*5;
ADDRLP4 76
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 56
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 76
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 76
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
ASGNF4
line 65
;65:		le->pos.trDelta[1] = crandom()*5;
ADDRLP4 80
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 56
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 80
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 80
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
ASGNF4
line 66
;66:		le->pos.trDelta[2] = crandom()*5 + 6;
ADDRLP4 84
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 56
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 84
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 84
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1092616192
MULF4
CNSTF4 1086324736
ADDF4
ASGNF4
line 68
;67:
;68:		VectorAdd (move, vec, move);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 69
;69:	}
LABELV $141
line 36
ADDRLP4 24
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRFP4 8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $143
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRF4
LTF4 $140
line 70
;70:}
LABELV $124
endproc CG_BubbleTrail 88 4
data
align 4
LABELV $157
byte 4 146
export CG_SmokePuff
code
proc CG_SmokePuff 52 4
line 86
;71:
;72:/*
;73:=====================
;74:CG_SmokePuff
;75:
;76:Adds a smoke puff or blood trail localEntity.
;77:=====================
;78:*/
;79:localEntity_t *CG_SmokePuff( const vec3_t p, const vec3_t vel, 
;80:				   float radius,
;81:				   float r, float g, float b, float a,
;82:				   float duration,
;83:				   int startTime,
;84:				   int fadeInTime,
;85:				   int leFlags,
;86:				   qhandle_t hShader ) {
line 92
;87:	static int	seed = 0x92;
;88:	localEntity_t	*le;
;89:	refEntity_t		*re;
;90://	int fadeInTime = startTime + duration / 2;
;91:
;92:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 93
;93:	le->leFlags = leFlags;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 40
INDIRI4
ASGNI4
line 94
;94:	le->radius = radius;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 96
;95:
;96:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 97
;97:	re->rotation = Q_random( &seed ) * 360;
ADDRGP4 $157
ARGP4
ADDRLP4 12
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 12
INDIRF4
CNSTF4 1135869952
MULF4
ASGNF4
line 98
;98:	re->radius = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 99
;99:	re->shaderTime = startTime / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 101
;100:
;101:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 102
;102:	le->startTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 103
;103:	le->fadeInTime = fadeInTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 36
INDIRI4
ASGNI4
line 104
;104:	le->endTime = startTime + duration;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
ADDRFP4 28
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 105
;105:	if ( fadeInTime > startTime ) {
ADDRFP4 36
INDIRI4
ADDRFP4 32
INDIRI4
LEI4 $158
line 106
;106:		le->lifeRate = 1.0 / ( le->endTime - le->fadeInTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 107
;107:	}
ADDRGP4 $159
JUMPV
LABELV $158
line 108
;108:	else {
line 109
;109:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 110
;110:	}
LABELV $159
line 111
;111:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 112
;112:	le->color[1] = g; 
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 113
;113:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 114
;114:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 117
;115:
;116:
;117:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 118
;118:	le->pos.trTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 119
;119:	VectorCopy( vel, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 120
;120:	VectorCopy( p, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 122
;121:
;122:	VectorCopy( p, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 123
;123:	re->customShader = hShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 44
INDIRI4
ASGNI4
line 126
;124:
;125:	// rage pro can't alpha fade, so use a different shader
;126:	if ( cgs.glconfig.hardwareType == GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $160
line 127
;127:		re->customShader = cgs.media.smokePuffRageProShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+448
INDIRI4
ASGNI4
line 128
;128:		re->shaderRGBA[0] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 129
;129:		re->shaderRGBA[1] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 130
;130:		re->shaderRGBA[2] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 131
;131:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 132
;132:	} else {
ADDRGP4 $161
JUMPV
LABELV $160
line 133
;133:		re->shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $167
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $168
JUMPV
LABELV $167
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $168
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 134
;134:		re->shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $170
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $171
JUMPV
LABELV $170
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $171
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 135
;135:		re->shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRF4
CNSTF4 1132396544
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $173
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $174
JUMPV
LABELV $173
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $174
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 136
;136:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 137
;137:	}
LABELV $161
line 139
;138:
;139:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 140
;140:	re->radius = le->radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRF4
ASGNF4
line 142
;141:
;142:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $156
endproc CG_SmokePuff 52 4
export CG_SpawnEffect
proc CG_SpawnEffect 28 4
line 152
;143:}
;144:
;145:/*
;146:==================
;147:CG_SpawnEffect
;148:
;149:Player teleporting in or out
;150:==================
;151:*/
;152:void CG_SpawnEffect( vec3_t org ) {
line 156
;153:	localEntity_t	*le;
;154:	refEntity_t		*re;
;155:
;156:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 157
;157:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 158
;158:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 159
;159:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 160
;160:	le->endTime = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 161
;161:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 163
;162:
;163:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 165
;164:
;165:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 167
;166:
;167:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 168
;168:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107656
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 171
;169:
;170:#ifndef MISSIONPACK
;171:	re->customShader = cgs.media.teleportEffectShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+732
INDIRI4
ASGNI4
line 173
;172:#endif
;173:	re->hModel = cgs.media.teleportEffectModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+751220+728
INDIRI4
ASGNI4
line 174
;174:	AxisClear( re->axis );
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 176
;175:
;176:	VectorCopy( org, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 180
;177:#ifdef MISSIONPACK
;178:	re->origin[2] += 16;
;179:#else
;180:	re->origin[2] -= 24;
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1103101952
SUBF4
ASGNF4
line 182
;181:#endif
;182:}
LABELV $175
endproc CG_SpawnEffect 28 4
bss
align 4
LABELV $184
skip 12
export CG_ScorePlum
code
proc CG_ScorePlum 44 8
line 367
;183:
;184:
;185:#ifdef MISSIONPACK
;186:/*
;187:===============
;188:CG_LightningBoltBeam
;189:===============
;190:*/
;191:void CG_LightningBoltBeam( vec3_t start, vec3_t end ) {
;192:	localEntity_t	*le;
;193:	refEntity_t		*beam;
;194:
;195:	le = CG_AllocLocalEntity();
;196:	le->leFlags = 0;
;197:	le->leType = LE_SHOWREFENTITY;
;198:	le->startTime = cg.time;
;199:	le->endTime = cg.time + 50;
;200:
;201:	beam = &le->refEntity;
;202:
;203:	VectorCopy( start, beam->origin );
;204:	// this is the end point
;205:	VectorCopy( end, beam->oldorigin );
;206:
;207:	beam->reType = RT_LIGHTNING;
;208:	beam->customShader = cgs.media.lightningShader;
;209:}
;210:
;211:/*
;212:==================
;213:CG_KamikazeEffect
;214:==================
;215:*/
;216:void CG_KamikazeEffect( vec3_t org ) {
;217:	localEntity_t	*le;
;218:	refEntity_t		*re;
;219:
;220:	le = CG_AllocLocalEntity();
;221:	le->leFlags = 0;
;222:	le->leType = LE_KAMIKAZE;
;223:	le->startTime = cg.time;
;224:	le->endTime = cg.time + 3000;//2250;
;225:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
;226:
;227:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;228:
;229:	VectorClear(le->angles.trBase);
;230:
;231:	re = &le->refEntity;
;232:
;233:	re->reType = RT_MODEL;
;234:	re->shaderTime = cg.time / 1000.0f;
;235:
;236:	re->hModel = cgs.media.kamikazeEffectModel;
;237:
;238:	VectorCopy( org, re->origin );
;239:
;240:}
;241:
;242:/*
;243:==================
;244:CG_ObeliskExplode
;245:==================
;246:*/
;247:void CG_ObeliskExplode( vec3_t org, int entityNum ) {
;248:	localEntity_t	*le;
;249:	vec3_t origin;
;250:
;251:	// create an explosion
;252:	VectorCopy( org, origin );
;253:	origin[2] += 64;
;254:	le = CG_MakeExplosion( origin, vec3_origin,
;255:						   cgs.media.dishFlashModel,
;256:						   cgs.media.rocketExplosionShader,
;257:						   600, qtrue );
;258:	le->light = 300;
;259:	le->lightColor[0] = 1;
;260:	le->lightColor[1] = 0.75;
;261:	le->lightColor[2] = 0.0;
;262:}
;263:
;264:/*
;265:==================
;266:CG_ObeliskPain
;267:==================
;268:*/
;269:void CG_ObeliskPain( vec3_t org ) {
;270:	float r;
;271:	sfxHandle_t sfx;
;272:
;273:	// hit sound
;274:	r = rand() & 3;
;275:	if ( r < 2 ) {
;276:		sfx = cgs.media.obeliskHitSound1;
;277:	} else if ( r == 2 ) {
;278:		sfx = cgs.media.obeliskHitSound2;
;279:	} else {
;280:		sfx = cgs.media.obeliskHitSound3;
;281:	}
;282:	trap_S_StartSound ( org, ENTITYNUM_NONE, CHAN_BODY, sfx );
;283:}
;284:
;285:
;286:/*
;287:==================
;288:CG_InvulnerabilityImpact
;289:==================
;290:*/
;291:void CG_InvulnerabilityImpact( vec3_t org, vec3_t angles ) {
;292:	localEntity_t	*le;
;293:	refEntity_t		*re;
;294:	int				r;
;295:	sfxHandle_t		sfx;
;296:
;297:	le = CG_AllocLocalEntity();
;298:	le->leFlags = 0;
;299:	le->leType = LE_INVULIMPACT;
;300:	le->startTime = cg.time;
;301:	le->endTime = cg.time + 1000;
;302:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
;303:
;304:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;305:
;306:	re = &le->refEntity;
;307:
;308:	re->reType = RT_MODEL;
;309:	re->shaderTime = cg.time / 1000.0f;
;310:
;311:	re->hModel = cgs.media.invulnerabilityImpactModel;
;312:
;313:	VectorCopy( org, re->origin );
;314:	AnglesToAxis( angles, re->axis );
;315:
;316:	r = rand() & 3;
;317:	if ( r < 2 ) {
;318:		sfx = cgs.media.invulnerabilityImpactSound1;
;319:	} else if ( r == 2 ) {
;320:		sfx = cgs.media.invulnerabilityImpactSound2;
;321:	} else {
;322:		sfx = cgs.media.invulnerabilityImpactSound3;
;323:	}
;324:	trap_S_StartSound (org, ENTITYNUM_NONE, CHAN_BODY, sfx );
;325:}
;326:
;327:/*
;328:==================
;329:CG_InvulnerabilityJuiced
;330:==================
;331:*/
;332:void CG_InvulnerabilityJuiced( vec3_t org ) {
;333:	localEntity_t	*le;
;334:	refEntity_t		*re;
;335:	vec3_t			angles;
;336:
;337:	le = CG_AllocLocalEntity();
;338:	le->leFlags = 0;
;339:	le->leType = LE_INVULJUICED;
;340:	le->startTime = cg.time;
;341:	le->endTime = cg.time + 10000;
;342:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
;343:
;344:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
;345:
;346:	re = &le->refEntity;
;347:
;348:	re->reType = RT_MODEL;
;349:	re->shaderTime = cg.time / 1000.0f;
;350:
;351:	re->hModel = cgs.media.invulnerabilityJuicedModel;
;352:
;353:	VectorCopy( org, re->origin );
;354:	VectorClear(angles);
;355:	AnglesToAxis( angles, re->axis );
;356:
;357:	trap_S_StartSound (org, ENTITYNUM_NONE, CHAN_BODY, cgs.media.invulnerabilityJuicedSound );
;358:}
;359:
;360:#endif
;361:
;362:/*
;363:==================
;364:CG_ScorePlum
;365:==================
;366:*/
;367:void CG_ScorePlum( int client, vec3_t org, int score ) {
line 374
;368:	localEntity_t	*le;
;369:	refEntity_t		*re;
;370:	vec3_t			angles;
;371:	static vec3_t lastPos;
;372:
;373:	// only visualize for the client that scored
;374:	if (client != cg.predictedPlayerState.clientNum || cg_scorePlum.integer == 0) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+107688+140
INDIRI4
NEI4 $190
ADDRGP4 cg_scorePlum+12
INDIRI4
CNSTI4 0
NEI4 $185
LABELV $190
line 375
;375:		return;
ADDRGP4 $183
JUMPV
LABELV $185
line 378
;376:	}
;377:
;378:	le = CG_AllocLocalEntity();
ADDRLP4 20
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 379
;379:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 380
;380:	le->leType = LE_SCOREPLUM;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 8
ASGNI4
line 381
;381:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 382
;382:	le->endTime = cg.time + 4000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 4000
ADDI4
ASGNI4
line 383
;383:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 386
;384:
;385:	
;386:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 387
;387:	le->radius = score;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 389
;388:	
;389:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 390
;390:	if (org[2] >= lastPos[2] - 20 && org[2] <= lastPos[2] + 20) {
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 $184+8
INDIRF4
CNSTF4 1101004800
SUBF4
LTF4 $193
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 $184+8
INDIRF4
CNSTF4 1101004800
ADDF4
GTF4 $193
line 391
;391:		le->pos.trBase[2] -= 20;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1101004800
SUBF4
ASGNF4
line 392
;392:	}
LABELV $193
line 395
;393:
;394:	//CG_Printf( "Plum origin %i %i %i -- %i\n", (int)org[0], (int)org[1], (int)org[2], (int)Distance(org, lastPos));
;395:	VectorCopy(org, lastPos);
ADDRGP4 $184
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 398
;396:
;397:
;398:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 400
;399:
;400:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 401
;401:	re->radius = 16;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1098907648
ASGNF4
line 403
;402:
;403:	VectorClear(angles);
ADDRLP4 40
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 40
INDIRF4
ASGNF4
line 404
;404:	AnglesToAxis( angles, re->axis );
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 405
;405:}
LABELV $183
endproc CG_ScorePlum 44 8
export CG_MakeExplosion
proc CG_MakeExplosion 60 8
line 415
;406:
;407:
;408:/*
;409:====================
;410:CG_MakeExplosion
;411:====================
;412:*/
;413:localEntity_t *CG_MakeExplosion( vec3_t origin, vec3_t dir, 
;414:								qhandle_t hModel, qhandle_t shader,
;415:								int msec, qboolean isSprite ) {
line 421
;416:	float			ang;
;417:	localEntity_t	*ex;
;418:	int				offset;
;419:	vec3_t			tmpVec, newOrigin;
;420:
;421:	if ( msec <= 0 ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
GTI4 $200
line 422
;422:		CG_Error( "CG_MakeExplosion: msec = %i", msec );
ADDRGP4 $202
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 423
;423:	}
LABELV $200
line 426
;424:
;425:	// skew the time a bit so they aren't all in sync
;426:	offset = rand() & 63;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 63
BANDI4
ASGNI4
line 428
;427:
;428:	ex = CG_AllocLocalEntity();
ADDRLP4 40
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 429
;429:	if ( isSprite ) {
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $203
line 430
;430:		ex->leType = LE_SPRITE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 2
ASGNI4
line 433
;431:
;432:		// randomly rotate sprite orientation
;433:		ex->refEntity.rotation = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 316
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 434
;434:		VectorScale( dir, 16, tmpVec );
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1098907648
MULF4
ASGNF4
line 435
;435:		VectorAdd( tmpVec, origin, newOrigin );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 436
;436:	} else {
ADDRGP4 $204
JUMPV
LABELV $203
line 437
;437:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 438
;438:		VectorCopy( origin, newOrigin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 441
;439:
;440:		// set axis with random rotate
;441:		if ( !dir ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $211
line 442
;442:			AxisClear( ex->refEntity.axis );
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 443
;443:		} else {
ADDRGP4 $212
JUMPV
LABELV $211
line 444
;444:			ang = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 445
;445:			VectorCopy( dir, ex->refEntity.axis[0] );
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 446
;446:			RotateAroundDirection( ex->refEntity.axis, ang );
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 447
;447:		}
LABELV $212
line 448
;448:	}
LABELV $204
line 450
;449:
;450:	ex->startTime = cg.time - offset;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 451
;451:	ex->endTime = ex->startTime + msec;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 454
;452:
;453:	// bias the time so all shader effects start correctly
;454:	ex->refEntity.shaderTime = ex->startTime / 1000.0f;
ADDRLP4 0
INDIRP4
CNSTI4 308
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
CNSTF4 981668463
MULF4
ASGNF4
line 456
;455:
;456:	ex->refEntity.hModel = hModel;
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 457
;457:	ex->refEntity.customShader = shader;
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 460
;458:	// JUHOX: make standard bfg explosion bigger
;459:#if 1
;460:	if (shader == cgs.media.bfgExplosionShader) {
ADDRFP4 12
INDIRI4
ADDRGP4 cgs+751220+712
INDIRI4
NEI4 $214
line 461
;461:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 462
;462:		ex->refEntity.radius = 30.0 + 120.0*random();
ADDRLP4 52
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
ADDRLP4 52
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 52
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1123024896
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
line 463
;463:		ex->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTI4 2
ASGNI4
line 464
;464:	}
LABELV $214
line 468
;465:#endif
;466:
;467:	// set origin
;468:	VectorCopy( newOrigin, ex->refEntity.origin );
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 469
;469:	VectorCopy( newOrigin, ex->refEntity.oldorigin );
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 471
;470:
;471:	ex->color[0] = ex->color[1] = ex->color[2] = 1.0;
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 473
;472:
;473:	return ex;
ADDRLP4 0
INDIRP4
RETP4
LABELV $199
endproc CG_MakeExplosion 60 8
export CG_Bleed
proc CG_Bleed 16 48
line 484
;474:}
;475:
;476:
;477:/*
;478:=================
;479:CG_Bleed
;480:
;481:This is the spurt of blood when a character gets hit
;482:=================
;483:*/
;484:void CG_Bleed( vec3_t origin, int entityNum ) {
line 487
;485:	localEntity_t	*ex;
;486:
;487:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $219
line 488
;488:		return;
ADDRGP4 $218
JUMPV
LABELV $219
line 493
;489:	}
;490:
;491:	// JUHOX: don't bleed in hibernation mode
;492:#if MONSTER_MODE
;493:	if (cg_entities[entityNum].currentState.modelindex & PFMI_HIBERNATION_MORPHED) {
ADDRFP4 4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities+160
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $222
line 494
;494:		return;
ADDRGP4 $218
JUMPV
LABELV $222
line 513
;495:	}
;496:#endif
;497:
;498:	// JUHOX: monster blood explosion
;499:#if !MONSTER_MODE
;500:	ex = CG_AllocLocalEntity();
;501:	ex->leType = LE_EXPLOSION;
;502:
;503:	ex->startTime = cg.time;
;504:	ex->endTime = ex->startTime + 500;
;505:	
;506:	VectorCopy ( origin, ex->refEntity.origin);
;507:	ex->refEntity.reType = RT_SPRITE;
;508:	ex->refEntity.rotation = rand() % 360;
;509:	ex->refEntity.radius = 24;
;510:
;511:	ex->refEntity.customShader = cgs.media.bloodExplosionShader;
;512:#else
;513:	if (cg_entities[entityNum].currentState.clientNum < MAX_CLIENTS) {
ADDRFP4 4
INDIRI4
CNSTI4 880
MULI4
ADDRGP4 cg_entities+168
ADDP4
INDIRI4
CNSTI4 64
GEI4 $225
line 514
;514:		ex = CG_AllocLocalEntity();
ADDRLP4 4
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 515
;515:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 517
;516:
;517:		ex->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 518
;518:		ex->endTime = ex->startTime + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 520
;519:	
;520:		VectorCopy ( origin, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 521
;521:		ex->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTI4 2
ASGNI4
line 522
;522:		ex->refEntity.rotation = rand() % 360;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 316
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 523
;523:		ex->refEntity.radius = 24;
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
CNSTF4 1103101952
ASGNF4
line 525
;524:
;525:		ex->refEntity.customShader = cgs.media.bloodExplosionShader;
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRGP4 cgs+751220+716
INDIRI4
ASGNI4
line 526
;526:	}
ADDRGP4 $226
JUMPV
LABELV $225
line 527
;527:	else {
line 528
;528:		ex = CG_SmokePuff(
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1106247680
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1065353216
ARGF4
CNSTF4 1140457472
ARGF4
ADDRGP4 cg+107656
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+751220+476
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 532
;529:			origin, vec3_origin, 30, 1, 1, 1, 1, 500, cg.time, 0, 0,
;530:			cgs.media.monsterBloodExplosionShader
;531:		);
;532:	}
LABELV $226
line 536
;533:#endif
;534:
;535:	// don't show player's own blood in view
;536:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $234
line 537
;537:		ex->refEntity.renderfx |= RF_THIRD_PERSON;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 538
;538:	}
LABELV $234
line 539
;539:}
LABELV $218
endproc CG_Bleed 16 48
export CG_LaunchGib
proc CG_LaunchGib 20 8
line 552
;540:
;541:
;542:
;543:/*
;544:==================
;545:CG_LaunchGib
;546:==================
;547:*/
;548:// JUHOX: new parameter for CG_LaunchGib
;549:#if MONSTER_MODE
;550:static qboolean launchMonsterGib;
;551:#endif
;552:void CG_LaunchGib( vec3_t origin, vec3_t velocity, qhandle_t hModel ) {
line 556
;553:	localEntity_t	*le;
;554:	refEntity_t		*re;
;555:
;556:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 557
;557:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 559
;558:
;559:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 560
;560:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 561
;561:	le->endTime = le->startTime + 5000 + random() * 3000;
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 5000
ADDI4
CVIF4 4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 893091840
MULF4
ADDF4
CVFI4 4
ASGNI4
line 563
;562:
;563:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 564
;564:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 565
;565:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 567
;566:
;567:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 568
;568:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 569
;569:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 570
;570:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 572
;571:
;572:	le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1058642330
ASGNF4
line 574
;573:
;574:	le->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 1
ASGNI4
line 575
;575:	le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 2
ASGNI4
line 578
;576:	// JUHOX: use monster gib shader
;577:#if MONSTER_MODE
;578:	if (launchMonsterGib) {
ADDRGP4 launchMonsterGib
INDIRI4
CNSTI4 0
EQI4 $240
line 579
;579:		le->leMarkType = LEMT_MONSTER_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 3
ASGNI4
line 580
;580:		re->customShader = cgs.media.monsterGibsShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+228
INDIRI4
ASGNI4
line 581
;581:	}
LABELV $240
line 583
;582:#endif
;583:}
LABELV $237
endproc CG_LaunchGib 20 8
export CG_GibPlayer
proc CG_GibPlayer 160 12
line 598
;584:
;585:/*
;586:===================
;587:CG_GibPlayer
;588:
;589:Generated a bunch of gibs launching out from the bodies location
;590:===================
;591:*/
;592:#define	GIB_VELOCITY	250
;593:#define	GIB_JUMP		250
;594:// JUHOX: new parameter for CG_GibPlayer
;595:#if !MONSTER_MODE
;596:void CG_GibPlayer( vec3_t playerOrigin ) {
;597:#else
;598:void CG_GibPlayer(vec3_t playerOrigin, centity_t* cent) {
line 605
;599:#endif
;600:	vec3_t	origin, velocity;
;601:#if MONSTER_MODE
;602:	float gibJump;	// JUHOX
;603:#endif
;604:
;605:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $245
line 606
;606:		return;
ADDRGP4 $244
JUMPV
LABELV $245
line 611
;607:	}
;608:
;609:	// JUHOX: set monster gib parameter for CG_LaunchGib()
;610:#if MONSTER_MODE
;611:	launchMonsterGib = (cent->currentState.clientNum >= MAX_CLIENTS);
ADDRFP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 64
LTI4 $249
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $250
JUMPV
LABELV $249
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $250
ADDRGP4 launchMonsterGib
ADDRLP4 28
INDIRI4
ASGNI4
line 614
;612:#endif
;613:#if MONSTER_MODE
;614:	gibJump = GIB_JUMP;
ADDRLP4 24
CNSTF4 1132068864
ASGNF4
line 616
;615:	if (
;616:		cent->currentState.clientNum >= MAX_CLIENTS &&
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 64
LTI4 $251
ADDRLP4 32
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $251
line 618
;617:		(cent->currentState.modelindex & PFMI_HIBERNATION_MODE)
;618:	) {
line 619
;619:		gibJump = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 620
;620:	}
LABELV $251
line 623
;621:#endif
;622:
;623:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 624
;624:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 36
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 36
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 36
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 625
;625:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 40
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 40
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 40
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 629
;626:#if !MONSTER_MODE
;627:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;628:#else
;629:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 44
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 44
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 44
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 631
;630:#endif
;631:	if ( rand() & 1 ) {
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $255
line 632
;632:		CG_LaunchGib( origin, velocity, cgs.media.gibSkull );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+220
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 633
;633:	} else {
ADDRGP4 $256
JUMPV
LABELV $255
line 634
;634:		CG_LaunchGib( origin, velocity, cgs.media.gibBrain );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+224
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 635
;635:	}
LABELV $256
line 638
;636:
;637:	// allow gibs to be turned off for speed
;638:	if ( !cg_gibs.integer ) {
ADDRGP4 cg_gibs+12
INDIRI4
CNSTI4 0
NEI4 $261
line 639
;639:		return;
ADDRGP4 $244
JUMPV
LABELV $261
line 642
;640:	}
;641:
;642:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 643
;643:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 52
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 52
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 52
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 644
;644:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 56
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 56
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 56
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 648
;645:#if !MONSTER_MODE
;646:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;647:#else
;648:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 60
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 60
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 60
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 650
;649:#endif
;650:	CG_LaunchGib( origin, velocity, cgs.media.gibAbdomen );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+188
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 652
;651:
;652:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 653
;653:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 64
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 64
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 64
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 654
;654:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 68
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 68
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 68
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 658
;655:#if !MONSTER_MODE
;656:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;657:#else
;658:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 72
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 72
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 72
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 660
;659:#endif
;660:	CG_LaunchGib( origin, velocity, cgs.media.gibArm );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+192
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 662
;661:
;662:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 663
;663:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 76
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 76
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 76
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 664
;664:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 80
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 80
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 80
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 668
;665:#if !MONSTER_MODE
;666:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;667:#else
;668:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 84
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 84
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 84
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 670
;669:#endif
;670:	CG_LaunchGib( origin, velocity, cgs.media.gibChest );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+196
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 672
;671:
;672:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 673
;673:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 88
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 88
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 88
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 674
;674:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 92
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 92
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 92
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 678
;675:#if !MONSTER_MODE
;676:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;677:#else
;678:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 96
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 96
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 96
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 680
;679:#endif
;680:	CG_LaunchGib( origin, velocity, cgs.media.gibFist );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+200
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 682
;681:
;682:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 683
;683:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 100
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 100
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 100
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 684
;684:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 104
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 104
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 104
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 688
;685:#if !MONSTER_MODE
;686:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;687:#else
;688:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 108
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 108
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 108
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 690
;689:#endif
;690:	CG_LaunchGib( origin, velocity, cgs.media.gibFoot );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+204
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 692
;691:
;692:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 693
;693:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 112
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 112
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 112
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 694
;694:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 116
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 116
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 116
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 698
;695:#if !MONSTER_MODE
;696:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;697:#else
;698:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 120
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 120
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 120
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 700
;699:#endif
;700:	CG_LaunchGib( origin, velocity, cgs.media.gibForearm );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+208
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 702
;701:
;702:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 703
;703:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 124
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 124
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 124
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 704
;704:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 128
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 128
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 128
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 708
;705:#if !MONSTER_MODE
;706:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;707:#else
;708:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 132
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 132
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 132
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 710
;709:#endif
;710:	CG_LaunchGib( origin, velocity, cgs.media.gibIntestine );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+212
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 712
;711:
;712:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 713
;713:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 136
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 136
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 136
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 714
;714:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 140
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 140
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 140
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 718
;715:#if !MONSTER_MODE
;716:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;717:#else
;718:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 144
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 144
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 144
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 720
;719:#endif
;720:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+216
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 722
;721:
;722:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 723
;723:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 148
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
ADDRLP4 148
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 148
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 724
;724:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 152
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+4
ADDRLP4 152
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 152
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ASGNF4
line 728
;725:#if !MONSTER_MODE
;726:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;727:#else
;728:	velocity[2] = gibJump + crandom()*GIB_VELOCITY;	// JUHOX
ADDRLP4 156
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ADDRLP4 156
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 156
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1140457472
MULF4
ADDF4
ASGNF4
line 730
;729:#endif
;730:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+751220+216
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 731
;731:}
LABELV $244
endproc CG_GibPlayer 160 12
proc CG_LaunchBFGExpl 48 0
line 739
;732:
;733:/*
;734:==================
;735:JUHOX: CG_LaunchBFGExpl
;736:==================
;737:*/
;738:#define	BFGEXP_VELOCITY 1000
;739:static void CG_LaunchBFGExpl(vec3_t origin, float radius) {
line 743
;740:	localEntity_t* le;
;741:	refEntity_t* re;
;742:
;743:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 744
;744:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
line 746
;745:
;746:	le->leType = LE_BFGEXPL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 747
;747:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107656
INDIRI4
ASGNI4
line 748
;748:	le->endTime = le->startTime + 1000 + random() * 2000;
ADDRLP4 12
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ADDRLP4 12
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 12
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 888799232
MULF4
ADDF4
CVFI4 4
ASGNI4
line 749
;749:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 750
;750:	le->radius = radius;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 4
INDIRF4
ASGNF4
line 752
;751:
;752:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 753
;753:	VectorCopy(origin, re->origin);
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 754
;754:	re->customShader = cgs.media.bfgSuperExplShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+751220+500
INDIRI4
ASGNI4
line 756
;755:
;756:	re->shaderRGBA[0] = rand() % 50;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 50
MODI4
CVIU4 4
CVUU1 4
ASGNU1
line 757
;757:	re->shaderRGBA[1] = 255;
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 758
;758:	re->shaderRGBA[2] = 75 + rand() % 75;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 28
INDIRI4
CNSTI4 75
MODI4
CNSTI4 75
ADDI4
CVIU4 4
CVUU1 4
ASGNU1
line 759
;759:	le->color[3] = 255 * (0.5 + 0.5*random());
ADDRLP4 32
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 32
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 32
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
MULF4
CNSTF4 1056964608
ADDF4
CNSTF4 1132396544
MULF4
ASGNF4
line 761
;760:
;761:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 762
;762:	VectorCopy(origin, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 763
;763:	le->pos.trDelta[0] = BFGEXP_VELOCITY * crandom();
ADDRLP4 36
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 36
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 36
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1148846080
MULF4
ASGNF4
line 764
;764:	le->pos.trDelta[1] = BFGEXP_VELOCITY * crandom();
ADDRLP4 40
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 40
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 40
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1148846080
MULF4
ASGNF4
line 765
;765:	le->pos.trDelta[2] = BFGEXP_VELOCITY * crandom();
ADDRLP4 44
ADDRGP4 lrand
CALLU4
ASGNU4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 44
INDIRU4
CNSTI4 1
RSHU4
CVUI4 4
CVIF4 4
CNSTF4 1073741824
MULF4
ADDRLP4 44
INDIRU4
CNSTU4 1
BANDU4
CVUI4 4
CVIF4 4
ADDF4
CNSTF4 796917760
MULF4
CNSTF4 1056964608
SUBF4
CNSTF4 1073741824
MULF4
CNSTF4 1148846080
MULF4
ASGNF4
line 766
;766:	le->pos.trTime = cg.time - 200;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107656
INDIRI4
CNSTI4 200
SUBI4
ASGNI4
line 768
;767:	
;768:	le->bounceFactor = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1061158912
ASGNF4
line 770
;769:
;770:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 0
ASGNI4
line 771
;771:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 772
;772:}
LABELV $300
endproc CG_LaunchBFGExpl 48 0
export CG_BFGsuperExpl
proc CG_BFGsuperExpl 12 8
line 779
;773:
;774:/*
;775:==================
;776:JUHOX: CG_BFGsuperExpl
;777:==================
;778:*/
;779:void CG_BFGsuperExpl(vec3_t origin) {
line 780
;780:	CG_LaunchBFGExpl(origin, 50);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1112014848
ARGF4
ADDRGP4 CG_LaunchBFGExpl
CALLV
pop
line 781
;781:	CG_LaunchBFGExpl(origin, 50);
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1112014848
ARGF4
ADDRGP4 CG_LaunchBFGExpl
CALLV
pop
line 782
;782:	CG_LaunchBFGExpl(origin, 10 + rand()%20);
ADDRLP4 0
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 20
MODI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRGP4 CG_LaunchBFGExpl
CALLV
pop
line 783
;783:	CG_LaunchBFGExpl(origin, 10 + rand()%20);
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 20
MODI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRGP4 CG_LaunchBFGExpl
CALLV
pop
line 784
;784:	CG_LaunchBFGExpl(origin, 10 + rand()%20);
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 20
MODI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRGP4 CG_LaunchBFGExpl
CALLV
pop
line 785
;785:}
LABELV $305
endproc CG_BFGsuperExpl 12 8
bss
align 4
LABELV launchMonsterGib
skip 4
import CG_AdjustParticles
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_CheckMouseEvents
import CG_TSS_CheckKeyEvents
import CG_TSS_MouseEvent
import CG_TSS_KeyEvent
import CG_TSS_CloseInterface
import CG_TSS_OpenInterface
import CG_TSS_DrawInterface
import CG_TSS_SPrintTacticalMeasure
import CG_TSS_Update
import CG_TSS_SaveInterface
import CG_TSS_LoadInterface
import CG_TSS_InitInterface
import TSS_SetPalette
import TSS_GetPalette
import CG_TSS_StrategyNameChanged
import CG_TSS_SetSearchPattern
import CG_TSS_CreateNewStrategy
import CG_TSS_FreePaletteSlot
import CG_TSS_SavePaletteSlotIfNeeded
import CG_TSS_LoadPaletteSlot
import CG_TSS_GetSortIndexByID
import CG_TSS_GetSortedSlot
import CG_TSS_GetSlotByName
import CG_TSS_GetSlotByID
import CG_TSS_NumStrategiesInStock
import TSSFS_SaveStrategyStock
import TSSFS_LoadStrategyStock
import TSSFS_LoadStrategy
import TSSFS_SaveStrategy
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_BigExplode
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_DrawLightBlobs
import CG_CheckStrongLight
import CG_AddLightningMarks
import CG_AddNearbox
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Draw3DLine
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PrevWeaponOrder_f
import CG_NextWeaponOrder_f
import CG_SkipWeapon_f
import CG_BestWeapon_f
import CG_AutoSwitchToBestWeapon
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $202
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 107
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 105
byte 1 0
