code
proc TSSFS_PackInstructions 40 0
file "..\..\..\..\code\cgame\cg_tssfile.c"
line 25
;1:// Copyright (C) 2001 J. Hoffmann
;2://
;3:// cg_tssfile -- file operations of the client part of the tactical support system
;4:#include "cg_local.h"
;5:
;6:
;7:
;8:
;9:
;10:static tss_strategy_t strategyFileBuf;
;11:
;12:static tss_strategyStock_t strategyStock;
;13:static int sortedStrategies[SSO_num_orders][TSS_MAX_STRATEGIES];
;14:static int numStrategies[SSO_num_orders];
;15:static int searchCompatibility[TSS_MAX_STRATEGIES];	// index is strategy id#
;16:static char searchPattern[256];
;17:
;18:static tss_strategy_t strategyPaletteBuf[TSS_MAX_STRATEGIES_PER_PALETTE];
;19:static qboolean strategyPaletteBufUsed[TSS_MAX_STRATEGIES_PER_PALETTE];
;20:
;21:
;22:
;23:
;24:#if TSSINCVAR
;25:static void TSSFS_PackInstructions(const tss_instructions_t* i, tss_packedInstructions_t* pi) {
line 28
;26:	int g;
;27:
;28:	for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $125
line 29
;29:		pi->division[g].groupOrganization = i->groupOrganization[g];
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRU1
CVUI4 1
CVII1 4
ASGNI1
line 30
;30:		pi->division[g].minTotalMembers = i->division.group[g].minTotalMembers;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 1
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 31
;31:		pi->division[g].minAliveMembers = i->division.group[g].minAliveMembers;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 2
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 32
;32:		pi->division[g].minReadyMembers = i->division.group[g].minReadyMembers;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 3
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 33
;33:		pi->orders[g].missionAndMaxGuards = (i->orders.order[g].mission << 3) | (i->orders.order[g].maxGuards);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 24
INDIRP4
CNSTI4 140
ADDP4
ADDP4
INDIRI4
CNSTI4 3
LSHI4
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 24
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 16
ADDP4
INDIRI4
BORI4
CVIU4 4
CVUU1 4
ASGNU1
line 34
;34:		pi->orders[g].maxDanger = i->orders.order[g].maxDanger;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 1
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 35
;35:		pi->orders[g].minReady = i->orders.order[g].minReady;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 2
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 36
;36:		pi->orders[g].minGroupSize = i->orders.order[g].minGroupSize;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 3
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 12
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 37
;37:	}
LABELV $126
line 28
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $125
line 38
;38:}
LABELV $124
endproc TSSFS_PackInstructions 40 0
proc TSSFS_UnpackInstructions 44 0
line 42
;39:#endif
;40:
;41:#if TSSINCVAR
;42:static void TSSFS_UnpackInstructions(const tss_packedInstructions_t* pi, tss_instructions_t* i) {
line 46
;43:	int g;
;44:	int assignedPlayers;
;45:
;46:	assignedPlayers = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 47
;47:	for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $130
line 48
;48:		i->groupOrganization[g] = pi->division[g].groupOrganization;
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CVIU4 4
CVUU1 4
ASGNU1
line 49
;49:		i->division.group[g].minTotalMembers = pi->division[g].minTotalMembers;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 50
;50:		assignedPlayers += i->division.group[g].minTotalMembers;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 51
;51:		i->division.group[g].minAliveMembers = pi->division[g].minAliveMembers;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI4 2
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 52
;52:		i->division.group[g].minReadyMembers = pi->division[g].minReadyMembers;
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI4 3
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 53
;53:		i->orders.order[g].mission = pi->orders[g].missionAndMaxGuards >> 3;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
INDIRU1
CVUI4 1
CNSTI4 3
RSHI4
ASGNI4
line 54
;54:		i->orders.order[g].maxGuards = pi->orders[g].missionAndMaxGuards & 7;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 16
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
INDIRU1
CVUI4 1
CNSTI4 7
BANDI4
ASGNI4
line 55
;55:		i->orders.order[g].maxDanger = pi->orders[g].maxDanger;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 56
;56:		i->orders.order[g].minReady = pi->orders[g].minReady;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 2
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 57
;57:		i->orders.order[g].minGroupSize = pi->orders[g].minGroupSize;
ADDRLP4 0
INDIRI4
CNSTI4 20
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDP4
CNSTI4 3
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 58
;58:	}
LABELV $131
line 47
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $130
line 59
;59:	i->division.unassignedPlayers = 100 - assignedPlayers;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 100
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 60
;60:}
LABELV $129
endproc TSSFS_UnpackInstructions 44 0
proc TSSFS_PackDirective 32 12
line 92
;61:#endif
;62:
;63:#if TSSINCVAR
;64:/*
;65:static tss_packedPredicate_t TSSFS_PackPredicate(const tss_tacticalPredicate_t* tp) {
;66:	tss_packedPredicate_t pp;
;67:
;68:	pp = (tp->magnitude * TSSPROP_num_operators + tp->op) * 201 + tp->limit + 100;
;69:	return pp;
;70:}
;71:*/
;72:#endif
;73:
;74:#if TSSINCVAR
;75:/*
;76:static void TSSFS_UnpackPredicate(tss_packedPredicate_t pp, tss_tacticalPredicate_t* tp) {
;77:	int n;
;78:
;79:	n = pp & 0xffff;	// Due to a bug in the compiler or assembler we can't define
;80:						// 'tss_packedPredicate_t' as unsigned. So we're forced to this hack.
;81:
;82:	tp->limit = (n % 201) - 100;
;83:	n /= 201;
;84:	tp->op = n % TSSPROP_num_operators;
;85:	n /= TSSPROP_num_operators;
;86:	tp->magnitude = pp;
;87:}
;88:*/
;89:#endif
;90:
;91:#if TSSINCVAR
;92:static void TSSFS_PackDirective(const tss_directive_t* d, tss_packedDirective_t* pd) {
line 95
;93:	int i, j;
;94:
;95:	TSSFS_PackInstructions(&d->instr, &pd->instr);
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 TSSFS_PackInstructions
CALLV
pop
line 96
;96:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $135
line 97
;97:		for (j = 0; j < TSS_PREDICATES_PER_CLAUSE; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $139
line 98
;98:			pd->magnitudes[i][j] = d->occasion.clause[i].predicate[j].magnitude;
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 99
;99:			pd->operators[i][j] = d->occasion.clause[i].predicate[j].op;
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 100
;100:			pd->limits[i][j] = d->occasion.clause[i].predicate[j].limit;
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 102
;101:			//pd->occasion[i][j] = TSSFS_PackPredicate(&d->occasion.clause[i].predicate[j]);
;102:		}
LABELV $140
line 97
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $139
line 103
;103:	}
LABELV $136
line 96
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 6
LTI4 $135
line 104
;104:	Q_strncpyz(pd->name, d->name, sizeof(pd->name));
ADDRFP4 4
INDIRP4
CNSTI4 260
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 105
;105:}
LABELV $134
endproc TSSFS_PackDirective 32 12
proc GetMagnitude 4 0
line 109
;106:#endif
;107:
;108:#if TSSINCVAR
;109:static tss_tacticalMagnitude_t GetMagnitude(int m) {
line 110
;110:	if (m < 0 || m >= TSSTM_num_magnitudes) m = TSSTM_no;
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $146
ADDRLP4 0
INDIRI4
CNSTI4 40
LTI4 $144
LABELV $146
ADDRFP4 0
CNSTI4 0
ASGNI4
LABELV $144
line 111
;111:	return m;
ADDRFP4 0
INDIRI4
RETI4
LABELV $143
endproc GetMagnitude 4 0
proc GetOperator 4 0
line 116
;112:}
;113:#endif
;114:
;115:#if TSSINCVAR
;116:static tss_tacticalPredicate_operator_t GetOperator(int op) {
line 117
;117:	if (op < 0 || op >= TSSPROP_num_operators) op = 0;
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $150
ADDRLP4 0
INDIRI4
CNSTI4 6
LTI4 $148
LABELV $150
ADDRFP4 0
CNSTI4 0
ASGNI4
LABELV $148
line 118
;118:	return op;
ADDRFP4 0
INDIRI4
RETI4
LABELV $147
endproc GetOperator 4 0
proc GetLimit 0 0
line 123
;119:}
;120:#endif
;121:
;122:#if TSSINCVAR
;123:static int GetLimit(int limit) {
line 124
;124:	if (limit < -100) limit = -100;
ADDRFP4 0
INDIRI4
CNSTI4 -100
GEI4 $152
ADDRFP4 0
CNSTI4 -100
ASGNI4
LABELV $152
line 125
;125:	if (limit > 100) limit = 100;
ADDRFP4 0
INDIRI4
CNSTI4 100
LEI4 $154
ADDRFP4 0
CNSTI4 100
ASGNI4
LABELV $154
line 126
;126:	return limit;
ADDRFP4 0
INDIRI4
RETI4
LABELV $151
endproc GetLimit 0 0
proc TSSFS_UnpackDirective 44 12
line 131
;127:}
;128:#endif
;129:
;130:#if TSSINCVAR
;131:static void TSSFS_UnpackDirective(const tss_packedDirective_t* pd, tss_directive_t* d) {
line 134
;132:	int i, j;
;133:
;134:	TSSFS_UnpackInstructions(&pd->instr, &d->instr);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 780
ADDP4
ARGP4
ADDRGP4 TSSFS_UnpackInstructions
CALLV
pop
line 135
;135:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $157
line 136
;136:		for (j = 0; j < TSS_PREDICATES_PER_CLAUSE; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $161
line 137
;137:			d->occasion.clause[i].predicate[j].magnitude = GetMagnitude(pd->magnitudes[i][j]);
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDP4
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 16
ADDRGP4 GetMagnitude
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 138
;138:			d->occasion.clause[i].predicate[j].op = GetOperator(pd->operators[i][j]);
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDP4
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 28
ADDRGP4 GetOperator
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 139
;139:			d->occasion.clause[i].predicate[j].limit = GetLimit(pd->limits[i][j]);
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 10
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDP4
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 40
ADDRGP4 GetLimit
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 4
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 141
;140:			//TSSFS_UnpackPredicate(pd->occasion[i][j], &d->occasion.clause[i].predicate[j]);
;141:		}
LABELV $162
line 136
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $161
line 142
;142:	}
LABELV $158
line 135
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 6
LTI4 $157
line 143
;143:	Q_strncpyz(d->name, pd->name, sizeof(d->name));
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 144
;144:}
LABELV $156
endproc TSSFS_UnpackDirective 44 12
proc TSSFS_PackFlags 5 0
line 148
;145:#endif
;146:
;147:#if TSSINCVAR
;148:static tss_packedOccasionClauseUseFlags_t TSSFS_PackFlags(const tss_directive_t* d) {
line 152
;149:	tss_packedOccasionClauseUseFlags_t f;
;150:	int i;
;151:
;152:	f = 0;
ADDRLP4 4
CNSTU1 0
ASGNU1
line 153
;153:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $166
line 154
;154:		if (!d->occasion.clause[i].inUse) continue;
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $170
ADDRGP4 $167
JUMPV
LABELV $170
line 156
;155:
;156:		f |= 1 << i;
ADDRLP4 4
ADDRLP4 4
INDIRU1
CVUI4 1
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
CVIU4 4
CVUU1 4
ASGNU1
line 157
;157:	}
LABELV $167
line 153
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LTI4 $166
line 159
;158:
;159:	if (d->inUse) f |= TSS_PACKED_OCCASION_FLAGS_DIRECTIVE_USED;
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $172
ADDRLP4 4
ADDRLP4 4
INDIRU1
CVUI4 1
CNSTI4 128
BORI4
CVIU4 4
CVUU1 4
ASGNU1
LABELV $172
line 161
;160:
;161:	return f;
ADDRLP4 4
INDIRU1
CVUI4 1
RETI4
LABELV $165
endproc TSSFS_PackFlags 5 0
proc TSSFS_UnpackFlags 12 0
ADDRFP4 0
ADDRFP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 166
;162:}
;163:#endif
;164:
;165:#if TSSINCVAR
;166:static void TSSFS_UnpackFlags(tss_packedOccasionClauseUseFlags_t f, tss_directive_t* d) {
line 169
;167:	int i;
;168:
;169:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $175
line 170
;170:		d->occasion.clause[i].inUse = (f & (1 << i))? qtrue : qfalse;
ADDRFP4 0
INDIRU1
CVUI4 1
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $180
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $181
JUMPV
LABELV $180
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $181
ADDRLP4 0
INDIRI4
CNSTI4 124
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 171
;171:	}
LABELV $176
line 169
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LTI4 $175
line 172
;172:	d->inUse = (f & TSS_PACKED_OCCASION_FLAGS_DIRECTIVE_USED)? qtrue : qfalse;
ADDRFP4 0
INDIRU1
CVUI4 1
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $183
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $184
JUMPV
LABELV $183
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $184
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
line 173
;173:}
LABELV $174
endproc TSSFS_UnpackFlags 12 0
proc TSSFS_PackStrategy 16 12
line 177
;174:#endif
;175:
;176:#if TSSINCVAR
;177:static void TSSFS_PackStrategy(const tss_strategy_t* s, tss_packedStrategy_t* ps) {
line 180
;178:	int i;
;179:
;180:	memset(ps, 0, sizeof(*ps));
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 7828
ARGI4
ADDRGP4 memset
CALLP4
pop
line 182
;181:
;182:	memcpy(ps->id, s->id, sizeof(s->id));
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 183
;183:	ps->version = s->version;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 184
;184:	ps->gametype = s->gametype;
ADDRFP4 4
INDIRP4
CNSTI4 5
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 185
;185:	memcpy(ps->generic, s->generic, sizeof(s->generic));
ADDRFP4 4
INDIRP4
CNSTI4 6
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 186
;186:	memcpy(ps->name, s->name, sizeof(s->name));
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 187
;187:	memcpy(ps->comment, s->comment, sizeof(s->comment));
ADDRFP4 4
INDIRP4
CNSTI4 56
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 188
;188:	ps->autoCondition = s->autoCondition;
ADDRFP4 4
INDIRP4
CNSTI4 7818
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 189
;189:	ps->rfa_dangerLimit = s->rfa_dangerLimit;
ADDRFP4 4
INDIRP4
CNSTI4 7819
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 190
;190:	ps->rfd_dangerLimit = s->rfd_dangerLimit;
ADDRFP4 4
INDIRP4
CNSTI4 7820
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 191
;191:	ps->short_term = s->short_term;
ADDRFP4 4
INDIRP4
CNSTI4 7821
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 192
;192:	ps->medium_term = s->medium_term;
ADDRFP4 4
INDIRP4
CNSTI4 7822
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 193
;193:	ps->long_term = s->long_term;
ADDRFP4 4
INDIRP4
CNSTI4 7823
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CVII1 4
ASGNI1
line 195
;194:
;195:	TSSFS_PackInstructions(&s->directives[0].instr, &ps->defaultInstructions);
ADDRFP4 0
INDIRP4
CNSTI4 928
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ARGP4
ADDRGP4 TSSFS_PackInstructions
CALLV
pop
line 197
;196:
;197:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $186
line 198
;198:		TSSFS_PackDirective(&s->directives[i + 1], &ps->nonDefaultDirectives[i]);
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDP4
ARGP4
ADDRGP4 TSSFS_PackDirective
CALLV
pop
line 199
;199:		ps->nonDefaultDirectivesFlags[i] = TSSFS_PackFlags(&s->directives[i + 1]);
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 TSSFS_PackFlags
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 7792
ADDP4
ADDP4
ADDRLP4 12
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 200
;200:	}
LABELV $187
line 197
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LTI4 $186
line 201
;201:}
LABELV $185
endproc TSSFS_PackStrategy 16 12
proc CG_TSS_CorrectName 4 0
line 204
;202:#endif
;203:
;204:static void CG_TSS_CorrectName(char* name, int size) {
line 205
;205:	for (; size-- > 0 && *name != 0; name++) {
ADDRGP4 $194
JUMPV
LABELV $191
line 206
;206:		if (*name >= 32) continue;
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
LTI4 $195
ADDRGP4 $192
JUMPV
LABELV $195
line 208
;207:
;208:		*name = '_';
ADDRFP4 0
INDIRP4
CNSTI1 95
ASGNI1
line 209
;209:	}
LABELV $192
line 205
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $194
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRFP4 4
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $197
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $191
LABELV $197
line 210
;210:}
LABELV $190
endproc CG_TSS_CorrectName 4 0
proc TSSFS_MakeStrategyValid 36 12
line 213
;211:
;212:#if TSSINCVAR
;213:static void TSSFS_MakeStrategyValid(tss_strategy_t* strategy) {
line 216
;214:	int i;
;215:
;216:	strategy->directives[0].inUse = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 217
;217:	memset(&strategy->directives[0].name, 0, TSS_NAME_SIZE);
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 memset
CALLP4
pop
line 218
;218:	strcpy(strategy->directives[0].name, "default");
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 $199
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 219
;219:	memset(&strategy->directives[0].occasion, 0, sizeof(tss_occasion_t));
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 744
ARGI4
ADDRGP4 memset
CALLP4
pop
line 220
;220:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY+1; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $200
line 224
;221:		int g, n;
;222:		char groupUsed[16];
;223:
;224:		CG_TSS_CorrectName(strategy->directives[i].name, TSS_NAME_SIZE);
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 CG_TSS_CorrectName
CALLV
pop
line 226
;225:
;226:		n = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 227
;227:		for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $204
line 228
;228:			n += strategy->directives[i].instr.division.group[g].minTotalMembers;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 800
ADDP4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 229
;229:		}
LABELV $205
line 227
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 10
LTI4 $204
line 230
;230:		if (n < 0 || n > 100) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $210
ADDRLP4 8
INDIRI4
CNSTI4 100
LEI4 $208
LABELV $210
line 231
;231:			for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $211
line 232
;232:				strategy->directives[i].instr.division.group[g].minTotalMembers = 0;
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 800
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 233
;233:			}
LABELV $212
line 231
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 10
LTI4 $211
line 234
;234:		}
ADDRGP4 $209
JUMPV
LABELV $208
line 235
;235:		else {
line 236
;236:			strategy->directives[i].instr.division.unassignedPlayers = 100 - n;
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 796
ADDP4
CNSTI4 100
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 237
;237:		}
LABELV $209
line 239
;238:
;239:		memset(groupUsed, 0, sizeof(groupUsed));
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 memset
CALLP4
pop
line 240
;240:		for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $215
line 241
;241:			n = strategy->directives[i].instr.groupOrganization[g];
ADDRLP4 8
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 780
ADDP4
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 242
;242:			if (n < 0) break;
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $219
ADDRGP4 $217
JUMPV
LABELV $219
line 243
;243:			if (n >= MAX_GROUPS) break;
ADDRLP4 8
INDIRI4
CNSTI4 10
LTI4 $221
ADDRGP4 $217
JUMPV
LABELV $221
line 244
;244:			if (groupUsed[n]) break;
ADDRLP4 8
INDIRI4
ADDRLP4 12
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $223
ADDRGP4 $217
JUMPV
LABELV $223
line 246
;245:
;246:			groupUsed[n] = qtrue;
ADDRLP4 8
INDIRI4
ADDRLP4 12
ADDP4
CNSTI1 1
ASGNI1
line 247
;247:		}
LABELV $216
line 240
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 10
LTI4 $215
LABELV $217
line 248
;248:		if (g < MAX_GROUPS) {
ADDRLP4 4
INDIRI4
CNSTI4 10
GEI4 $225
line 249
;249:			for (g = 0; g < MAX_GROUPS; g++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $227
line 250
;250:				strategy->directives[i].instr.groupOrganization[g] = g;
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 780
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 251
;251:			}
LABELV $228
line 249
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 10
LTI4 $227
line 252
;252:		}
LABELV $225
line 253
;253:	}
LABELV $201
line 220
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 27
LTI4 $200
line 254
;254:}
LABELV $198
endproc TSSFS_MakeStrategyValid 36 12
proc TSSFS_UnpackStrategy 24 12
line 258
;255:#endif
;256:
;257:#if TSSINCVAR
;258:static void TSSFS_UnpackStrategy(const tss_packedStrategy_t* ps, tss_strategy_t* s) {
line 261
;259:	int i;
;260:
;261:	memset(s, 0, sizeof(*s));
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 30388
ARGI4
ADDRGP4 memset
CALLP4
pop
line 263
;262:
;263:	memcpy(s->id, ps->id, sizeof(ps->id));
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 264
;264:	s->version = ps->version;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 265
;265:	s->gametype = ps->gametype;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 5
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 266
;266:	memcpy(s->generic, ps->generic, sizeof(s->generic));
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 6
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 267
;267:	memcpy(s->name, ps->name, sizeof(ps->name));
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 268
;268:	s->name[TSS_NAME_SIZE-1] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 59
ADDP4
CNSTI1 0
ASGNI1
line 269
;269:	memcpy(s->comment, ps->comment, sizeof(s->comment));
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 270
;270:	s->comment[63] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 123
ADDP4
CNSTI1 0
ASGNI1
line 271
;271:	s->autoCondition = ps->autoCondition? qtrue : qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 7818
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $233
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRGP4 $234
JUMPV
LABELV $233
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $234
ADDRFP4 4
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 272
;272:	s->rfa_dangerLimit = GetLimit(ps->rfa_dangerLimit);
ADDRFP4 0
INDIRP4
CNSTI4 7819
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 8
ADDRGP4 GetLimit
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 273
;273:	s->rfd_dangerLimit = GetLimit(ps->rfd_dangerLimit);
ADDRFP4 0
INDIRP4
CNSTI4 7820
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 12
ADDRGP4 GetLimit
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 274
;274:	s->short_term = ps->short_term;
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 7821
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 275
;275:	if (s->short_term < 0) s->short_term = 0;
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
CNSTI4 0
GEI4 $235
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 0
ASGNI4
LABELV $235
line 276
;276:	if (s->short_term > 100) s->short_term = 100;
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
INDIRI4
CNSTI4 100
LEI4 $237
ADDRFP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 100
ASGNI4
LABELV $237
line 277
;277:	s->medium_term = ps->medium_term;
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 7822
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 278
;278:	if (s->medium_term < 0) s->medium_term = 0;
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 0
GEI4 $239
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
CNSTI4 0
ASGNI4
LABELV $239
line 279
;279:	if (s->medium_term > 100) s->medium_term = 100;
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
CNSTI4 100
LEI4 $241
ADDRFP4 4
INDIRP4
CNSTI4 140
ADDP4
CNSTI4 100
ASGNI4
LABELV $241
line 280
;280:	s->long_term = ps->long_term;
ADDRFP4 4
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 7823
ADDP4
INDIRI1
CVII4 1
ASGNI4
line 281
;281:	if (s->long_term < 0) s->long_term = 0;
ADDRFP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 0
GEI4 $243
ADDRFP4 4
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
LABELV $243
line 282
;282:	if (s->long_term > 100) s->long_term = 100;
ADDRFP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 100
LEI4 $245
ADDRFP4 4
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 100
ASGNI4
LABELV $245
line 284
;283:
;284:	TSSFS_UnpackInstructions(&ps->defaultInstructions, &s->directives[0].instr);
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 928
ADDP4
ARGP4
ADDRGP4 TSSFS_UnpackInstructions
CALLV
pop
line 286
;285:
;286:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $247
line 287
;287:		TSSFS_UnpackDirective(&ps->nonDefaultDirectives[i], &s->directives[i + 1]);
ADDRLP4 0
INDIRI4
CNSTI4 292
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
ADDRGP4 TSSFS_UnpackDirective
CALLV
pop
line 288
;288:		TSSFS_UnpackFlags(ps->nonDefaultDirectivesFlags[i], &s->directives[i + 1]);
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 7792
ADDP4
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 1268
ADDP4
ADDP4
ARGP4
ADDRGP4 TSSFS_UnpackFlags
CALLV
pop
line 289
;289:	}
LABELV $248
line 286
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LTI4 $247
line 291
;290:
;291:	TSSFS_MakeStrategyValid(s);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 TSSFS_MakeStrategyValid
CALLV
pop
line 292
;292:}
LABELV $231
endproc TSSFS_UnpackStrategy 24 12
proc TSSFS_CodeTriplet 64 4
line 296
;293:#endif
;294:
;295:#if TSSINCVAR
;296:static int TSSFS_CodeTriplet(const unsigned char* input, int size, unsigned char** output) {
line 300
;297:	int t1, t2, t3;
;298:	int len;
;299:
;300:	len = 3;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 301
;301:	if (len > size) len = size;
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
LEI4 $252
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $252
line 302
;302:	t1 = t2 = t3 = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 303
;303:	if (size > 0) t1 = input[0];
ADDRFP4 4
INDIRI4
CNSTI4 0
LEI4 $254
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRU1
CVUI4 1
ASGNI4
LABELV $254
line 304
;304:	if (size > 1) t2 = input[1];
ADDRFP4 4
INDIRI4
CNSTI4 1
LEI4 $256
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRU1
CVUI4 1
ASGNI4
LABELV $256
line 305
;305:	if (size > 2) t3 = input[2];
ADDRFP4 4
INDIRI4
CNSTI4 2
LEI4 $258
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 2
ADDP4
INDIRU1
CVUI4 1
ASGNI4
LABELV $258
line 307
;306:
;307:	if (t1 == 0 && t2 == 0 && t3 == 0) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $260
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $260
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $260
line 310
;308:		int i;
;309:
;310:		len = 4095 + 64 + 9;
ADDRLP4 0
CNSTI4 4168
ASGNI4
line 311
;311:		if (len > size) len = size;
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
LEI4 $262
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $262
line 312
;312:		for (i = 3; i < len; i++) if (input[i]) break;
ADDRLP4 20
CNSTI4 3
ASGNI4
ADDRGP4 $267
JUMPV
LABELV $264
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRU1
CVUI4 1
CNSTI4 0
EQI4 $268
ADDRGP4 $266
JUMPV
LABELV $268
LABELV $265
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $267
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $264
LABELV $266
line 313
;313:		len = i;
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 314
;314:		switch (len) {
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $270
ADDRLP4 0
INDIRI4
CNSTI4 8
GTI4 $270
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $280-12
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $280
address $272
address $273
address $274
address $275
address $276
address $277
code
LABELV $272
line 316
;315:		case 3:
;316:			(*output)[0] = '!';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 33
ASGNU1
line 317
;317:			*output += 1;
ADDRLP4 28
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 318
;318:			break;
ADDRGP4 $261
JUMPV
LABELV $273
line 320
;319:		case 4:
;320:			(*output)[0] = '?';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 63
ASGNU1
line 321
;321:			*output += 1;
ADDRLP4 32
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 322
;322:			break;
ADDRGP4 $261
JUMPV
LABELV $274
line 324
;323:		case 5:
;324:			(*output)[0] = '(';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 40
ASGNU1
line 325
;325:			*output += 1;
ADDRLP4 36
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 326
;326:			break;
ADDRGP4 $261
JUMPV
LABELV $275
line 328
;327:		case 6:
;328:			(*output)[0] = ')';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 41
ASGNU1
line 329
;329:			*output += 1;
ADDRLP4 40
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 330
;330:			break;
ADDRGP4 $261
JUMPV
LABELV $276
line 332
;331:		case 7:
;332:			(*output)[0] = '[';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 91
ASGNU1
line 333
;333:			*output += 1;
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 334
;334:			break;
ADDRGP4 $261
JUMPV
LABELV $277
line 336
;335:		case 8:
;336:			(*output)[0] = ']';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 93
ASGNU1
line 337
;337:			*output += 1;
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 338
;338:			break;
ADDRGP4 $261
JUMPV
LABELV $270
line 340
;339:		default:
;340:			if (len < 64 + 9) {
ADDRLP4 0
INDIRI4
CNSTI4 73
GEI4 $278
line 341
;341:				(*output)[0] = '*';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 42
ASGNU1
line 342
;342:				(*output)[1] = TSS_CodeNibble(len - 9);
ADDRLP4 0
INDIRI4
CNSTI4 9
SUBI4
ARGI4
ADDRLP4 52
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ADDRLP4 52
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 343
;343:				*output += 2;
ADDRLP4 56
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 344
;344:			}
ADDRGP4 $261
JUMPV
LABELV $278
line 345
;345:			else {
line 346
;346:				t1 = len - (64 + 9);
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 73
SUBI4
ASGNI4
line 347
;347:				(*output)[0] = '=';
ADDRFP4 8
INDIRP4
INDIRP4
CNSTU1 61
ASGNU1
line 348
;348:				(*output)[1] = TSS_CodeNibble(t1 >> 6);
ADDRLP4 4
INDIRI4
CNSTI4 6
RSHI4
ARGI4
ADDRLP4 52
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ADDRLP4 52
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 349
;349:				(*output)[2] = TSS_CodeNibble(t1);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
ADDRLP4 56
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 350
;350:				*output += 3;
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRP4
CNSTI4 3
ADDP4
ASGNP4
line 351
;351:			}
line 352
;352:			break;
line 354
;353:		}
;354:	}
ADDRGP4 $261
JUMPV
LABELV $260
line 355
;355:	else {
line 356
;356:		(*output)[0] = TSS_CodeNibble(t1);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
ADDRLP4 20
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 357
;357:		(*output)[1] = TSS_CodeNibble((t1 >> 6) + (t2 << 2));
ADDRLP4 4
INDIRI4
CNSTI4 6
RSHI4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ADDRLP4 24
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 358
;358:		(*output)[2] = TSS_CodeNibble((t2 >> 4) + (t3 << 4));
ADDRLP4 8
INDIRI4
CNSTI4 4
RSHI4
ADDRLP4 12
INDIRI4
CNSTI4 4
LSHI4
ADDI4
ARGI4
ADDRLP4 28
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
ADDRLP4 28
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 359
;359:		(*output)[3] = TSS_CodeNibble(t3 >> 2);
ADDRLP4 12
INDIRI4
CNSTI4 2
RSHI4
ARGI4
ADDRLP4 32
ADDRGP4 TSS_CodeNibble
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
INDIRP4
CNSTI4 3
ADDP4
ADDRLP4 32
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 360
;360:		*output += 4;
ADDRLP4 36
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 361
;361:	}
LABELV $261
line 362
;362:	return len;
ADDRLP4 0
INDIRI4
RETI4
LABELV $251
endproc TSSFS_CodeTriplet 64 4
proc TSSFS_DecodeTriplet 112 4
line 367
;363:}
;364:#endif
;365:
;366:#if TSSINCVAR
;367:static int TSSFS_DecodeTriplet(const unsigned char** input, unsigned char* output, int size) {
line 372
;368:	int t1, t2, t3, t4;
;369:	int len;
;370:	int numZero;
;371:
;372:	t1 = t2 = t3 = t4 = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 12
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 24
INDIRI4
ASGNI4
line 374
;373:
;374:	switch ((*input)[0]) {
ADDRLP4 28
ADDRFP4 0
INDIRP4
INDIRP4
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 40
EQI4 $289
ADDRLP4 28
INDIRI4
CNSTI4 41
EQI4 $290
ADDRLP4 28
INDIRI4
CNSTI4 42
EQI4 $293
ADDRLP4 28
INDIRI4
CNSTI4 42
GTI4 $296
LABELV $295
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $286
ADDRLP4 28
INDIRI4
CNSTI4 0
LTI4 $283
LABELV $297
ADDRLP4 28
INDIRI4
CNSTI4 33
EQI4 $287
ADDRGP4 $283
JUMPV
LABELV $296
ADDRLP4 28
INDIRI4
CNSTI4 61
EQI4 $294
ADDRLP4 28
INDIRI4
CNSTI4 63
EQI4 $288
ADDRLP4 28
INDIRI4
CNSTI4 61
LTI4 $283
LABELV $298
ADDRLP4 28
INDIRI4
CNSTI4 91
EQI4 $291
ADDRLP4 28
INDIRI4
CNSTI4 93
EQI4 $292
ADDRGP4 $283
JUMPV
LABELV $286
line 376
;375:	case 0:
;376:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $282
JUMPV
LABELV $287
line 378
;377:	case '!':
;378:		numZero = 3;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 379
;379:		*input += 1;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 380
;380:		break;
ADDRGP4 $284
JUMPV
LABELV $288
line 382
;381:	case '?':
;382:		numZero = 4;
ADDRLP4 4
CNSTI4 4
ASGNI4
line 383
;383:		*input += 1;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 384
;384:		break;
ADDRGP4 $284
JUMPV
LABELV $289
line 386
;385:	case '(':
;386:		numZero = 5;
ADDRLP4 4
CNSTI4 5
ASGNI4
line 387
;387:		*input += 1;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 388
;388:		break;
ADDRGP4 $284
JUMPV
LABELV $290
line 390
;389:	case ')':
;390:		numZero = 6;
ADDRLP4 4
CNSTI4 6
ASGNI4
line 391
;391:		*input += 1;
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 392
;392:		break;
ADDRGP4 $284
JUMPV
LABELV $291
line 394
;393:	case '[':
;394:		numZero = 7;
ADDRLP4 4
CNSTI4 7
ASGNI4
line 395
;395:		*input += 1;
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 396
;396:		break;
ADDRGP4 $284
JUMPV
LABELV $292
line 398
;397:	case ']':
;398:		numZero = 8;
ADDRLP4 4
CNSTI4 8
ASGNI4
line 399
;399:		*input += 1;
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 400
;400:		break;
ADDRGP4 $284
JUMPV
LABELV $293
line 402
;401:	case '*':
;402:		numZero = TSS_DecodeNibble((*input)[1]) + 9;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 72
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 72
INDIRI4
CNSTI4 9
ADDI4
ASGNI4
line 403
;403:		*input += 2;
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 404
;404:		break;
ADDRGP4 $284
JUMPV
LABELV $294
line 406
;405:	case '=':
;406:		t1 = TSS_DecodeNibble((*input)[1]);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 80
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 80
INDIRI4
ASGNI4
line 407
;407:		t2 = TSS_DecodeNibble((*input)[2]);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 84
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 84
INDIRI4
ASGNI4
line 408
;408:		*input += 3;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRP4
CNSTI4 3
ADDP4
ASGNP4
line 409
;409:		numZero = (t1 << 6) + t2 + 64 + 9;
ADDRLP4 4
ADDRLP4 16
INDIRI4
CNSTI4 6
LSHI4
ADDRLP4 8
INDIRI4
ADDI4
CNSTI4 64
ADDI4
CNSTI4 9
ADDI4
ASGNI4
line 410
;410:		break;
ADDRGP4 $284
JUMPV
LABELV $283
line 412
;411:	default:
;412:		numZero = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 413
;413:		t1 = TSS_DecodeNibble((*input)[0]);
ADDRFP4 0
INDIRP4
INDIRP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 92
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 92
INDIRI4
ASGNI4
line 414
;414:		t2 = TSS_DecodeNibble((*input)[1]);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 96
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 96
INDIRI4
ASGNI4
line 415
;415:		t3 = TSS_DecodeNibble((*input)[2]);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 2
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 100
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 100
INDIRI4
ASGNI4
line 416
;416:		t4 = TSS_DecodeNibble((*input)[3]);
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 3
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 104
ADDRGP4 TSS_DecodeNibble
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 104
INDIRI4
ASGNI4
line 417
;417:		*input += 4;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
line 418
;418:		break;
LABELV $284
line 421
;419:	}
;420:
;421:	if (numZero > 0) {
ADDRLP4 4
INDIRI4
CNSTI4 0
LEI4 $299
line 424
;422:		int i;
;423:
;424:		len = numZero;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 425
;425:		if (len > size) len = size;
ADDRLP4 0
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $301
ADDRLP4 0
ADDRFP4 8
INDIRI4
ASGNI4
LABELV $301
line 426
;426:		for (i = 0; i < len; i++) {
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRGP4 $306
JUMPV
LABELV $303
line 427
;427:			output[i] = 0;
ADDRLP4 48
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTU1 0
ASGNU1
line 428
;428:		}
LABELV $304
line 426
ADDRLP4 48
ADDRLP4 48
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $306
ADDRLP4 48
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $303
line 429
;429:	}
ADDRGP4 $300
JUMPV
LABELV $299
line 430
;430:	else {
line 431
;431:		len = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 432
;432:		if (size > 0) {
ADDRFP4 8
INDIRI4
CNSTI4 0
LEI4 $307
line 433
;433:			output[0] = t1 + ((t2 & 3) << 6);
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 3
BANDI4
CNSTI4 6
LSHI4
ADDI4
CVIU4 4
CVUU1 4
ASGNU1
line 434
;434:			len++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 435
;435:		}
LABELV $307
line 436
;436:		if (size > 1) {
ADDRFP4 8
INDIRI4
CNSTI4 1
LEI4 $309
line 437
;437:			output[1] = (t2 >> 2) + ((t3 & 15) << 4);
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ADDRLP4 8
INDIRI4
CNSTI4 2
RSHI4
ADDRLP4 12
INDIRI4
CNSTI4 15
BANDI4
CNSTI4 4
LSHI4
ADDI4
CVIU4 4
CVUU1 4
ASGNU1
line 438
;438:			len++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 439
;439:		}
LABELV $309
line 440
;440:		if (size > 2) {
ADDRFP4 8
INDIRI4
CNSTI4 2
LEI4 $311
line 441
;441:			output[2] = (t3 >> 4) + (t4 << 2);
ADDRFP4 4
INDIRP4
CNSTI4 2
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 4
RSHI4
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDI4
CVIU4 4
CVUU1 4
ASGNU1
line 442
;442:			len++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 443
;443:		}
LABELV $311
line 444
;444:	}
LABELV $300
line 445
;445:	return len;
ADDRLP4 0
INDIRI4
RETI4
LABELV $282
endproc TSSFS_DecodeTriplet 112 4
proc TSSFS_CodeBuf 20 12
line 450
;446:}
;447:#endif
;448:
;449:#if TSSINCVAR
;450:static int TSSFS_CodeBuf(const char* input, int inputSize, char* output, int maxOutputSize) {
line 455
;451:	unsigned char* outputPtr;
;452:	unsigned char* outputEnd;
;453:	int codedSize;
;454:
;455:	outputPtr = (unsigned char*) output;
ADDRLP4 0
ADDRFP4 8
INDIRP4
ASGNP4
line 456
;456:	outputEnd = outputPtr + maxOutputSize - 3;
ADDRLP4 8
ADDRFP4 12
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
CNSTI4 -3
ADDP4
ASGNP4
line 457
;457:	codedSize = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $315
JUMPV
LABELV $314
line 458
;458:	while (inputSize > 0 && outputPtr < outputEnd) {
line 461
;459:		int n;
;460:
;461:		n = TSSFS_CodeTriplet((const unsigned char*)input, inputSize, &outputPtr);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 16
ADDRGP4 TSSFS_CodeTriplet
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ASGNI4
line 462
;462:		input += n;
ADDRFP4 0
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ASGNP4
line 463
;463:		inputSize -= n;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
line 464
;464:		codedSize += n;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
ASGNI4
line 465
;465:	}
LABELV $315
line 458
ADDRFP4 4
INDIRI4
CNSTI4 0
LEI4 $317
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
LTU4 $314
LABELV $317
line 466
;466:	*outputPtr = 0;
ADDRLP4 0
INDIRP4
CNSTU1 0
ASGNU1
line 467
;467:	return codedSize;
ADDRLP4 4
INDIRI4
RETI4
LABELV $313
endproc TSSFS_CodeBuf 20 12
proc TSSFS_DecodeBuf 28 12
line 472
;468:}
;469:#endif
;470:
;471:#if TSSINCVAR
;472:static int TSSFS_DecodeBuf(const char* input, char* output, int size) {
line 478
;473:	int inputLen;
;474:	int outputLen;
;475:	const unsigned char* inputPtr;
;476:	const unsigned char* inputEnd;
;477:
;478:	inputLen = strlen(input);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ASGNI4
line 479
;479:	if (inputLen <= 0) return -1;
ADDRLP4 12
INDIRI4
CNSTI4 0
GTI4 $319
CNSTI4 -1
RETI4
ADDRGP4 $318
JUMPV
LABELV $319
line 480
;480:	inputPtr = (const unsigned char*) input;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 481
;481:	inputEnd = inputPtr + inputLen;
ADDRLP4 8
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
ASGNP4
line 482
;482:	outputLen = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $322
JUMPV
LABELV $321
line 483
;483:	while (inputPtr < inputEnd && size > 0) {
line 486
;484:		int len;
;485:
;486:		len = TSSFS_DecodeTriplet(&inputPtr, (unsigned char*)output, size);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 TSSFS_DecodeTriplet
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
line 487
;487:		if (len < 0) break;
ADDRLP4 20
INDIRI4
CNSTI4 0
GEI4 $324
ADDRGP4 $323
JUMPV
LABELV $324
line 489
;488:
;489:		output += len;
ADDRFP4 4
ADDRLP4 20
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ASGNP4
line 490
;490:		size -= len;
ADDRFP4 8
ADDRFP4 8
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 492
;491:
;492:		outputLen += len;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
line 493
;493:	}
LABELV $322
line 483
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
GEU4 $326
ADDRFP4 8
INDIRI4
CNSTI4 0
GTI4 $321
LABELV $326
LABELV $323
line 494
;494:	return outputLen;
ADDRLP4 4
INDIRI4
RETI4
LABELV $318
endproc TSSFS_DecodeBuf 28 12
proc TSSFS_DumpBufferToFile 2072 24
line 499
;495:}
;496:#endif
;497:
;498:#if TSSINCVAR
;499:static qboolean TSSFS_DumpBufferToFile(const char* filename, const char* base, const void* buffer, int size) {
line 506
;500:	fileHandle_t file;
;501:	int count;
;502:	const char* inputPtr;
;503:	char dataBuf[MAX_INFO_STRING];
;504:	char outputBuf[MAX_INFO_STRING];
;505:
;506:	trap_FS_FOpenFile(filename, &file, FS_WRITE);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 2056
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_FS_FOpenFile
CALLI4
pop
line 507
;507:	if (!file) {
ADDRLP4 2056
INDIRI4
CNSTI4 0
NEI4 $328
line 508
;508:		CG_Printf(S_COLOR_RED "could not write to %s\n", filename);
ADDRGP4 $330
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 509
;509:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $327
JUMPV
LABELV $328
line 512
;510:	}
;511:
;512:	count = 0;
ADDRLP4 1024
CNSTI4 0
ASGNI4
line 513
;513:	inputPtr = (const char*) buffer;
ADDRLP4 1028
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 $332
JUMPV
LABELV $331
line 514
;514:	while (size > 0) {
line 517
;515:		int len;
;516:
;517:		len = TSSFS_CodeBuf(inputPtr, size, dataBuf, 1000);
ADDRLP4 1028
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 1032
ARGP4
CNSTI4 1000
ARGI4
ADDRLP4 2064
ADDRGP4 TSSFS_CodeBuf
CALLI4
ASGNI4
ADDRLP4 2060
ADDRLP4 2064
INDIRI4
ASGNI4
line 518
;518:		Com_sprintf(outputBuf, sizeof(outputBuf), "%s%d %s\n", base, count, dataBuf);
ADDRLP4 0
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $334
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 1024
INDIRI4
ARGI4
ADDRLP4 1032
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 519
;519:		trap_FS_Write(outputBuf, strlen(outputBuf), file);
ADDRLP4 0
ARGP4
ADDRLP4 2068
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 0
ARGP4
ADDRLP4 2068
INDIRI4
ARGI4
ADDRLP4 2056
INDIRI4
ARGI4
ADDRGP4 trap_FS_Write
CALLV
pop
line 521
;520:
;521:		inputPtr += len;
ADDRLP4 1028
ADDRLP4 2060
INDIRI4
ADDRLP4 1028
INDIRP4
ADDP4
ASGNP4
line 522
;522:		size -= len;
ADDRFP4 12
ADDRFP4 12
INDIRI4
ADDRLP4 2060
INDIRI4
SUBI4
ASGNI4
line 523
;523:		count++;
ADDRLP4 1024
ADDRLP4 1024
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 524
;524:	}
LABELV $332
line 514
ADDRFP4 12
INDIRI4
CNSTI4 0
GTI4 $331
line 525
;525:	trap_FS_FCloseFile(file);
ADDRLP4 2056
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 526
;526:	return qtrue;
CNSTI4 1
RETI4
LABELV $327
endproc TSSFS_DumpBufferToFile 2072 24
proc TSSFS_DumpBufferToCvars 1072 20
line 531
;527:}
;528:#endif
;529:
;530:#if TSSINCVAR
;531:static void TSSFS_DumpBufferToCvars(const char* base, const void* buffer, int size) {
line 537
;532:	int count;
;533:	const char* inputPtr;
;534:	char dataBuf[MAX_INFO_STRING];
;535:	char cvarname[32];
;536:
;537:	count = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 538
;538:	inputPtr = (const char*) buffer;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $337
JUMPV
LABELV $336
line 539
;539:	while (size > 0) {
line 542
;540:		int len;
;541:
;542:		len = TSSFS_CodeBuf(inputPtr, size, dataBuf, 1000);
ADDRLP4 36
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
CNSTI4 1000
ARGI4
ADDRLP4 1068
ADDRGP4 TSSFS_CodeBuf
CALLI4
ASGNI4
ADDRLP4 1064
ADDRLP4 1068
INDIRI4
ASGNI4
line 543
;543:		Com_sprintf(cvarname, sizeof(cvarname), "%s%d", base, count);
ADDRLP4 0
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $339
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 544
;544:		trap_Cvar_Register(NULL, cvarname, "", CVAR_ROM);
CNSTP4 0
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 $340
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_Register
CALLV
pop
line 545
;545:		trap_Cvar_Set(cvarname, dataBuf);
ADDRLP4 0
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 547
;546:
;547:		inputPtr += len;
ADDRLP4 36
ADDRLP4 1064
INDIRI4
ADDRLP4 36
INDIRP4
ADDP4
ASGNP4
line 548
;548:		size -= len;
ADDRFP4 8
ADDRFP4 8
INDIRI4
ADDRLP4 1064
INDIRI4
SUBI4
ASGNI4
line 549
;549:		count++;
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 550
;550:	}
LABELV $337
line 539
ADDRFP4 8
INDIRI4
CNSTI4 0
GTI4 $336
line 551
;551:	Com_sprintf(cvarname, sizeof(cvarname), "%s%d", base, count);
ADDRLP4 0
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $339
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 552
;552:	trap_Cvar_Register(NULL, cvarname, "", CVAR_ROM);
CNSTP4 0
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 $340
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_Cvar_Register
CALLV
pop
line 553
;553:	trap_Cvar_Set(cvarname, "");
ADDRLP4 0
ARGP4
ADDRGP4 $340
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 554
;554:}
LABELV $335
endproc TSSFS_DumpBufferToCvars 1072 20
proc TSSFS_CollectCVarData 1048 12
line 558
;555:#endif
;556:
;557:#if TSSINCVAR
;558:static int TSSFS_CollectCVarData(const char* base, void* buffer, int size) {
line 564
;559:	int count;
;560:	int totalLen;
;561:	char* outputPtr;
;562:	char data[MAX_INFO_STRING];
;563:
;564:	count = 0;
ADDRLP4 1024
CNSTI4 0
ASGNI4
line 565
;565:	totalLen = 0;
ADDRLP4 1032
CNSTI4 0
ASGNI4
line 566
;566:	outputPtr = (char*) buffer;
ADDRLP4 1028
ADDRFP4 4
INDIRP4
ASGNP4
ADDRGP4 $343
JUMPV
LABELV $342
line 567
;567:	while (size > 0) {
line 570
;568:		int len;
;569:
;570:		memset(data, 0, sizeof(data));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 571
;571:		trap_Cvar_VariableStringBuffer(va("%s%d", base, count), data, sizeof(data) - 4);
ADDRGP4 $339
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 1024
INDIRI4
ARGI4
ADDRLP4 1040
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 1040
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 1020
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 572
;572:		len = TSSFS_DecodeBuf(data, outputPtr, size);
ADDRLP4 0
ARGP4
ADDRLP4 1028
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 1044
ADDRGP4 TSSFS_DecodeBuf
CALLI4
ASGNI4
ADDRLP4 1036
ADDRLP4 1044
INDIRI4
ASGNI4
line 573
;573:		if (len < 0) break;
ADDRLP4 1036
INDIRI4
CNSTI4 0
GEI4 $345
ADDRGP4 $344
JUMPV
LABELV $345
line 574
;574:		outputPtr += len;
ADDRLP4 1028
ADDRLP4 1036
INDIRI4
ADDRLP4 1028
INDIRP4
ADDP4
ASGNP4
line 575
;575:		totalLen += len;
ADDRLP4 1032
ADDRLP4 1032
INDIRI4
ADDRLP4 1036
INDIRI4
ADDI4
ASGNI4
line 576
;576:		size -= len;
ADDRFP4 8
ADDRFP4 8
INDIRI4
ADDRLP4 1036
INDIRI4
SUBI4
ASGNI4
line 577
;577:		count++;
ADDRLP4 1024
ADDRLP4 1024
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 578
;578:	}
LABELV $343
line 567
ADDRFP4 8
INDIRI4
CNSTI4 0
GTI4 $342
LABELV $344
line 579
;579:	return totalLen;
ADDRLP4 1032
INDIRI4
RETI4
LABELV $341
endproc TSSFS_CollectCVarData 1048 12
export TSSFS_SaveStrategy
proc TSSFS_SaveStrategy 7836 16
line 584
;580:}
;581:#endif
;582:
;583:#if TSSINCVAR
;584:qboolean TSSFS_SaveStrategy(const char* filename, const char* cvarbase, const tss_strategy_t* strategy) {
line 587
;585:	tss_packedStrategy_t packedStrategy;
;586:
;587:	TSSFS_PackStrategy(strategy, &packedStrategy);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 TSSFS_PackStrategy
CALLV
pop
line 588
;588:	TSSFS_DumpBufferToCvars(cvarbase, &packedStrategy, sizeof(packedStrategy));
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 7828
ARGI4
ADDRGP4 TSSFS_DumpBufferToCvars
CALLV
pop
line 589
;589:	if (!TSSFS_DumpBufferToFile(va("tss/%s", filename), "tssdata ", &packedStrategy, sizeof(packedStrategy))) return qfalse;
ADDRGP4 $350
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 7828
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 7828
INDIRP4
ARGP4
ADDRGP4 $351
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 7828
ARGI4
ADDRLP4 7832
ADDRGP4 TSSFS_DumpBufferToFile
CALLI4
ASGNI4
ADDRLP4 7832
INDIRI4
CNSTI4 0
NEI4 $348
CNSTI4 0
RETI4
ADDRGP4 $347
JUMPV
LABELV $348
line 590
;590:	return qtrue;
CNSTI4 1
RETI4
LABELV $347
endproc TSSFS_SaveStrategy 7836 16
export TSSFS_LoadStrategy
proc TSSFS_LoadStrategy 7836 12
line 595
;591:}
;592:#endif
;593:
;594:#if TSSINCVAR
;595:qboolean TSSFS_LoadStrategy(const char* cvarBase, tss_strategy_t* strategy) {
line 599
;596:	tss_packedStrategy_t packedStrategy;
;597:	int size;
;598:
;599:	size = TSSFS_CollectCVarData(cvarBase, &packedStrategy, sizeof(packedStrategy));
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 7828
ARGI4
ADDRLP4 7832
ADDRGP4 TSSFS_CollectCVarData
CALLI4
ASGNI4
ADDRLP4 7828
ADDRLP4 7832
INDIRI4
ASGNI4
line 600
;600:	if (size < sizeof(packedStrategy)) return qfalse;
ADDRLP4 7828
INDIRI4
CVIU4 4
CNSTU4 7828
GEU4 $353
CNSTI4 0
RETI4
ADDRGP4 $352
JUMPV
LABELV $353
line 601
;601:	TSSFS_UnpackStrategy(&packedStrategy, strategy);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 TSSFS_UnpackStrategy
CALLV
pop
line 602
;602:	return qtrue;
CNSTI4 1
RETI4
LABELV $352
endproc TSSFS_LoadStrategy 7836 12
proc TSSFS_GetPackedStrategyHeader 8 12
line 607
;603:}
;604:#endif
;605:
;606:#if TSSINCVAR
;607:static qboolean TSSFS_GetPackedStrategyHeader(const char* cvarBase, tss_packedStrategyHeader_t* header) {
line 610
;608:	int size;
;609:
;610:	size = TSSFS_CollectCVarData(cvarBase, header, sizeof(*header));
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 4
ADDRGP4 TSSFS_CollectCVarData
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 611
;611:	if (size < sizeof(*header)) return qfalse;
ADDRLP4 0
INDIRI4
CVIU4 4
CNSTU4 56
GEU4 $356
CNSTI4 0
RETI4
ADDRGP4 $355
JUMPV
LABELV $356
line 612
;612:	header->name[TSS_NAME_SIZE-1] = 0;
ADDRFP4 4
INDIRP4
CNSTI4 55
ADDP4
CNSTI1 0
ASGNI1
line 613
;613:	return qtrue;
CNSTI4 1
RETI4
LABELV $355
endproc TSSFS_GetPackedStrategyHeader 8 12
export CG_TSS_InitStrategy
proc CG_TSS_InitStrategy 12 12
line 985
;614:}
;615:#endif
;616:
;617:#if !TSSINCVAR
;618:static void CG_TSS_GetString(char* str, int size) {
;619:	memcpy(str, strategyFileBufPos, size);
;620:	str[size-1] = 0;
;621:	strategyFileBufPos += size;
;622:}
;623:#endif
;624:
;625:#if !TSSINCVAR
;626:static void CG_TSS_PutString(const char* str, int size) {
;627:	memcpy(strategyFileBufPos, str, size);
;628:	strategyFileBufPos += size;
;629:}
;630:#endif
;631:
;632:#if !TSSINCVAR
;633:static int CG_TSS_GetInt(int minimum, int maximum) {
;634:	long n;
;635:
;636:	n =
;637:		(strategyFileBufPos[0] << 24) +
;638:		(strategyFileBufPos[1] << 16) +
;639:		(strategyFileBufPos[2] <<  8) +
;640:		(strategyFileBufPos[3]      );
;641:	strategyFileBufPos += 4;
;642:	if (minimum != 0 || maximum != 0) {
;643:		if (n < minimum) n = minimum;
;644:		if (n > maximum) n = maximum;
;645:	}
;646:	return n;
;647:}
;648:#endif
;649:
;650:#if !TSSINCVAR
;651:static void CG_TSS_PutInt(int n) {
;652:	strategyFileBufPos[0] = (n >> 24) & 255;
;653:	strategyFileBufPos[1] = (n >> 16) & 255;
;654:	strategyFileBufPos[2] = (n >>  8) & 255;
;655:	strategyFileBufPos[3] = (n      ) & 255;
;656:	strategyFileBufPos += 4;
;657:}
;658:#endif
;659:
;660:#if !TSSINCVAR
;661:static void CG_TSS_GetPredicate(tss_tacticalPredicate_t* predicate) {
;662:	predicate->magnitude = CG_TSS_GetInt(0, TSSTM_num_magnitudes-1);
;663:	predicate->op = CG_TSS_GetInt(0, TSSPROP_num_operators);
;664:	predicate->limit = CG_TSS_GetInt(-100, 100);
;665:}
;666:#endif
;667:
;668:#if !TSSINCVAR
;669:static void CG_TSS_PutPredicate(const tss_tacticalPredicate_t* predicate) {
;670:	CG_TSS_PutInt(predicate->magnitude);
;671:	CG_TSS_PutInt(predicate->op);
;672:	CG_TSS_PutInt(predicate->limit);
;673:}
;674:#endif
;675:
;676:#if !TSSINCVAR
;677:static void CG_TSS_GetClause(tss_clause_t* clause) {
;678:	int i;
;679:
;680:	clause->inUse = CG_TSS_GetInt(0, 1);
;681:	for (i = 0; i < TSS_PREDICATES_PER_CLAUSE; i++) {
;682:		CG_TSS_GetPredicate(&clause->predicate[i]);
;683:	}
;684:}
;685:#endif
;686:
;687:#if !TSSINCVAR
;688:static void CG_TSS_PutClause(const tss_clause_t* clause) {
;689:	int i;
;690:
;691:	CG_TSS_PutInt(clause->inUse);
;692:	for (i = 0; i < TSS_PREDICATES_PER_CLAUSE; i++) {
;693:		CG_TSS_PutPredicate(&clause->predicate[i]);
;694:	}
;695:}
;696:#endif
;697:
;698:#if !TSSINCVAR
;699:static void CG_TSS_GetOccasion(tss_occasion_t* occasion) {
;700:	int i;
;701:
;702:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
;703:		CG_TSS_GetClause(&occasion->clause[i]);
;704:	}
;705:}
;706:#endif
;707:
;708:#if !TSSINCVAR
;709:static void CG_TSS_PutOccasion(const tss_occasion_t* occasion) {
;710:	int i;
;711:
;712:	for (i = 0; i < TSS_CLAUSES_PER_OCCASION; i++) {
;713:		CG_TSS_PutClause(&occasion->clause[i]);
;714:	}
;715:}
;716:#endif
;717:
;718:#if !TSSINCVAR
;719:static void CG_TSS_GetGroupMembers(tss_group_members_t* group) {
;720:	group->minTotalMembers = CG_TSS_GetInt(0, 100);
;721:	group->minAliveMembers = CG_TSS_GetInt(0, 100);
;722:	group->minReadyMembers = CG_TSS_GetInt(0, 100);
;723:}
;724:#endif
;725:
;726:#if !TSSINCVAR
;727:static void CG_TSS_PutGroupMembers(const tss_group_members_t* group) {
;728:	CG_TSS_PutInt(group->minTotalMembers);
;729:	CG_TSS_PutInt(group->minAliveMembers);
;730:	CG_TSS_PutInt(group->minReadyMembers);
;731:}
;732:#endif
;733:
;734:#if !TSSINCVAR
;735:static void CG_TSS_GetDivision(tss_division_t* division) {
;736:	int i;
;737:
;738:	division->unassignedPlayers = CG_TSS_GetInt(0, 100);
;739:	for (i = 0; i < MAX_GROUPS; i++) {
;740:		CG_TSS_GetGroupMembers(&division->group[i]);
;741:	}
;742:}
;743:#endif
;744:
;745:#if !TSSINCVAR
;746:static void CG_TSS_PutDivision(const tss_division_t* division) {
;747:	int i;
;748:
;749:	CG_TSS_PutInt(division->unassignedPlayers);
;750:	for (i = 0; i < MAX_GROUPS; i++) {
;751:		CG_TSS_PutGroupMembers(&division->group[i]);
;752:	}
;753:}
;754:#endif
;755:
;756:#if !TSSINCVAR
;757:static void CG_TSS_GetOrder(tss_order_t* order) {
;758:	order->mission = CG_TSS_GetInt(0, TSSMISSION_num_missions);
;759:	order->maxDanger = CG_TSS_GetInt(-100, 100);
;760:	order->minReady = CG_TSS_GetInt(0, 100);
;761:	order->minGroupSize = CG_TSS_GetInt(0, 100);
;762:	order->maxGuards = CG_TSS_GetInt(0, 100);
;763:}
;764:#endif
;765:
;766:#if !TSSINCVAR
;767:static void CG_TSS_PutOrder(const tss_order_t* order) {
;768:	CG_TSS_PutInt(order->mission);
;769:	CG_TSS_PutInt(order->maxDanger);
;770:	CG_TSS_PutInt(order->minReady);
;771:	CG_TSS_PutInt(order->minGroupSize);
;772:	CG_TSS_PutInt(order->maxGuards);
;773:}
;774:#endif
;775:
;776:#if !TSSINCVAR
;777:static void CG_TSS_GetOrders(tss_orders_t* orders) {
;778:	int i;
;779:
;780:	for (i = 0; i < MAX_GROUPS; i++) {
;781:		CG_TSS_GetOrder(&orders->order[i]);
;782:	}
;783:}
;784:#endif
;785:
;786:#if !TSSINCVAR
;787:static void CG_TSS_PutOrders(const tss_orders_t* orders) {
;788:	int i;
;789:
;790:	for (i = 0; i < MAX_GROUPS; i++) {
;791:		CG_TSS_PutOrder(&orders->order[i]);
;792:	}
;793:}
;794:#endif
;795:
;796:#if !TSSINCVAR
;797:static void CG_TSS_GetInstructions(tss_instructions_t* instructions) {
;798:	CG_TSS_GetString(instructions->groupOrganization, sizeof(instructions->groupOrganization));
;799:	CG_TSS_GetDivision(&instructions->division);
;800:	CG_TSS_GetOrders(&instructions->orders);
;801:}
;802:#endif
;803:
;804:#if !TSSINCVAR
;805:static void CG_TSS_PutInstructions(const tss_instructions_t* instructions) {
;806:	CG_TSS_PutString(instructions->groupOrganization, sizeof(instructions->groupOrganization));
;807:	CG_TSS_PutDivision(&instructions->division);
;808:	CG_TSS_PutOrders(&instructions->orders);
;809:}
;810:#endif
;811:
;812:#if !TSSINCVAR
;813:static void CG_TSS_GetDirective(tss_directive_t* directive) {
;814:	directive->inUse = CG_TSS_GetInt(0, 1);
;815:	CG_TSS_GetString(directive->name, sizeof(directive->name));
;816:	CG_TSS_CorrectName(directive->name, sizeof(directive->name));
;817:	CG_TSS_GetOccasion(&directive->occasion);
;818:	CG_TSS_GetInstructions(&directive->instr);
;819:}
;820:#endif
;821:
;822:#if !TSSINCVAR
;823:static void CG_TSS_PutDirective(const tss_directive_t* directive) {
;824:	CG_TSS_PutInt(directive->inUse);
;825:	CG_TSS_PutString(directive->name, sizeof(directive->name));
;826:	CG_TSS_PutOccasion(&directive->occasion);
;827:	CG_TSS_PutInstructions(&directive->instr);
;828:}
;829:#endif
;830:
;831:#if !TSSINCVAR
;832:qboolean CG_TSS_LoadStrategy(const char* filename, tss_strategy_t* strategy) {
;833:	int len;
;834:	fileHandle_t f;
;835:	int version;
;836:	int i;
;837:	qboolean ok;
;838:
;839:	ok = qfalse;
;840:
;841:	len = trap_FS_FOpenFile(filename, &f, FS_READ);
;842:	if (!f) {
;843:		CG_Printf(S_COLOR_RED "strategy file not found: %s\n", filename);
;844:		goto Exit;
;845:	}
;846:	if (len < 8) {
;847:		CG_Printf(S_COLOR_RED "invalid strategy file: %s\n", filename);
;848:		goto Exit;
;849:	}
;850:	
;851:	strategyFileBufPos = (unsigned char*) &strategyFileBuf;
;852:	trap_FS_Read(strategyFileBufPos, 8, f);
;853:	if (Q_strncmp(strategyFileBuf.id, "HUNT", 4)) {
;854:		CG_Printf(S_COLOR_RED "invalid Hunt strategy file: %s\n", filename);
;855:		goto Exit;
;856:	}
;857:	strategyFileBufPos += 4;
;858:	version = CG_TSS_GetInt(0, 0);
;859:	if (version != TSS_STRATEGY_VERSION) {
;860:		CG_Printf(S_COLOR_RED "wrong version, expected %d, found %d in %s\n", TSS_STRATEGY_VERSION, version, filename);
;861:		goto Exit;
;862:	}
;863:	if (len != sizeof(tss_strategy_t)) {
;864:		CG_Printf(S_COLOR_RED "invalid strategy file size: %s\n", filename);
;865:		goto Exit;
;866:	}
;867:
;868:	trap_FS_Read(strategyFileBufPos, sizeof(tss_strategy_t) - 8, f);
;869:
;870:	
;871:
;872:	strategyFileBufPos = (unsigned char*) &strategyFileBuf;
;873:
;874:	memcpy(strategy->id, strategyFileBufPos, sizeof(strategy->id));
;875:	strategyFileBufPos += sizeof(strategy->id);
;876:	strategy->version = CG_TSS_GetInt(0, 0);
;877:	strategy->gametype = CG_TSS_GetInt(0, 0);
;878:	CG_TSS_GetString(strategy->generic, sizeof(strategy->generic));
;879:	CG_TSS_GetString(strategy->name, sizeof(strategy->name));
;880:	CG_TSS_GetString(strategy->comment, sizeof(strategy->comment));
;881:	strategy->autoCondition = CG_TSS_GetInt(0, 1);
;882:	strategy->rfa_dangerLimit = CG_TSS_GetInt(-100, 100);
;883:	strategy->rfd_dangerLimit = CG_TSS_GetInt(-100, 100);
;884:	strategy->short_term = CG_TSS_GetInt(0, 100);
;885:	strategy->medium_term = CG_TSS_GetInt(0, 100);
;886:	strategy->long_term = CG_TSS_GetInt(0, 100);
;887:
;888:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY+1; i++) {
;889:		CG_TSS_GetDirective(&strategy->directives[i]);
;890:	}
;891:
;892:
;893:
;894:	if (strategy->gametype != cg.tssGametype) {
;895:		CG_Printf(S_COLOR_RED "wrong gametype in strategy file: %s\n", filename);
;896:		CG_Printf(S_COLOR_RED "found '%d', expected '%d'\n", strategy->gametype, cg.tssGametype);
;897:		goto Exit;
;898:	}
;899:
;900:	// now correct some things that might be corrupted
;901:	strategy->directives[0].inUse = qtrue;
;902:	memset(&strategy->directives[0].name, 0, TSS_NAME_SIZE);
;903:	strcpy(strategy->directives[0].name, "default");
;904:	memset(&strategy->directives[0].occasion, 0, sizeof(tss_occasion_t));
;905:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY+1; i++) {
;906:		int g, n;
;907:		char groupUsed[16];
;908:
;909:		n = 0;
;910:		for (g = 0; g < MAX_GROUPS; g++) {
;911:			n += strategy->directives[i].instr.division.group[g].minTotalMembers;
;912:		}
;913:		if (n < 0 || n > 100) {
;914:			for (g = 0; g < MAX_GROUPS; g++) {
;915:				strategy->directives[i].instr.division.group[g].minTotalMembers = 0;
;916:			}
;917:		}
;918:		else {
;919:			strategy->directives[i].instr.division.unassignedPlayers = 100 - n;
;920:		}
;921:
;922:		memset(groupUsed, 0, sizeof(groupUsed));
;923:		for (g = 0; g < MAX_GROUPS; g++) {
;924:			n = strategy->directives[i].instr.groupOrganization[g];
;925:			if (n < 0) break;
;926:			if (n >= MAX_GROUPS) break;
;927:			if (groupUsed[n]) break;
;928:
;929:			groupUsed[n] = qtrue;
;930:		}
;931:		if (g < MAX_GROUPS) {
;932:			for (g = 0; g < MAX_GROUPS; g++) {
;933:				strategy->directives[i].instr.groupOrganization[g] = g;
;934:			}
;935:		}
;936:	}
;937:
;938:	ok = qtrue;
;939:
;940:	Exit:
;941:	if (f) trap_FS_FCloseFile(f);
;942:	return ok;
;943:}
;944:#endif
;945:
;946:#if !TSSINCVAR
;947:qboolean CG_TSS_SaveStrategy(const char* filename, const tss_strategy_t* strategy) {
;948:	fileHandle_t f;
;949:	int i;
;950:
;951:	strategyFileBufPos = (unsigned char*) &strategyFileBuf;
;952:
;953:	memcpy(strategyFileBufPos, "HUNT", 4);
;954:	strategyFileBufPos += 4;
;955:	CG_TSS_PutInt(strategy->version);
;956:	CG_TSS_PutInt(strategy->gametype);
;957:	CG_TSS_PutString(strategy->generic, sizeof(strategy->generic));
;958:	CG_TSS_PutString(strategy->name, sizeof(strategy->name));
;959:	CG_TSS_PutString(strategy->comment, sizeof(strategy->comment));
;960:	CG_TSS_PutInt(strategy->autoCondition);
;961:	CG_TSS_PutInt(strategy->rfa_dangerLimit);
;962:	CG_TSS_PutInt(strategy->rfd_dangerLimit);
;963:	CG_TSS_PutInt(strategy->short_term);
;964:	CG_TSS_PutInt(strategy->medium_term);
;965:	CG_TSS_PutInt(strategy->long_term);
;966:
;967:	for (i = 0; i < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY+1; i++) {
;968:		CG_TSS_PutDirective(&strategy->directives[i]);
;969:	}
;970:
;971:
;972:
;973:	trap_FS_FOpenFile(filename, &f, FS_WRITE);
;974:	if (!f) {
;975:		CG_Printf(S_COLOR_RED "could not write to %s\n", filename);
;976:		return qfalse;
;977:	}
;978:	trap_FS_Write(&strategyFileBuf, sizeof(strategyFileBuf), f);
;979:	trap_FS_FCloseFile(f);
;980:
;981:	return qtrue;
;982:}
;983:#endif
;984:
;985:void CG_TSS_InitStrategy(tss_strategy_t* strategy) {
line 988
;986:	int d;
;987:
;988:	memset(strategy, 0, sizeof(tss_strategy_t));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 30388
ARGI4
ADDRGP4 memset
CALLP4
pop
line 990
;989:
;990:	memcpy(strategy->id, "HUNT", 4);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $359
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 991
;991:	strategy->version = TSS_STRATEGY_VERSION;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 1
ASGNI4
line 992
;992:	strategy->gametype = cg.tssGametype;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+128096
INDIRI4
ASGNI4
line 993
;993:	strcpy(strategy->generic, "Amiga 4ever!");
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 $361
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 995
;994:
;995:	strategy->rfa_dangerLimit = 0;
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
CNSTI4 0
ASGNI4
line 996
;996:	strategy->rfd_dangerLimit = 25;
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 25
ASGNI4
line 998
;997:
;998:	strategy->short_term = 10;
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTI4 10
ASGNI4
line 999
;999:	strategy->medium_term = 25;
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTI4 25
ASGNI4
line 1000
;1000:	strategy->long_term = 75;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 75
ASGNI4
line 1002
;1001:
;1002:	for (d = 0; d < TSS_NON_DEFAULT_DIRECTIVES_PER_STRATEGY+1; d++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $362
line 1005
;1003:		int gr;
;1004:
;1005:		strategy->directives[d].instr.division.unassignedPlayers = 100;
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 796
ADDP4
CNSTI4 100
ASGNI4
line 1007
;1006:
;1007:		for (gr = 0; gr < MAX_GROUPS; gr++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $366
line 1008
;1008:			strategy->directives[d].instr.groupOrganization[gr] = gr;
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 780
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1009
;1009:			strategy->directives[d].instr.division.group[gr].minReadyMembers = 100;
ADDRLP4 4
INDIRI4
CNSTI4 12
MULI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 800
ADDP4
ADDP4
CNSTI4 8
ADDP4
CNSTI4 100
ASGNI4
line 1010
;1010:			strategy->directives[d].instr.orders.order[gr].maxDanger = 25;
ADDRLP4 4
INDIRI4
CNSTI4 20
MULI4
ADDRLP4 0
INDIRI4
CNSTI4 1120
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ADDP4
CNSTI4 920
ADDP4
ADDP4
CNSTI4 4
ADDP4
CNSTI4 25
ASGNI4
line 1011
;1011:		}
LABELV $367
line 1007
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 10
LTI4 $366
line 1012
;1012:	}
LABELV $363
line 1002
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 27
LTI4 $362
line 1013
;1013:	strategy->directives[0].inUse = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 1014
;1014:	strcpy(strategy->directives[0].name, "default");
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 $199
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1015
;1015:}
LABELV $358
endproc CG_TSS_InitStrategy 12 12
lit
align 1
LABELV stdChar
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 32
byte 1 33
byte 1 33
byte 1 61
byte 1 83
byte 1 47
byte 1 47
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 46
byte 1 61
byte 1 46
byte 1 47
byte 1 47
byte 1 48
byte 1 49
byte 1 50
byte 1 51
byte 1 52
byte 1 53
byte 1 54
byte 1 55
byte 1 56
byte 1 57
byte 1 47
byte 1 47
byte 1 33
byte 1 61
byte 1 33
byte 1 33
byte 1 65
byte 1 65
byte 1 66
byte 1 67
byte 1 68
byte 1 69
byte 1 70
byte 1 71
byte 1 72
byte 1 73
byte 1 74
byte 1 75
byte 1 76
byte 1 77
byte 1 78
byte 1 79
byte 1 80
byte 1 81
byte 1 82
byte 1 83
byte 1 84
byte 1 85
byte 1 86
byte 1 87
byte 1 88
byte 1 89
byte 1 90
byte 1 33
byte 1 47
byte 1 33
byte 1 33
byte 1 32
byte 1 33
byte 1 65
byte 1 66
byte 1 67
byte 1 68
byte 1 69
byte 1 70
byte 1 71
byte 1 72
byte 1 73
byte 1 74
byte 1 75
byte 1 76
byte 1 77
byte 1 78
byte 1 79
byte 1 80
byte 1 81
byte 1 82
byte 1 83
byte 1 84
byte 1 85
byte 1 86
byte 1 87
byte 1 88
byte 1 89
byte 1 90
byte 1 33
byte 1 47
byte 1 33
byte 1 33
byte 1 32
byte 1 69
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 47
byte 1 83
byte 1 33
byte 1 79
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 33
byte 1 46
byte 1 61
byte 1 61
byte 1 61
byte 1 84
byte 1 83
byte 1 33
byte 1 79
byte 1 32
byte 1 32
byte 1 89
byte 1 32
byte 1 33
byte 1 67
byte 1 76
byte 1 33
byte 1 89
byte 1 47
byte 1 33
byte 1 33
byte 1 67
byte 1 65
byte 1 33
byte 1 61
byte 1 33
byte 1 82
byte 1 33
byte 1 48
byte 1 33
byte 1 50
byte 1 51
byte 1 33
byte 1 77
byte 1 80
byte 1 46
byte 1 33
byte 1 49
byte 1 48
byte 1 33
byte 1 49
byte 1 50
byte 1 51
byte 1 33
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 67
byte 1 69
byte 1 69
byte 1 69
byte 1 69
byte 1 73
byte 1 73
byte 1 73
byte 1 73
byte 1 68
byte 1 78
byte 1 79
byte 1 79
byte 1 79
byte 1 79
byte 1 79
byte 1 88
byte 1 79
byte 1 85
byte 1 85
byte 1 85
byte 1 85
byte 1 89
byte 1 80
byte 1 83
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 65
byte 1 67
byte 1 69
byte 1 69
byte 1 69
byte 1 69
byte 1 73
byte 1 73
byte 1 73
byte 1 73
byte 1 68
byte 1 78
byte 1 79
byte 1 79
byte 1 79
byte 1 79
byte 1 79
byte 1 61
byte 1 79
byte 1 85
byte 1 85
byte 1 85
byte 1 85
byte 1 89
byte 1 80
byte 1 89
code
proc TSS_StdChar 0 0
line 1028
;1016:
;1017:static unsigned char stdChar[256] =
;1018:	"                                "
;1019:	" !!=S//!!!!.=.//0123456789//!=!!"
;1020:	"AABCDEFGHIJKLMNOPQRSTUVWXYZ!/!! "
;1021:	"!ABCDEFGHIJKLMNOPQRSTUVWXYZ!/!! "
;1022:	"E!!!!!!!!/S!O!!!!!!!!.===TS!O  Y"
;1023:	" !CL!Y/!!CA!=!R!0!23!MP.!10!123!"
;1024:	"AAAAAAACEEEEIIIIDNOOOOOXOUUUUYPS"
;1025:	"AAAAAAACEEEEIIIIDNOOOOO=OUUUUYPY"
;1026:;
;1027:
;1028:static int TSS_StdChar(int c) {
line 1029
;1029:	return stdChar[c & 255];
ADDRFP4 0
INDIRI4
CNSTI4 255
BANDI4
ADDRGP4 stdChar
ADDP4
INDIRU1
CVUI4 1
RETI4
LABELV $370
endproc TSS_StdChar 0 0
proc TSS_CompareChars 8 4
line 1032
;1030:}
;1031:
;1032:static int TSS_CompareChars(int c1, int c2) {
line 1033
;1033:	if (c1 == c2) return 0;
ADDRFP4 0
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $372
CNSTI4 0
RETI4
ADDRGP4 $371
JUMPV
LABELV $372
line 1035
;1034:
;1035:	c1 = TSS_StdChar(c1);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 TSS_StdChar
CALLI4
ASGNI4
ADDRFP4 0
ADDRLP4 0
INDIRI4
ASGNI4
line 1036
;1036:	c2 = TSS_StdChar(c2);
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 TSS_StdChar
CALLI4
ASGNI4
ADDRFP4 4
ADDRLP4 4
INDIRI4
ASGNI4
line 1037
;1037:	return c1 - c2;
ADDRFP4 0
INDIRI4
ADDRFP4 4
INDIRI4
SUBI4
RETI4
LABELV $371
endproc TSS_CompareChars 8 4
proc TSS_CompareNames 8 8
line 1040
;1038:}
;1039:
;1040:static int TSS_CompareNames(const char* name1, const char* name2) {
line 1041
;1041:	if (!name1 || !name2) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $377
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $383
LABELV $377
line 1042
;1042:		if (name1) return 1;	// NULL sorts lowest
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $378
CNSTI4 1
RETI4
ADDRGP4 $374
JUMPV
LABELV $378
line 1043
;1043:		if (name2) return -1;	// NULL sorts lowest
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $380
CNSTI4 -1
RETI4
ADDRGP4 $374
JUMPV
LABELV $380
line 1044
;1044:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $374
JUMPV
LABELV $382
line 1047
;1045:	}
;1046:
;1047:	while (*name1 && *name2) {
line 1050
;1048:		int cmp;
;1049:
;1050:		cmp = TSS_CompareChars(*name1, *name2);
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 4
ADDRGP4 TSS_CompareChars
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 1051
;1051:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $385
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $374
JUMPV
LABELV $385
line 1053
;1052:
;1053:		name1++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1054
;1054:		name2++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1055
;1055:	}
LABELV $383
line 1047
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $387
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $382
LABELV $387
line 1056
;1056:	return (*name1 & 255) - (*name2 & 255);
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 255
BANDI4
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 255
BANDI4
SUBI4
RETI4
LABELV $374
endproc TSS_CompareNames 8 8
proc CG_TSS_CompareStrategies 28 8
line 1063
;1057:}
;1058:
;1059:static int CG_TSS_CompareStrategies(
;1060:	tss_strategySlot_t* s1,
;1061:	tss_strategySlot_t* s2,
;1062:	tss_strategySortOrder_t order
;1063:) {
line 1067
;1064:	int cmp;
;1065:
;1066:	// NOTE: strategies with highest creation / access time / search compatibility sort first
;1067:	switch (order) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $390
ADDRLP4 4
INDIRI4
CNSTI4 4
GTI4 $390
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $415
ADDP4
INDIRP4
JUMPV
data
align 4
LABELV $415
address $392
address $395
address $398
address $403
address $408
code
LABELV $392
line 1069
;1068:	case SSO_creationTime:
;1069:		cmp = s2->creationTime - s1->creationTime;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRU4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRU4
SUBU4
CVUI4 4
ASGNI4
line 1070
;1070:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $390
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
line 1071
;1071:		break;
LABELV $395
line 1073
;1072:	case SSO_accessTime:
;1073:		cmp = s2->accessTime - s1->accessTime;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
SUBU4
CVUI4 4
ASGNI4
line 1074
;1074:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $390
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
line 1075
;1075:		break;
LABELV $398
line 1077
;1076:	case SSO_name_creationTime:
;1077:		cmp = TSS_CompareNames(s1->tssname, s2->tssname);
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 TSS_CompareNames
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 1078
;1078:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $399
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
LABELV $399
line 1079
;1079:		cmp = s2->creationTime - s1->creationTime;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRU4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRU4
SUBU4
CVUI4 4
ASGNI4
line 1080
;1080:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $390
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
line 1081
;1081:		break;
LABELV $403
line 1083
;1082:	case SSO_name_accessTime:
;1083:		cmp = TSS_CompareNames(s1->tssname, s2->tssname);
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 TSS_CompareNames
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ASGNI4
line 1084
;1084:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $404
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
LABELV $404
line 1085
;1085:		cmp = s2->accessTime - s1->accessTime;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
SUBU4
CVUI4 4
ASGNI4
line 1086
;1086:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $390
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
line 1087
;1087:		break;
LABELV $408
line 1089
;1088:	case SSO_searchResult:
;1089:		cmp = searchCompatibility[s2->id] - searchCompatibility[s1->id];
ADDRLP4 20
ADDRGP4 searchCompatibility
ASGNP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1090
;1090:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $409
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
LABELV $409
line 1091
;1091:		cmp = TSS_CompareNames(s1->tssname, s2->tssname);
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 TSS_CompareNames
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 1092
;1092:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $411
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
LABELV $411
line 1093
;1093:		cmp = s2->accessTime - s1->accessTime;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
SUBU4
CVUI4 4
ASGNI4
line 1094
;1094:		if (cmp) return cmp;
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $390
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $388
JUMPV
line 1095
;1095:		break;
line 1097
;1096:	default:
;1097:		break;
LABELV $390
line 1100
;1098:	}
;1099:	// this point should not be reached
;1100:	return s2->id - s1->id;
ADDRFP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
SUBI4
RETI4
LABELV $388
endproc CG_TSS_CompareStrategies 28 8
proc CG_TSS_InsertStrategy 20 12
line 1103
;1101:}
;1102:
;1103:static int CG_TSS_InsertStrategy(tss_strategySlot_t* slot, tss_strategySortOrder_t order) {
line 1107
;1104:	int i;
;1105:	int j;
;1106:
;1107:	for (i = 0; i < numStrategies[order]; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $420
JUMPV
LABELV $417
line 1110
;1108:		tss_strategySlot_t* cmp;
;1109:
;1110:		cmp = &strategyStock.slots[sortedStrategies[order][i]];
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1111
;1111:		if (CG_TSS_CompareStrategies(cmp, slot, order) >= 0) break;
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_TSS_CompareStrategies
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $421
ADDRGP4 $419
JUMPV
LABELV $421
line 1112
;1112:	}
LABELV $418
line 1107
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $420
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $417
LABELV $419
line 1115
;1113:
;1114:	// insert at 'i'
;1115:	for (j = numStrategies[order] - 1; j >= i; j--) {
ADDRLP4 4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $426
JUMPV
LABELV $423
line 1117
;1116:		// copy from 'j' to 'j+1'
;1117:		sortedStrategies[order][j + 1] = sortedStrategies[order][j];
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
ADDRGP4 sortedStrategies
ASGNP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
ADDI4
ADDRLP4 12
INDIRI4
CNSTI4 4000
MULI4
ADDRLP4 16
INDIRP4
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRI4
CNSTI4 4000
MULI4
ADDRLP4 16
INDIRP4
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1118
;1118:	}
LABELV $424
line 1115
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $426
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $423
line 1119
;1119:	sortedStrategies[order][i] = slot->id;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1120
;1120:	numStrategies[order]++;
ADDRLP4 8
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1121
;1121:	return i;
ADDRLP4 0
INDIRI4
RETI4
LABELV $416
endproc CG_TSS_InsertStrategy 20 12
proc CG_TSS_RemoveStrategy 20 0
line 1124
;1122:}
;1123:
;1124:static void CG_TSS_RemoveStrategy(tss_strategySlot_t* slot, tss_strategySortOrder_t order) {
line 1128
;1125:	int i;
;1126:	int j;
;1127:
;1128:	for (i = 0; i < numStrategies[order]; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $431
JUMPV
LABELV $428
line 1129
;1129:		if (sortedStrategies[order][i] == slot->id) break;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $432
ADDRGP4 $430
JUMPV
LABELV $432
line 1130
;1130:	}
LABELV $429
line 1128
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $431
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $428
LABELV $430
line 1131
;1131:	if (i >= numStrategies[order]) return;
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $434
ADDRGP4 $427
JUMPV
LABELV $434
line 1133
;1132:
;1133:	for (j = i + 1; j < numStrategies[order]; j++) {
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $439
JUMPV
LABELV $436
line 1135
;1134:		// copy from 'j' to 'j-1'
;1135:		sortedStrategies[order][j - 1] = sortedStrategies[order][j];
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
ADDRGP4 sortedStrategies
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
ADDRLP4 12
INDIRI4
CNSTI4 4000
MULI4
ADDRLP4 16
INDIRP4
ADDP4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRI4
CNSTI4 4000
MULI4
ADDRLP4 16
INDIRP4
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1136
;1136:	}
LABELV $437
line 1133
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $439
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $436
line 1137
;1137:	sortedStrategies[order][j - 1] = -1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
CNSTI4 -1
ASGNI4
line 1138
;1138:	numStrategies[order]--;
ADDRLP4 8
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1139
;1139:}
LABELV $427
endproc CG_TSS_RemoveStrategy 20 0
proc CG_TSS_StartInitStrategyStock 4 12
line 1141
;1140:
;1141:static void CG_TSS_StartInitStrategyStock(void) {
line 1144
;1142:	int i;
;1143:
;1144:	memset(&strategyStock, 0, sizeof(strategyStock));
ADDRGP4 strategyStock
ARGP4
CNSTI4 0
ARGI4
CNSTI4 112000
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1145
;1145:	memset(&sortedStrategies, -1, sizeof(sortedStrategies));
ADDRGP4 sortedStrategies
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 20000
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1146
;1146:	memset(&searchCompatibility, 0, sizeof(searchCompatibility));
ADDRGP4 searchCompatibility
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4000
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1147
;1147:	searchPattern[0] = 0;
ADDRGP4 searchPattern
CNSTI1 0
ASGNI1
line 1148
;1148:	cg.tssCreationClock = 1;
ADDRGP4 cg+162896
CNSTI4 1
ASGNI4
line 1149
;1149:	cg.tssAccessClock = 1;
ADDRGP4 cg+162900
CNSTI4 1
ASGNI4
line 1150
;1150:	for (i = 0; i < SSO_num_orders; i++) numStrategies[i] = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $443
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
CNSTI4 0
ASGNI4
LABELV $444
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 5
LTI4 $443
line 1151
;1151:	memset(strategyPaletteBufUsed, 0, sizeof(strategyPaletteBufUsed));
ADDRGP4 strategyPaletteBufUsed
ARGP4
CNSTI4 0
ARGI4
CNSTI4 104
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1152
;1152:}
LABELV $440
endproc CG_TSS_StartInitStrategyStock 4 12
proc CG_TSS_EndInitStrategyStock 8 8
line 1154
;1153:
;1154:static void CG_TSS_EndInitStrategyStock(void) {
line 1157
;1155:	int i;
;1156:
;1157:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $448
line 1158
;1158:		strategyStock.slots[i].id = i;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1159
;1159:		strategyStock.slots[i].flags = 0;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+12
ADDP4
CNSTI4 0
ASGNI4
line 1161
;1160:
;1161:		if (strategyStock.slots[i].filename[0]) {
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $453
line 1162
;1162:			if (strategyStock.slots[i].creationTime >= cg.tssCreationClock) {
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
INDIRU4
ADDRGP4 cg+162896
INDIRI4
CVIU4 4
LTU4 $456
line 1163
;1163:				cg.tssCreationClock = strategyStock.slots[i].creationTime + 1;
ADDRGP4 cg+162896
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
INDIRU4
CNSTU4 1
ADDU4
CVUI4 4
ASGNI4
line 1164
;1164:			}
LABELV $456
line 1165
;1165:			if (strategyStock.slots[i].accessTime >= cg.tssAccessClock) {
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+8
ADDP4
INDIRU4
ADDRGP4 cg+162900
INDIRI4
CVIU4 4
LTU4 $462
line 1166
;1166:				cg.tssAccessClock = strategyStock.slots[i].accessTime + 1;
ADDRGP4 cg+162900
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+8
ADDP4
INDIRU4
CNSTU4 1
ADDU4
CVUI4 4
ASGNI4
line 1167
;1167:			}
LABELV $462
line 1169
;1168:
;1169:			CG_TSS_InsertStrategy(&strategyStock.slots[i], SSO_creationTime);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1170
;1170:			CG_TSS_InsertStrategy(&strategyStock.slots[i], SSO_accessTime);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1171
;1171:			CG_TSS_InsertStrategy(&strategyStock.slots[i], SSO_name_creationTime);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1172
;1172:			CG_TSS_InsertStrategy(&strategyStock.slots[i], SSO_name_accessTime);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1173
;1173:			CG_TSS_InsertStrategy(&strategyStock.slots[i], SSO_searchResult);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1174
;1174:		}
LABELV $453
line 1175
;1175:	}
LABELV $449
line 1157
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $448
line 1176
;1176:}
LABELV $447
endproc CG_TSS_EndInitStrategyStock 8 8
proc TSSFS_EnterStrategyFileInStock 148 16
line 1179
;1177:
;1178:#if TSSINCVAR
;1179:static qboolean TSSFS_EnterStrategyFileInStock(int cvarindex) {
line 1186
;1180:	char cvarbase[32];
;1181:	char filename[TSS_NAME_SIZE];
;1182:	tss_packedStrategyHeader_t header;
;1183:	int i;
;1184:	tss_strategySlot_t* freeSlot;
;1185:
;1186:	if (cvarindex < 0 || cvarindex > TSS_MAX_STRATEGIES) return qfalse;
ADDRLP4 128
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
LTI4 $471
ADDRLP4 128
INDIRI4
CNSTI4 1000
LEI4 $469
LABELV $471
CNSTI4 0
RETI4
ADDRGP4 $468
JUMPV
LABELV $469
line 1187
;1187:	Com_sprintf(cvarbase, sizeof(cvarbase), "tsspak%03d", cvarindex);
ADDRLP4 40
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $472
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1188
;1188:	trap_Cvar_VariableStringBuffer(va("%sn", cvarbase), filename, sizeof(filename));
ADDRGP4 $473
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 132
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1189
;1189:	if (!filename[0]) return qfalse;
ADDRLP4 8
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $474
CNSTI4 0
RETI4
ADDRGP4 $468
JUMPV
LABELV $474
line 1190
;1190:	if (!TSSFS_GetPackedStrategyHeader(cvarbase, &header)) return qfalse;
ADDRLP4 40
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 136
ADDRGP4 TSSFS_GetPackedStrategyHeader
CALLI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 0
NEI4 $476
CNSTI4 0
RETI4
ADDRGP4 $468
JUMPV
LABELV $476
line 1191
;1191:	if (header.gametype != cg.tssGametype) return qtrue;
ADDRLP4 72+5
INDIRI1
CVII4 1
ADDRGP4 cg+128096
INDIRI4
EQI4 $478
CNSTI4 1
RETI4
ADDRGP4 $468
JUMPV
LABELV $478
line 1193
;1192:	
;1193:	freeSlot = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
line 1194
;1194:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $482
line 1197
;1195:		tss_strategySlot_t* slot;
;1196:
;1197:		slot = &strategyStock.slots[i];
ADDRLP4 140
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1198
;1198:		if (!slot->filename[0]) {
ADDRLP4 140
INDIRP4
CNSTI4 16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $486
line 1199
;1199:			if (!freeSlot) freeSlot = slot;
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $483
ADDRLP4 4
ADDRLP4 140
INDIRP4
ASGNP4
line 1200
;1200:			continue;
ADDRGP4 $483
JUMPV
LABELV $486
line 1202
;1201:		}
;1202:		if (strcmp(slot->filename, filename)) continue;
ADDRLP4 140
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 144
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 0
EQI4 $490
ADDRGP4 $483
JUMPV
LABELV $490
line 1204
;1203:
;1204:		freeSlot = slot;
ADDRLP4 4
ADDRLP4 140
INDIRP4
ASGNP4
line 1205
;1205:		break;
ADDRGP4 $484
JUMPV
LABELV $483
line 1194
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $482
LABELV $484
line 1207
;1206:	}
;1207:	if (!freeSlot) return qfalse;
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $492
CNSTI4 0
RETI4
ADDRGP4 $468
JUMPV
LABELV $492
line 1209
;1208:
;1209:	freeSlot->id = i;	// mark as valid
ADDRLP4 4
INDIRP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1210
;1210:	Q_strncpyz(freeSlot->filename, filename, sizeof(freeSlot->filename));
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 8
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1211
;1211:	Q_strncpyz(freeSlot->tssname, header.name, sizeof(freeSlot->tssname));
ADDRLP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 72+24
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1212
;1212:	Q_strncpyz(freeSlot->cvarbase, cvarbase, sizeof(freeSlot->cvarbase));
ADDRLP4 4
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRLP4 40
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1213
;1213:	return qtrue;
CNSTI4 1
RETI4
LABELV $468
endproc TSSFS_EnterStrategyFileInStock 148 16
bss
align 4
LABELV $496
skip 40116
export TSSFS_LoadStrategyStock
code
proc TSSFS_LoadStrategyStock 32 12
line 1218
;1214:}
;1215:#endif
;1216:
;1217:#if TSSINCVAR
;1218:void TSSFS_LoadStrategyStock(void) {
line 1224
;1219:	static tss_packedStrategyStock_t pss;
;1220:	int size;
;1221:	const char* stockName;
;1222:	int i;
;1223:
;1224:	CG_TSS_StartInitStrategyStock();
ADDRGP4 CG_TSS_StartInitStrategyStock
CALLV
pop
line 1226
;1225:
;1226:	switch (cg.tssGametype) {
ADDRLP4 12
ADDRGP4 cg+128096
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 3
EQI4 $500
ADDRLP4 12
INDIRI4
CNSTI4 4
EQI4 $502
ADDRGP4 $495
JUMPV
LABELV $500
line 1228
;1227:	case GT_TEAM:
;1228:		stockName = "tdmstk";
ADDRLP4 8
ADDRGP4 $501
ASGNP4
line 1229
;1229:		break;
ADDRGP4 $498
JUMPV
LABELV $502
line 1231
;1230:	case GT_CTF:
;1231:		stockName = "ctfstk";
ADDRLP4 8
ADDRGP4 $503
ASGNP4
line 1232
;1232:		break;
line 1234
;1233:	default:
;1234:		return;
LABELV $498
line 1237
;1235:	}
;1236:
;1237:	size = TSSFS_CollectCVarData(stockName, &pss, sizeof(pss));
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $496
ARGP4
CNSTI4 40116
ARGI4
ADDRLP4 16
ADDRGP4 TSSFS_CollectCVarData
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 1238
;1238:	if (size < sizeof(pss)) {
ADDRLP4 4
INDIRI4
CVIU4 4
CNSTU4 40116
GEU4 $504
line 1239
;1239:		memset(&pss, 0, sizeof(pss));
ADDRGP4 $496
ARGP4
CNSTI4 0
ARGI4
CNSTI4 40116
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1240
;1240:	}
LABELV $504
line 1242
;1241:
;1242:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $506
line 1243
;1243:		strategyStock.slots[i].id = -1;	// this is later used to detect deleted files
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
CNSTI4 -1
ASGNI4
line 1244
;1244:		strategyStock.slots[i].creationTime = pss.slots[i].creationTime;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 $496+116
ADDP4
INDIRU4
ASGNU4
line 1245
;1245:		strategyStock.slots[i].accessTime = pss.slots[i].accessTime;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 $496+116+4
ADDP4
INDIRU4
ASGNU4
line 1246
;1246:		Q_strncpyz(strategyStock.slots[i].filename, pss.slots[i].filename, sizeof(strategyStock.slots[i].filename));
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 $496+116+8
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1247
;1247:	}
LABELV $507
line 1242
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $506
line 1249
;1248:
;1249:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $519
line 1250
;1250:		if (!TSSFS_EnterStrategyFileInStock(i)) break;
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 TSSFS_EnterStrategyFileInStock
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $523
ADDRGP4 $521
JUMPV
LABELV $523
line 1251
;1251:	}
LABELV $520
line 1249
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $519
LABELV $521
line 1254
;1252:
;1253:	// remove deleted files
;1254:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $525
line 1256
;1255:		if (
;1256:			!strategyStock.slots[i].filename[0] ||
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $532
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
INDIRI4
CNSTI4 0
GEI4 $529
LABELV $532
line 1258
;1257:			strategyStock.slots[i].id < 0
;1258:		) {
line 1259
;1259:			memset(&strategyStock.slots[i], 0, sizeof(tss_strategySlot_t));
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 112
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1260
;1260:		}
LABELV $529
line 1262
;1261:
;1262:		strategyStock.slots[i].id = i;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1263
;1263:	}
LABELV $526
line 1254
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $525
line 1266
;1264:
;1265:	// get system time
;1266:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $533
line 1267
;1267:		if (strategyStock.slots[i].creationTime >= cg.tssCreationClock) {
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
INDIRU4
ADDRGP4 cg+162896
INDIRI4
CVIU4 4
LTU4 $537
line 1268
;1268:			cg.tssCreationClock = strategyStock.slots[i].creationTime + 1;
ADDRGP4 cg+162896
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
INDIRU4
CNSTU4 1
ADDU4
CVUI4 4
ASGNI4
line 1269
;1269:		}
LABELV $537
line 1270
;1270:	}
LABELV $534
line 1266
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $533
line 1273
;1271:
;1272:	// set creation time on new files
;1273:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $543
line 1274
;1274:		if (!strategyStock.slots[i].filename[0]) continue;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $547
ADDRGP4 $544
JUMPV
LABELV $547
line 1275
;1275:		if (strategyStock.slots[i].creationTime) continue;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
INDIRU4
CNSTU4 0
EQU4 $550
ADDRGP4 $544
JUMPV
LABELV $550
line 1277
;1276:
;1277:		strategyStock.slots[i].creationTime = cg.tssCreationClock++;
ADDRLP4 24
ADDRGP4 cg+162896
ASGNP4
ADDRLP4 20
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+4
ADDP4
ADDRLP4 20
INDIRI4
CVIU4 4
ASGNU4
line 1278
;1278:	}
LABELV $544
line 1273
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $543
line 1280
;1279:	
;1280:	CG_TSS_EndInitStrategyStock();
ADDRGP4 CG_TSS_EndInitStrategyStock
CALLV
pop
line 1282
;1281:
;1282:	if (size >= sizeof(pss)) {
ADDRLP4 4
INDIRI4
CVIU4 4
CNSTU4 40116
LTU4 $555
line 1283
;1283:		TSS_SetPalette(&pss.palette);
ADDRGP4 $496
ARGP4
ADDRGP4 TSS_SetPalette
CALLV
pop
line 1284
;1284:	}
LABELV $555
line 1285
;1285:}
LABELV $495
endproc TSSFS_LoadStrategyStock 32 12
bss
align 4
LABELV $558
skip 40116
export TSSFS_SaveStrategyStock
code
proc TSSFS_SaveStrategyStock 32 16
line 1289
;1286:#endif
;1287:
;1288:#if TSSINCVAR
;1289:void TSSFS_SaveStrategyStock(void) {
line 1296
;1290:	static tss_packedStrategyStock_t pss;
;1291:	const char* stockName;
;1292:	const char* stockFileName;
;1293:	const char* stockBase;
;1294:	int i;
;1295:	
;1296:	switch (cg.tssGametype) {
ADDRLP4 16
ADDRGP4 cg+128096
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 3
EQI4 $562
ADDRLP4 16
INDIRI4
CNSTI4 4
EQI4 $565
ADDRGP4 $557
JUMPV
LABELV $562
line 1298
;1297:	case GT_TEAM:
;1298:		stockName = "tdmstk";
ADDRLP4 4
ADDRGP4 $501
ASGNP4
line 1299
;1299:		stockFileName = "tss/tdm.stk";
ADDRLP4 8
ADDRGP4 $563
ASGNP4
line 1300
;1300:		stockBase = "set tdmstk";
ADDRLP4 12
ADDRGP4 $564
ASGNP4
line 1301
;1301:		break;
ADDRGP4 $560
JUMPV
LABELV $565
line 1303
;1302:	case GT_CTF:
;1303:		stockName = "ctfstk";
ADDRLP4 4
ADDRGP4 $503
ASGNP4
line 1304
;1304:		stockFileName = "tss/ctf.stk";
ADDRLP4 8
ADDRGP4 $566
ASGNP4
line 1305
;1305:		stockBase = "set ctfstk";
ADDRLP4 12
ADDRGP4 $567
ASGNP4
line 1306
;1306:		break;
line 1308
;1307:	default:
;1308:		return;
LABELV $560
line 1311
;1309:	}
;1310:
;1311:	memset(&pss, 0, sizeof(pss));
ADDRGP4 $558
ARGP4
CNSTI4 0
ARGI4
CNSTI4 40116
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1312
;1312:	TSS_GetPalette(&pss.palette);
ADDRGP4 $558
ARGP4
ADDRGP4 TSS_GetPalette
CALLV
pop
line 1314
;1313:
;1314:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $568
line 1318
;1315:		tss_strategySlot_t* slot;
;1316:		tss_packedStrategySlot_t* ps;
;1317:
;1318:		slot = &strategyStock.slots[i];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1319
;1319:		ps = &pss.slots[i];
ADDRLP4 24
ADDRLP4 0
INDIRI4
CNSTI4 40
MULI4
ADDRGP4 $558+116
ADDP4
ASGNP4
line 1320
;1320:		ps->creationTime = slot->creationTime;
ADDRLP4 24
INDIRP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRU4
ASGNU4
line 1321
;1321:		ps->accessTime = slot->accessTime;
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRU4
ASGNU4
line 1322
;1322:		Q_strncpyz(ps->filename, slot->filename, sizeof(ps->filename));
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1324
;1323:
;1324:		if (!ps->filename[0]) continue;
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $573
ADDRGP4 $569
JUMPV
LABELV $573
line 1325
;1325:		if (!(slot->flags & STSL_nameChanged_F)) continue;
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $575
ADDRGP4 $569
JUMPV
LABELV $575
line 1327
;1326:
;1327:		slot->flags = 0;
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 1328
;1328:		TSSFS_LoadStrategy(slot->cvarbase, &strategyFileBuf);
ADDRLP4 20
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRGP4 strategyFileBuf
ARGP4
ADDRGP4 TSSFS_LoadStrategy
CALLI4
pop
line 1329
;1329:		Q_strncpyz(strategyFileBuf.name, slot->tssname, sizeof(strategyFileBuf.name));
ADDRGP4 strategyFileBuf+28
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 48
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1330
;1330:		TSSFS_SaveStrategy(slot->filename, slot->cvarbase, &strategyFileBuf);
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRGP4 strategyFileBuf
ARGP4
ADDRGP4 TSSFS_SaveStrategy
CALLI4
pop
line 1331
;1331:	}
LABELV $569
line 1314
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $568
line 1333
;1332:
;1333:	TSSFS_DumpBufferToCvars(stockName, &pss, sizeof(pss));
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $558
ARGP4
CNSTI4 40116
ARGI4
ADDRGP4 TSSFS_DumpBufferToCvars
CALLV
pop
line 1334
;1334:	TSSFS_DumpBufferToFile(stockFileName, stockBase, &pss, sizeof(pss));
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 $558
ARGP4
CNSTI4 40116
ARGI4
ADDRGP4 TSSFS_DumpBufferToFile
CALLI4
pop
line 1335
;1335:}
LABELV $557
endproc TSSFS_SaveStrategyStock 32 16
export CG_TSS_NumStrategiesInStock
proc CG_TSS_NumStrategiesInStock 0 0
line 1419
;1336:#endif
;1337:
;1338:#if !TSSINCVAR
;1339:void CG_TSS_LoadStrategyStock(void) {
;1340:	fileHandle_t f;
;1341:	int len;
;1342:	const char* stockFile;
;1343:	int i;
;1344:
;1345:	CG_TSS_StartInitStrategyStock();
;1346:
;1347:	// read the strategy stock
;1348:	// NOTE: the stock file has already been updated by UI_TSS_UpdateStrategyStock()
;1349:	switch (cg.tssGametype) {
;1350:	case GT_TEAM:
;1351:		strategyStockPath = "tss/tdm/";
;1352:		stockFile = "tss/tdm/" TSS_STOCK_FILE;
;1353:		break;
;1354:	case GT_CTF:
;1355:		strategyStockPath = "tss/ctf/";
;1356:		stockFile = "tss/ctf/" TSS_STOCK_FILE;
;1357:		break;
;1358:	default:
;1359:		strategyStockPath = NULL;
;1360:		return;
;1361:	}
;1362:	len = trap_FS_FOpenFile(stockFile, &f, FS_READ);
;1363:	if (f && len == sizeof(strategyStock)) {
;1364:		CG_Printf("reading %s...\n", stockFile);
;1365:		trap_FS_Read(&strategyStock, sizeof(strategyStock), f);
;1366:	}
;1367:	if (f) trap_FS_FCloseFile(f);
;1368:
;1369:	CG_TSS_EndInitStrategyStock();
;1370:}
;1371:#endif
;1372:
;1373:#if !TSSINCVAR
;1374:void CG_TSS_SaveStrategyStock(void) {
;1375:	char filename[64];
;1376:	fileHandle_t f;
;1377:	int len;
;1378:	int i;
;1379:
;1380:	if (!strategyStockPath) return;
;1381:
;1382:	// save the new tssnames in the affiliated strategy files
;1383:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
;1384:		if (!strategyStock.slots[i].filename[0]) continue;
;1385:		if (!(strategyStock.slots[i].flags & STSL_nameChanged_F)) continue;
;1386:
;1387:		strategyStock.slots[i].flags = 0;
;1388:		
;1389:		// load the complete strategy file
;1390:		Com_sprintf(filename, sizeof(filename), "%s%s", strategyStockPath, strategyStock.slots[i].filename);
;1391:		len = trap_FS_FOpenFile(filename, &f, FS_READ);
;1392:		if (!f) goto NextSlot;
;1393:		if (len != sizeof(strategyFileBuf)) goto NextSlot;
;1394:		trap_FS_Read(&strategyFileBuf, sizeof(strategyFileBuf), f);
;1395:		trap_FS_FCloseFile(f);
;1396:		f = 0;
;1397:
;1398:		// change the name & save back
;1399:		strcpy(strategyFileBuf.name, strategyStock.slots[i].tssname);	// only strings can be set directly in the file buf
;1400:		trap_FS_FOpenFile(filename, &f, FS_WRITE);
;1401:		if (!f) goto NextSlot;
;1402:		trap_FS_Write(&strategyFileBuf, sizeof(strategyFileBuf), f);
;1403:		trap_FS_FCloseFile(f);
;1404:
;1405:		NextSlot:
;1406:		if (f) trap_FS_FCloseFile(f);
;1407:	}
;1408:
;1409:	// save the strategy stock
;1410:	Com_sprintf(filename, sizeof(filename), "%s" TSS_STOCK_FILE, strategyStockPath);
;1411:	trap_FS_FOpenFile(filename, &f, FS_WRITE);
;1412:	if (f) {
;1413:		trap_FS_Write(&strategyStock, sizeof(strategyStock), f);
;1414:		trap_FS_FCloseFile(f);
;1415:	}
;1416:}
;1417:#endif
;1418:
;1419:int CG_TSS_NumStrategiesInStock(tss_strategySortOrder_t order) {
line 1420
;1420:	return numStrategies[order];
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
RETI4
LABELV $579
endproc CG_TSS_NumStrategiesInStock 0 0
export CG_TSS_GetSlotByID
proc CG_TSS_GetSlotByID 4 0
line 1423
;1421:}
;1422:
;1423:tss_strategySlot_t* CG_TSS_GetSlotByID(int id) {
line 1426
;1424:	tss_strategySlot_t* slot;
;1425:
;1426:	if (id < 0) return NULL;
ADDRFP4 0
INDIRI4
CNSTI4 0
GEI4 $581
CNSTP4 0
RETP4
ADDRGP4 $580
JUMPV
LABELV $581
line 1427
;1427:	if (id >= TSS_MAX_STRATEGIES) return NULL;
ADDRFP4 0
INDIRI4
CNSTI4 1000
LTI4 $583
CNSTP4 0
RETP4
ADDRGP4 $580
JUMPV
LABELV $583
line 1429
;1428:
;1429:	slot = &strategyStock.slots[id];
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1430
;1430:	if (!slot->filename[0]) return NULL;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $585
CNSTP4 0
RETP4
ADDRGP4 $580
JUMPV
LABELV $585
line 1432
;1431:
;1432:	return slot;
ADDRLP4 0
INDIRP4
RETP4
LABELV $580
endproc CG_TSS_GetSlotByID 4 0
export CG_TSS_GetSlotByName
proc CG_TSS_GetSlotByName 12 8
line 1435
;1433:}
;1434:
;1435:tss_strategySlot_t* CG_TSS_GetSlotByName(const char* name) {
line 1438
;1436:	int id;
;1437:
;1438:	for (id = 0; id < TSS_MAX_STRATEGIES; id++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $588
line 1441
;1439:		tss_strategySlot_t* slot;
;1440:
;1441:		slot = &strategyStock.slots[id];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1442
;1442:		if (!slot->filename[0]) continue;
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $592
ADDRGP4 $589
JUMPV
LABELV $592
line 1444
;1443:
;1444:		if (TSS_CompareNames(slot->tssname, name)) continue;
ADDRLP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_CompareNames
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $594
ADDRGP4 $589
JUMPV
LABELV $594
line 1446
;1445:
;1446:		return slot;
ADDRLP4 4
INDIRP4
RETP4
ADDRGP4 $587
JUMPV
LABELV $589
line 1438
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $588
line 1449
;1447:	}
;1448:
;1449:	return NULL;
CNSTP4 0
RETP4
LABELV $587
endproc CG_TSS_GetSlotByName 12 8
export CG_TSS_GetSortedSlot
proc CG_TSS_GetSortedSlot 4 4
line 1452
;1450:}
;1451:
;1452:tss_strategySlot_t* CG_TSS_GetSortedSlot(int sortIndex, tss_strategySortOrder_t order) {
line 1453
;1453:	if (sortIndex < 0) return NULL;
ADDRFP4 0
INDIRI4
CNSTI4 0
GEI4 $597
CNSTP4 0
RETP4
ADDRGP4 $596
JUMPV
LABELV $597
line 1454
;1454:	if (sortIndex >= numStrategies[order]) return NULL;
ADDRFP4 0
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $599
CNSTP4 0
RETP4
ADDRGP4 $596
JUMPV
LABELV $599
line 1456
;1455:
;1456:	return CG_TSS_GetSlotByID(sortedStrategies[order][sortIndex]);
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 CG_TSS_GetSlotByID
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
RETP4
LABELV $596
endproc CG_TSS_GetSortedSlot 4 4
export CG_TSS_GetSortIndexByID
proc CG_TSS_GetSortIndexByID 4 0
line 1459
;1457:}
;1458:
;1459:int CG_TSS_GetSortIndexByID(int id, tss_strategySortOrder_t order) {
line 1462
;1460:	int sortIndex;
;1461:
;1462:	for (sortIndex = 0; sortIndex < numStrategies[order]; sortIndex++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $605
JUMPV
LABELV $602
line 1463
;1463:		if (sortedStrategies[order][sortIndex] == id) return sortIndex;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRI4
CNSTI4 4000
MULI4
ADDRGP4 sortedStrategies
ADDP4
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $606
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $601
JUMPV
LABELV $606
line 1464
;1464:	}
LABELV $603
line 1462
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $605
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 numStrategies
ADDP4
INDIRI4
LTI4 $602
line 1465
;1465:	return -1;
CNSTI4 -1
RETI4
LABELV $601
endproc CG_TSS_GetSortIndexByID 4 0
proc CG_TSS_GetStrategyBufHandle 4 0
line 1468
;1466:}
;1467:
;1468:static int CG_TSS_GetStrategyBufHandle(void) {
line 1471
;1469:	int i;
;1470:
;1471:	for (i = 0; i < TSS_MAX_STRATEGIES_PER_PALETTE; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $609
line 1472
;1472:		if (strategyPaletteBufUsed[i]) continue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 strategyPaletteBufUsed
ADDP4
INDIRI4
CNSTI4 0
EQI4 $613
ADDRGP4 $610
JUMPV
LABELV $613
line 1474
;1473:
;1474:		return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $608
JUMPV
LABELV $610
line 1471
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LTI4 $609
line 1476
;1475:	}
;1476:	return -1;
CNSTI4 -1
RETI4
LABELV $608
endproc CG_TSS_GetStrategyBufHandle 4 0
export CG_TSS_LoadPaletteSlot
proc CG_TSS_LoadPaletteSlot 20 8
line 1479
;1477:}
;1478:
;1479:qboolean CG_TSS_LoadPaletteSlot(tss_strategySlot_t* sslot, tss_strategyPaletteSlot_t* pslot) {
line 1482
;1480:	int h;
;1481:
;1482:	pslot->slot = sslot;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1483
;1483:	pslot->isChanged = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 1484
;1484:	pslot->strategy = NULL;	// mark as invalid
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTP4 0
ASGNP4
line 1485
;1485:	pslot->strategyBufHandle = -1;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 -1
ASGNI4
line 1487
;1486:
;1487:	h = CG_TSS_GetStrategyBufHandle();
ADDRLP4 4
ADDRGP4 CG_TSS_GetStrategyBufHandle
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 1488
;1488:	if (h < 0) return qfalse;
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $616
CNSTI4 0
RETI4
ADDRGP4 $615
JUMPV
LABELV $616
line 1499
;1489:
;1490:	// load the strategy file
;1491:	#if !TSSINCVAR
;1492:	{
;1493:		char filename[64];
;1494:
;1495:		Com_sprintf(filename, sizeof(filename), "%s%s", strategyStockPath, sslot->filename);
;1496:		if (!CG_TSS_LoadStrategy(filename, &strategyPaletteBuf[h])) return qfalse;
;1497:	}
;1498:	#else
;1499:		if (!TSSFS_LoadStrategy(sslot->cvarbase, &strategyPaletteBuf[h])) return qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 30388
MULI4
ADDRGP4 strategyPaletteBuf
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 TSSFS_LoadStrategy
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $618
CNSTI4 0
RETI4
ADDRGP4 $615
JUMPV
LABELV $618
line 1501
;1500:	#endif
;1501:	sslot->accessTime = cg.tssAccessClock++;
ADDRLP4 16
ADDRGP4 cg+162900
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRI4
CVIU4 4
ASGNU4
line 1502
;1502:	cg.tssSavingNeeded = qtrue;	// the accessTime needs to be updated
ADDRGP4 cg+162892
CNSTI4 1
ASGNI4
line 1504
;1503:
;1504:	CG_TSS_RemoveStrategy(sslot, SSO_accessTime);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_TSS_RemoveStrategy
CALLV
pop
line 1505
;1505:	CG_TSS_InsertStrategy(sslot, SSO_accessTime);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1507
;1506:
;1507:	CG_TSS_RemoveStrategy(sslot, SSO_name_accessTime);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 CG_TSS_RemoveStrategy
CALLV
pop
line 1508
;1508:	CG_TSS_InsertStrategy(sslot, SSO_name_accessTime);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1510
;1509:
;1510:	strategyPaletteBufUsed[h] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 strategyPaletteBufUsed
ADDP4
CNSTI4 1
ASGNI4
line 1513
;1511:
;1512:	// mark the palette entry as valid
;1513:	pslot->strategy = &strategyPaletteBuf[h];
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 30388
MULI4
ADDRGP4 strategyPaletteBuf
ADDP4
ASGNP4
line 1514
;1514:	pslot->strategyBufHandle = h;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1515
;1515:	return qtrue;
CNSTI4 1
RETI4
LABELV $615
endproc CG_TSS_LoadPaletteSlot 20 8
export CG_TSS_SavePaletteSlotIfNeeded
proc CG_TSS_SavePaletteSlotIfNeeded 16 12
line 1518
;1516:}
;1517:
;1518:void CG_TSS_SavePaletteSlotIfNeeded(tss_strategyPaletteSlot_t* pslot) {
line 1519
;1519:	if (!pslot->strategy || !pslot->slot) return;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $625
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $623
LABELV $625
ADDRGP4 $622
JUMPV
LABELV $623
line 1521
;1520:
;1521:	if (pslot->isChanged) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $626
line 1522
;1522:		strcpy(pslot->strategy->name, pslot->slot->tssname);
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1523
;1523:		pslot->slot->flags &= ~STSL_nameChanged_F;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 1533
;1524:
;1525:		#if !TSSINCVAR
;1526:		{
;1527:			char filename[64];
;1528:
;1529:			Com_sprintf(filename, sizeof(filename), "%s%s", strategyStockPath, pslot->slot->filename);
;1530:			CG_TSS_SaveStrategy(filename, pslot->strategy);
;1531:		}
;1532:		#else
;1533:			TSSFS_SaveStrategy(pslot->slot->filename, pslot->slot->cvarbase, pslot->strategy);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 TSSFS_SaveStrategy
CALLI4
pop
line 1535
;1534:		#endif
;1535:		pslot->isChanged = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 1536
;1536:	}
LABELV $626
line 1537
;1537:}
LABELV $622
endproc CG_TSS_SavePaletteSlotIfNeeded 16 12
export CG_TSS_FreePaletteSlot
proc CG_TSS_FreePaletteSlot 8 4
line 1539
;1538:
;1539:void CG_TSS_FreePaletteSlot(tss_strategyPaletteSlot_t* pslot) {
line 1540
;1540:	if (!pslot->strategy || !pslot->slot) return;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $631
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $629
LABELV $631
ADDRGP4 $628
JUMPV
LABELV $629
line 1542
;1541:
;1542:	CG_TSS_SavePaletteSlotIfNeeded(pslot);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TSS_SavePaletteSlotIfNeeded
CALLV
pop
line 1544
;1543:
;1544:	pslot->strategy = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTP4 0
ASGNP4
line 1548
;1545:
;1546:	// free the palette buf
;1547:	if (
;1548:		pslot->strategyBufHandle >= 0 &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
LTI4 $632
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 26
GEI4 $632
line 1550
;1549:		pslot->strategyBufHandle < TSS_MAX_STRATEGIES_PER_PALETTE
;1550:	) {
line 1551
;1551:		strategyPaletteBufUsed[pslot->strategyBufHandle] = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 strategyPaletteBufUsed
ADDP4
CNSTI4 0
ASGNI4
line 1552
;1552:	}
LABELV $632
line 1553
;1553:}
LABELV $628
endproc CG_TSS_FreePaletteSlot 8 4
proc CG_TSS_InitStrategySlot 52 16
line 1555
;1554:
;1555:static void CG_TSS_InitStrategySlot(tss_strategySlot_t* slot) {
line 1560
;1556:	int i;
;1557:	char buf[TSS_NAME_SIZE];
;1558:	int ext;
;1559:
;1560:	memset(slot, 0, sizeof(tss_strategySlot_t));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 112
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1562
;1561:
;1562:	ext = 0;
ADDRLP4 36
CNSTI4 0
ASGNI4
LABELV $635
line 1563
;1563:	do {
line 1564
;1564:		Com_sprintf(
ADDRLP4 4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 cg+128096
INDIRI4
CNSTI4 4
NEI4 $642
ADDRLP4 40
ADDRGP4 $639
ASGNP4
ADDRGP4 $643
JUMPV
LABELV $642
ADDRLP4 40
ADDRGP4 $640
ASGNP4
LABELV $643
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1569
;1565:			buf, sizeof(buf),
;1566:			cg.tssGametype == GT_CTF? "ctf%03d.tss" : "tdm%03d.tss",
;1567:			ext
;1568:		);
;1569:		for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $644
line 1572
;1570:			tss_strategySlot_t* cmp;
;1571:
;1572:			cmp = &strategyStock.slots[i];
ADDRLP4 44
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1573
;1573:			if (cmp == slot) continue;
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $648
ADDRGP4 $645
JUMPV
LABELV $648
line 1574
;1574:			if (Q_stricmp(cmp->filename, buf)) continue;
ADDRLP4 44
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $650
ADDRGP4 $645
JUMPV
LABELV $650
line 1576
;1575:
;1576:			ext++;
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1577
;1577:			break;
ADDRGP4 $646
JUMPV
LABELV $645
line 1569
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $644
LABELV $646
line 1579
;1578:		}
;1579:		if (i >= TSS_MAX_STRATEGIES) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $652
line 1580
;1580:			strcpy(slot->filename, buf);
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1581
;1581:			return;
ADDRGP4 $634
JUMPV
LABELV $652
line 1583
;1582:		}
;1583:	} while (1);
LABELV $636
ADDRGP4 $635
JUMPV
line 1584
;1584:}
LABELV $634
endproc CG_TSS_InitStrategySlot 52 16
proc CG_TSS_GetStrategySlotHandle 4 0
line 1586
;1585:
;1586:static int CG_TSS_GetStrategySlotHandle(void) {
line 1589
;1587:	int i;
;1588:
;1589:	for (i = 0; i < TSS_MAX_STRATEGIES; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $655
line 1590
;1590:		if (strategyStock.slots[i].filename[0]) continue;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $659
ADDRGP4 $656
JUMPV
LABELV $659
line 1592
;1591:
;1592:		return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $654
JUMPV
LABELV $656
line 1589
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $655
line 1594
;1593:	}
;1594:	return -1;
CNSTI4 -1
RETI4
LABELV $654
endproc CG_TSS_GetStrategySlotHandle 4 0
export CG_TSS_CreateNewStrategy
proc CG_TSS_CreateNewStrategy 40 12
line 1597
;1595:}
;1596:
;1597:qboolean CG_TSS_CreateNewStrategy(tss_strategyPaletteSlot_t* pslot) {
line 1603
;1598:	int bh;
;1599:	tss_strategy_t* strategy;
;1600:	int sh;
;1601:	tss_strategySlot_t* sslot;
;1602:
;1603:	memset(pslot, 0, sizeof(*pslot));
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 24
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1604
;1604:	pslot->strategyBufHandle = -1;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 -1
ASGNI4
line 1606
;1605:
;1606:	bh = CG_TSS_GetStrategyBufHandle();
ADDRLP4 16
ADDRGP4 CG_TSS_GetStrategyBufHandle
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 1607
;1607:	if (bh < 0) return qfalse;
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $663
CNSTI4 0
RETI4
ADDRGP4 $662
JUMPV
LABELV $663
line 1608
;1608:	strategy = &strategyPaletteBuf[bh];
ADDRLP4 8
ADDRLP4 4
INDIRI4
CNSTI4 30388
MULI4
ADDRGP4 strategyPaletteBuf
ADDP4
ASGNP4
line 1610
;1609:
;1610:	sh = CG_TSS_GetStrategySlotHandle();
ADDRLP4 20
ADDRGP4 CG_TSS_GetStrategySlotHandle
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 1611
;1611:	if (sh < 0) return qfalse;
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $665
CNSTI4 0
RETI4
ADDRGP4 $662
JUMPV
LABELV $665
line 1612
;1612:	sslot = &strategyStock.slots[sh];
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ASGNP4
line 1614
;1613:
;1614:	strategyPaletteBufUsed[bh] = qtrue;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 strategyPaletteBufUsed
ADDP4
CNSTI4 1
ASGNI4
line 1615
;1615:	CG_TSS_InitStrategy(strategy);
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 CG_TSS_InitStrategy
CALLV
pop
line 1617
;1616:
;1617:	CG_TSS_InitStrategySlot(sslot);	
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TSS_InitStrategySlot
CALLV
pop
line 1618
;1618:	sslot->id = sh;
ADDRLP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1619
;1619:	sslot->creationTime = cg.tssCreationClock++;
ADDRLP4 28
ADDRGP4 cg+162896
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRP4
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 24
INDIRI4
CVIU4 4
ASGNU4
line 1620
;1620:	sslot->accessTime = cg.tssAccessClock++;
ADDRLP4 36
ADDRGP4 cg+162900
ASGNP4
ADDRLP4 32
ADDRLP4 36
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 36
INDIRP4
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 32
INDIRI4
CVIU4 4
ASGNU4
line 1621
;1621:	strcpy(sslot->tssname, strategy->name);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1623
;1622:
;1623:	CG_TSS_InsertStrategy(sslot, SSO_creationTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1624
;1624:	CG_TSS_InsertStrategy(sslot, SSO_accessTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1625
;1625:	CG_TSS_InsertStrategy(sslot, SSO_name_creationTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1626
;1626:	CG_TSS_InsertStrategy(sslot, SSO_name_accessTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1627
;1627:	CG_TSS_InsertStrategy(sslot, SSO_searchResult);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1629
;1628:
;1629:	pslot->isChanged = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 1630
;1630:	pslot->slot = sslot;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1631
;1631:	pslot->strategy = strategy;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 1632
;1632:	pslot->strategyBufHandle = bh;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1634
;1633:
;1634:	cg.tssSavingNeeded = qtrue;
ADDRGP4 cg+162892
CNSTI4 1
ASGNI4
line 1635
;1635:	return qtrue;
CNSTI4 1
RETI4
LABELV $662
endproc CG_TSS_CreateNewStrategy 40 12
proc TSS_EqualPrefixSize 12 8
line 1638
;1636:}
;1637:
;1638:static int TSS_EqualPrefixSize(const char* name, const char* searchstr, int* size) {
line 1641
;1639:	int n;
;1640:
;1641:	n = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1642
;1642:	*size = 0;
ADDRFP4 8
INDIRP4
CNSTI4 0
ASGNI4
ADDRGP4 $672
JUMPV
LABELV $671
line 1643
;1643:	while (*name && *searchstr) {
line 1644
;1644:		if (*name == *searchstr) n++;
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
NEI4 $674
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $675
JUMPV
LABELV $674
line 1645
;1645:		else if (TSS_CompareChars(*name, *searchstr)) return n;
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 4
ADDRGP4 TSS_CompareChars
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $676
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $670
JUMPV
LABELV $676
LABELV $675
line 1647
;1646:
;1647:		name++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1648
;1648:		searchstr++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1649
;1649:		n++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1650
;1650:		(*size)++;
ADDRLP4 8
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1651
;1651:	}
LABELV $672
line 1643
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $678
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $671
LABELV $678
line 1652
;1652:	return n;
ADDRLP4 0
INDIRI4
RETI4
LABELV $670
endproc TSS_EqualPrefixSize 12 8
proc TSS_FindMaxSubstring 16 12
line 1658
;1653:}
;1654:
;1655:static int TSS_FindMaxSubstring(
;1656:	const char* name, int nameSize, const char* searchstr, int searchSize,
;1657:	int* matchSize
;1658:) {
line 1661
;1659:	int maxSubstring;
;1660:
;1661:	maxSubstring = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1662
;1662:	*matchSize = 0;
ADDRFP4 16
INDIRP4
CNSTI4 0
ASGNI4
ADDRGP4 $681
JUMPV
LABELV $680
line 1663
;1663:	while (nameSize > 0) {
line 1666
;1664:		int size, mSize;
;1665:
;1666:		size = TSS_EqualPrefixSize(name, searchstr, &mSize);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 12
ADDRGP4 TSS_EqualPrefixSize
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 1667
;1667:		if (size > maxSubstring) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $683
line 1668
;1668:			maxSubstring = size;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 1669
;1669:			*matchSize = mSize;
ADDRFP4 16
INDIRP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1670
;1670:		}
LABELV $683
line 1672
;1671:
;1672:		name++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1673
;1673:		nameSize--;
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1674
;1674:		if (maxSubstring >= nameSize) break;
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $685
ADDRGP4 $682
JUMPV
LABELV $685
line 1675
;1675:	}
LABELV $681
line 1663
ADDRFP4 4
INDIRI4
CNSTI4 0
GTI4 $680
LABELV $682
line 1677
;1676:
;1677:	return maxSubstring;
ADDRLP4 0
INDIRI4
RETI4
LABELV $679
endproc TSS_FindMaxSubstring 16 12
proc TSS_SearchCompatibility 32 20
line 1680
;1678:}
;1679:
;1680:static int TSS_SearchCompatibility(const char* name, const char* searchstr) {
line 1685
;1681:	int sumComp;
;1682:	int nameSize;
;1683:	int searchSize;
;1684:
;1685:	nameSize = strlen(name);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 1686
;1686:	searchSize = strlen(searchstr);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ASGNI4
line 1688
;1687:
;1688:	sumComp = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $689
JUMPV
LABELV $688
line 1689
;1689:	while (searchSize > 0) {
line 1693
;1690:		int comp;
;1691:		int matchSize;
;1692:
;1693:		comp = TSS_FindMaxSubstring(name, nameSize, searchstr, searchSize, &matchSize);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 28
ADDRGP4 TSS_FindMaxSubstring
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 28
INDIRI4
ASGNI4
line 1694
;1694:		if (comp > 30) comp = 30;
ADDRLP4 20
INDIRI4
CNSTI4 30
LEI4 $691
ADDRLP4 20
CNSTI4 30
ASGNI4
LABELV $691
line 1695
;1695:		if (comp > 0) sumComp += 1 << comp;
ADDRLP4 20
INDIRI4
CNSTI4 0
LEI4 $693
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDRLP4 20
INDIRI4
LSHI4
ADDI4
ASGNI4
LABELV $693
line 1697
;1696:		
;1697:		if (matchSize > 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
LEI4 $695
line 1698
;1698:			searchstr += matchSize;
ADDRFP4 4
ADDRLP4 24
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
ASGNP4
line 1699
;1699:			searchSize -= matchSize;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ASGNI4
line 1700
;1700:		}
ADDRGP4 $696
JUMPV
LABELV $695
line 1701
;1701:		else {
line 1702
;1702:			searchstr++;
ADDRFP4 4
ADDRFP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1703
;1703:			searchSize--;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1704
;1704:		}
LABELV $696
line 1705
;1705:	}
LABELV $689
line 1689
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $688
line 1706
;1706:	return sumComp;
ADDRLP4 8
INDIRI4
RETI4
LABELV $687
endproc TSS_SearchCompatibility 32 20
export CG_TSS_SetSearchPattern
proc CG_TSS_SetSearchPattern 12 8
line 1709
;1707:}
;1708:
;1709:void CG_TSS_SetSearchPattern(const char* pattern) {
line 1712
;1710:	int id;
;1711:
;1712:	strcpy(searchPattern, pattern);
ADDRGP4 searchPattern
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1713
;1713:	numStrategies[SSO_searchResult] = 0;
ADDRGP4 numStrategies+16
CNSTI4 0
ASGNI4
line 1715
;1714:
;1715:	for (id = 0; id < TSS_MAX_STRATEGIES; id++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $699
line 1716
;1716:		if (!strategyStock.slots[id].filename[0]) continue;
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+16
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $703
ADDRGP4 $700
JUMPV
LABELV $703
line 1718
;1717:
;1718:		searchCompatibility[id] = TSS_SearchCompatibility(strategyStock.slots[id].tssname, pattern);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock+48
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 TSS_SearchCompatibility
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 searchCompatibility
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1719
;1719:		CG_TSS_InsertStrategy(&strategyStock.slots[id], SSO_searchResult);
ADDRLP4 0
INDIRI4
CNSTI4 112
MULI4
ADDRGP4 strategyStock
ADDP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
pop
line 1720
;1720:	}
LABELV $700
line 1715
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1000
LTI4 $699
line 1721
;1721:}
LABELV $697
endproc CG_TSS_SetSearchPattern 12 8
export CG_TSS_StrategyNameChanged
proc CG_TSS_StrategyNameChanged 36 8
line 1723
;1722:
;1723:int CG_TSS_StrategyNameChanged(int sortIndex, tss_strategySortOrder_t order) {
line 1727
;1724:	tss_strategySlot_t* slot;
;1725:	int newIndex;
;1726:
;1727:	slot = CG_TSS_GetSortedSlot(sortIndex, order);
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_TSS_GetSortedSlot
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1728
;1728:	if (!slot) return sortIndex;
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $708
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $707
JUMPV
LABELV $708
line 1730
;1729:
;1730:	slot->flags |= STSL_nameChanged_F;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1731
;1731:	cg.tssSavingNeeded = qtrue;
ADDRGP4 cg+162892
CNSTI4 1
ASGNI4
line 1733
;1732:
;1733:	CG_TSS_RemoveStrategy(slot, SSO_name_creationTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_TSS_RemoveStrategy
CALLV
pop
line 1734
;1734:	newIndex = CG_TSS_InsertStrategy(slot, SSO_name_creationTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 1735
;1735:	if (order == SSO_name_creationTime) sortIndex = newIndex;
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $711
ADDRFP4 0
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $711
line 1737
;1736:
;1737:	CG_TSS_RemoveStrategy(slot, SSO_name_accessTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 CG_TSS_RemoveStrategy
CALLV
pop
line 1738
;1738:	newIndex = CG_TSS_InsertStrategy(slot, SSO_name_accessTime);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 20
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 1739
;1739:	if (order == SSO_name_accessTime) sortIndex = newIndex;
ADDRFP4 4
INDIRI4
CNSTI4 3
NEI4 $713
ADDRFP4 0
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $713
line 1741
;1740:
;1741:	searchCompatibility[slot->id] = TSS_SearchCompatibility(slot->tssname, searchPattern);
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 searchPattern
ARGP4
ADDRLP4 28
ADDRGP4 TSS_SearchCompatibility
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 searchCompatibility
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 1742
;1742:	CG_TSS_RemoveStrategy(slot, SSO_searchResult);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 CG_TSS_RemoveStrategy
CALLV
pop
line 1743
;1743:	newIndex = CG_TSS_InsertStrategy(slot, SSO_searchResult);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRLP4 32
ADDRGP4 CG_TSS_InsertStrategy
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 1744
;1744:	if (order == SSO_searchResult) sortIndex = newIndex;
ADDRFP4 4
INDIRI4
CNSTI4 4
NEI4 $715
ADDRFP4 0
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $715
line 1746
;1745:
;1746:	return sortIndex;
ADDRFP4 0
INDIRI4
RETI4
LABELV $707
endproc CG_TSS_StrategyNameChanged 36 8
bss
align 4
LABELV strategyPaletteBufUsed
skip 104
align 4
LABELV strategyPaletteBuf
skip 790088
align 1
LABELV searchPattern
skip 256
align 4
LABELV searchCompatibility
skip 4000
align 4
LABELV numStrategies
skip 20
align 4
LABELV sortedStrategies
skip 20000
align 4
LABELV strategyStock
skip 112000
align 4
LABELV strategyFileBuf
skip 30388
import CG_AdjustParticles
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_AddRealLoopingSound_fixed
import trap_S_AddLoopingSound_fixed
import trap_S_StartSound_fixed
import currentReference
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_RunPlayListFrame
import CG_ResetPlayList
import CG_ContinuePlayList
import CG_StopPlayList
import CG_ParsePlayList
import CG_InitPlayList
import CG_TSS_CheckMouseEvents
import CG_TSS_CheckKeyEvents
import CG_TSS_MouseEvent
import CG_TSS_KeyEvent
import CG_TSS_CloseInterface
import CG_TSS_OpenInterface
import CG_TSS_DrawInterface
import CG_TSS_SPrintTacticalMeasure
import CG_TSS_Update
import CG_TSS_SaveInterface
import CG_TSS_LoadInterface
import CG_TSS_InitInterface
import TSS_SetPalette
import TSS_GetPalette
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_BFGsuperExpl
import CG_GibPlayer
import CG_ScorePlum
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AdjustLocalEntities
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_DrawLightBlobs
import CG_CheckStrongLight
import CG_AddLightningMarks
import CG_AddNearbox
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_RailTrail
import CG_Draw3DLine
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PrevWeaponOrder_f
import CG_NextWeaponOrder_f
import CG_SkipWeapon_f
import CG_BestWeapon_f
import CG_AutoSwitchToBestWeapon
import CG_CalcEntityLerpPositions
import CG_Mover
import CG_AddPacketEntitiesForGlassLook
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_DrawLineSegment
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_SmoothTrace
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_GetSpawnEffectParameters
import CG_InitMonsterClientInfo
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import AddDischargeFlash
import CG_DrawTeamVote
import CG_DrawVote
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_GetScreenCoordinates
import CG_AddLFEditorCursor
import CG_AdjustEarthquakes
import CG_AddEarthquake
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_LoadLensFlareEntities
import CG_ComputeMaxVisAngle
import CG_LoadLensFlares
import CG_SelectLFEnt
import CG_SetLFEdMoveMode
import CG_SetLFEntOrigin
import CG_LFEntOrigin
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_music
import cg_autoGLC
import cg_nearbox
import cg_BFGsuperExpl
import cg_missileFlare
import cg_sunFlare
import cg_mapFlare
import cg_lensFlare
import cg_glassCloaking
import cg_trueLightning
import cg_oldPlasma
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_noTrace
import cg_tssiKey
import cg_tssiMouse
import cg_drawSegment
import cg_fireballTrail
import cg_drawNumMonsters
import cg_ignore
import cg_weaponOrderName
import cg_weaponOrder
import cg_autoswitchAmmoLimit
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_PlayerTargetOffset
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import weaponAmmoCharacteristics
import Pmove
import PM_UpdateViewAngles
import BG_TSS_GetPlayerEntityInfo
import BG_TSS_GetPlayerInfo
import BG_TSS_SetPlayerInfo
import BG_TSS_DecodeLeadership
import BG_TSS_CodeLeadership
import BG_TSS_DecodeInstructions
import BG_TSS_CodeInstructions
import TSS_DecodeInt
import TSS_CodeInt
import TSS_DecodeNibble
import TSS_CodeNibble
import BG_TSS_AssignPlayers
import BG_TSS_TakeProportionAway
import BG_TSS_Proportion
import BG_VectorChecksum
import BG_ChecksumChar
import BG_TemplateChecksum
import BG_GetGameTemplateList
import BG_ParseGameTemplate
import local_crandom
import local_random
import DeriveLocalSeed
import LocallySeededRandom
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import lrand
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $640
byte 1 116
byte 1 100
byte 1 109
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 46
byte 1 116
byte 1 115
byte 1 115
byte 1 0
align 1
LABELV $639
byte 1 99
byte 1 116
byte 1 102
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 46
byte 1 116
byte 1 115
byte 1 115
byte 1 0
align 1
LABELV $567
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 99
byte 1 116
byte 1 102
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $566
byte 1 116
byte 1 115
byte 1 115
byte 1 47
byte 1 99
byte 1 116
byte 1 102
byte 1 46
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $564
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 116
byte 1 100
byte 1 109
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $563
byte 1 116
byte 1 115
byte 1 115
byte 1 47
byte 1 116
byte 1 100
byte 1 109
byte 1 46
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $503
byte 1 99
byte 1 116
byte 1 102
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $501
byte 1 116
byte 1 100
byte 1 109
byte 1 115
byte 1 116
byte 1 107
byte 1 0
align 1
LABELV $473
byte 1 37
byte 1 115
byte 1 110
byte 1 0
align 1
LABELV $472
byte 1 116
byte 1 115
byte 1 115
byte 1 112
byte 1 97
byte 1 107
byte 1 37
byte 1 48
byte 1 51
byte 1 100
byte 1 0
align 1
LABELV $361
byte 1 65
byte 1 109
byte 1 105
byte 1 103
byte 1 97
byte 1 32
byte 1 52
byte 1 101
byte 1 118
byte 1 101
byte 1 114
byte 1 33
byte 1 0
align 1
LABELV $359
byte 1 72
byte 1 85
byte 1 78
byte 1 84
byte 1 0
align 1
LABELV $351
byte 1 116
byte 1 115
byte 1 115
byte 1 100
byte 1 97
byte 1 116
byte 1 97
byte 1 32
byte 1 0
align 1
LABELV $350
byte 1 116
byte 1 115
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $340
byte 1 0
align 1
LABELV $339
byte 1 37
byte 1 115
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $334
byte 1 37
byte 1 115
byte 1 37
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $330
byte 1 94
byte 1 49
byte 1 99
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 119
byte 1 114
byte 1 105
byte 1 116
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $199
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
